;;; The Great Computer Language Shootout
;;; http://shootout.alioth.debian.org/
;;; contributed by Dima Dorfman, 2005

(defun nsievebits (m)
  (declare (fixnum m))
  (let ((a (make-array m :initial-element 1
		       :element-type 'bit)))
    (flet ((clear (i)
	     (loop for j fixnum from (+ i i) to (1- m) by i
		   do (setf (aref a j) 0))))
      (loop for i fixnum from 2 to (1- m)
	    when (= 1 (aref a i)) do (clear i)
	    count (= 1 (aref a i))))))

(defun test (n)
  (let ((m (* 10000 (expt 2 n))))
    (format t "Primes up to~T~8<~d~>~T~8<~d~>~%" m (nsievebits m))))

(defun main ()
  (let* ((args #+sbcl sb-ext:*posix-argv*
	       #+cmu extensions:*command-line-strings*
	       #+gcl si::*command-args*)
	 (n (parse-integer (car (last args)))))
    (when (>= n 0) (test n))
    (when (>= n 1) (test (- n 1)))
    (when (>= n 2) (test (- n 2)))))
