;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/

;; Derived by Michael D. Adams from the MzScheme varient

; TODO: this program is slow on ikarus, the following changes
;       make it slightly faster
;  (import (ikarus) (ikarus system $bytevectors))
;  bytevector-u8-ref -> $bytevector-u8-ref
;  bytevector-u8-set! -> $bytevector-set!

(import (rnrs))

(define (make-bitvector size)
  (let* ((len (div (+ size 7) 8))
         (res (make-bytevector len #b11111111)))
    (let ((off (mod size 8)))
      (unless (zero? off)
              (bytevector-u8-set! res (- len 1)
                                  (- (fxarithmetic-shift-left 1 off) 1))))
    res))

(define (bitvector-ref vec i)
  (let ((byte (fxarithmetic-shift-right i 3))
        (off (fxand i #x7)))
    (and (< byte (bytevector-length vec))
         (not (zero? (fxand (bytevector-u8-ref vec byte)
                            (fxarithmetic-shift-left 1 off)))))))

(define (bitvector-set! vec i x)
  (let ((byte (fxarithmetic-shift-right i 3))
        (off (fxand i #x7)))
    (let ((val (bytevector-u8-ref vec byte))
          (mask (fxarithmetic-shift-left 1 off)))
      (bytevector-u8-set! vec
                          byte
                          (if x
                              (fxior val mask)
                              (fxand val (fxnot mask)))))))

(define (nsievebits m)
  (let ((a (make-bitvector m)))
    (let loop ((i 2) (n 0))
      (if (< i m)
          (begin
            (if (bitvector-ref a i)
                (begin
                  (let clear ((j (+ i i)))
                    (if (< j m)
                        (begin
                          (bitvector-set! a j #f)
                          (clear (+ j i)))))
                  (loop (+ 1 i) (+ 1 n)))
                (loop (+ 1 i) n)))
          n))))

(define (string-pad s n)
  (string-append (make-string (- n (string-length s)) #\space)
                 s))

(define (test n)
  (let ((m (* 10000 (fxarithmetic-shift-left 1 n))))
    (display "Primes up to ") (display (string-pad (number->string m) 8))
    (display " ") (display (string-pad (number->string (nsievebits m)) 8))
    (newline)))            

(define (main args)
  (let ([n (string->number (cadr args))])
    (when (>= n 0) (test n))
    (when (>= n 1) (test (- n 1)))
    (when (>= n 2) (test (- n 2)))))

(main (command-line))
