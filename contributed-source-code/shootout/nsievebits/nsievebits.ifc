! -*- mode: f90 -*-
!
! $Id$ ; $Name$
!
! The Great Computer Language Shootout
!   http://shootout.alioth.debian.org/
!
!   contributed by Steve Decker
!
! compilation:
!   g95 -O1 -fomit-frame-pointer nsieve_bits.f90
!   gfortran -O3 -fomit-frame-pointer nsieve_bits.f90
!   ifort -O3 nsieve_bits.f90

program nsieve_bits
  implicit none

  integer, parameter :: BSize = bit_size(1)

  integer          :: num, i, m
  character(len=2) :: argv
  integer, dimension(:), allocatable :: flags
  
  call get_command_argument(1, argv)
  read(argv, *) num
  
  do i = num, num-2, -1
     m = 2**i * 10000
     if (i == num) allocate(flags(0:m/BSize))
     write(*, "(2(a,i8))")  "Primes up to ", m, " ", nsi(m)
  end do
  
contains
  
  integer function nsi(m)
    integer, intent(in) :: m
    
    integer :: i, ind, bit, k

    do i = 2, m
       ind = i / BSize
       bit = mod(i, BSize)
       flags(ind) = ibset(flags(ind), bit)
    end do
    nsi = 0
    do i = 2, m
       if (btest(flags(i/BSize), mod(i, BSize))) then
          do k = 2*i, m, i
             ind = k / BSize
             bit = mod(k, BSize)
             flags(ind) = ibclr(flags(ind), bit)
          end do
          nsi = nsi + 1
       end if
    end do
  end function nsi
end program nsieve_bits
