(* The Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Christophe TROESTLER
 * modified by Mario Pernici
 * modified by Vladimir Silyaev
 *)

open Bigarray

let set_false (a:(int, int8_unsigned_elt, c_layout) Array1.t) i =
  let ic = i lsr 3 in
  let v = a.{ic} in
  let bit = v land lnot(1 lsl (i land 0x7)) in
    if v <> bit then a.{ic} <- bit

let nsieve m =
  let a =  Array1.create int8_unsigned c_layout ((m lsr 3) + 1) in
  Array1.fill a 0xFF;
  let count = ref 0 in
  for i = 2 to m - 1 do
    if a.{i lsr 3} land (1 lsl (i land 0x7)) > 0 then
      (let j = ref(2*i) in
      while !j < m do set_false a !j;  j := !j + i done;
      incr count)
  done;
  !count


let test n =
  let m = 10000 lsl n in
  Printf.printf "Primes up to %8i %8i\n" m (nsieve m)

let () =
  let n =
    try int_of_string(Array.get Sys.argv 1)
    with _ -> (Printf.printf "usage: %s N\n" Sys.argv.(0); exit 2) in
  test n;
  if n >= 1 then test(n-1);
  if n >= 2 then test(n-2)
