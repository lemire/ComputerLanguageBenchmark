/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Joost van der Sluis

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release nsievebits2.d
*/

import std.stdio, std.string;

int main(char[][] args)
{
    int n = args.length > 1 ? atoi(args[1]) : 1;

    for(int i = 0; i < 3; i++)
        primes(n-i);

    return 0;
}

void primes(int n)
{
    const uint bpc = uint.sizeof * 8;
    int count, prime, size = 10000 << n;
    uint[] flags;

    flags.length = size / bpc + 1;
    flags[] = uint.max;

    for(prime = 2; prime <= size; prime++)
    {
        bool IsSet(uint i)
        {
            int offset = i / bpc;
            uint mask   = 1 << (i % bpc);
            return (flags[offset] & mask) <> 0;
        }
        if(IsSet(prime))
        {
            count++;
            for(int i = prime + prime; i <= size; i += prime)
            {
                void Clear(uint i)
                {
                    int offset = i / bpc;
                    uint mask   = 1 << (i % bpc);
                    if((flags[offset] & mask) <> 0) flags[offset] = flags[offset] ^ mask;
                }
                Clear(i);
            }
        }
    }

    writefln("Primes up to %8d %8d", size, count);
}
