%  The Computer Language Shootout
%  http://shootout.alioth.debian.org/
%  contributed by Kostis Sagonas
%  modified by Per Gustafsson

-module(nsievebits).
-export([main/1]).

main([Arg]) ->
  N = list_to_integer(Arg),
  lists:foreach(fun(I) -> nsieve(10000 bsl (N-I)) end, [0,1,2]),
  halt(0).

nsieve(M) ->
  io:format("Primes up to ~8w ~8w\n", [M, nsieve(array(M), 2, M-1, 0)]).

nsieve(A, P, Sz, C) when P =< Sz ->
  NC = case (hipe_bifs:bytearray_sub(A, (P bsr 3)) band (1 bsl (P band 7))) of
	   0 -> C;
	   _ -> nsieve_sub(A, P+P, Sz, P), C+1
       end,
  nsieve(A, P+1, Sz, NC);
nsieve(_A, _P, _M, C) -> C.

nsieve_sub(A, I, Sz, P) when I =< Sz ->
  IC = (I bsr 3),
  Val = (hipe_bifs:bytearray_sub(A, IC) band bnot(1 bsl (I band 7))),
  hipe_bifs:bytearray_update(A, IC, Val),
  nsieve_sub(A, I+P, Sz, P);
nsieve_sub(_, _, _, _) -> ok.

array(M) -> hipe_bifs:bytearray((M bsr 3)+1, 16#ff).