% ----------------------------------------------------------------------
% The Great Computer Language Shootout                              
% http://shootout.alioth.debian.org/                                
%                                                                   
% Assumes execution using the following command-line usage:
%
%   pl -q -g main -t halt -s SOURCENAME -- USERARG1 ... < in > out
%
% This is a modified version of the orignal 'nsieve.swiprolog'
% submission. Whilst that particular implementation made quite heavy
% demands of the global stack [owing to the creation of a very large
% array], the current version:
%
% * Requires an array approximately 1/32 the size since each array slot
%   stores 32 encoded values [as opposed to a single value]
%
% * As expected, utilises bit twiddling for encoding / decoding values
% 
% In short, while memory use is curbed, runtime suffers [a trading of
% speed for a saving in space as they say]. At a value of N = 9 runtime
% *should* be within the timeout period, but probably not by much
%
% Contributed by Anthony Borla
% ----------------------------------------------------------------------

main :-
  cmdlNumArg(1, N),

  N1 is 10000 << N,
  N2 is 10000 << (N - 1),
  N3 is 10000 << (N - 2),

  calcAndshowSieve(N1),
  calcAndshowSieve(N2),
  calcAndshowSieve(N3).

% ------------------------------- %

calcAndshowSieve(N) :-
  make_array(ns, N, 0xffffffff, Array),
  nsieve(2, Array, N, 0, R),
  format('Primes up to~t~w~21|~t~w~30|~n', [N, R]).

% ------------------------------- %

nsieve(ASize, _, ASize, R, R) :- !.

nsieve(N, Array, ASize, A, R) :-
  (is_arg(N, Array) -> clear_sieve(N, N, Array, ASize), A1 is A + 1 ; A1 is A),
  N1 is N + 1, !, nsieve(N1, Array, ASize, A1, R).

% ------------- %

clear_sieve(N, M, Array, ASize) :-
  N1 is N + M, clear_sieve_(N1, M, Array, ASize).

% ------------- %

clear_sieve_(N, _, _, ASize) :- ASize < N, !.

clear_sieve_(N, M, Array, ASize) :-
  clear_arg(N, Array),
  N1 is N + M, !, clear_sieve_(N1, M, Array, ASize).

% ------------------------------- %

array_slots(N, Slots) :- Slots is ((N + 31) >> 5) + 1.

% ------------- %

make_array(Name, N, V, Array) :-
  array_slots(N, Slots),
  functor(Array, Name, Slots),
  fill_array(Slots, V, Array).

% ------------- %

fill_array(0, _, _) :- !.

fill_array(N, V, Array) :-
  nb_setarg(N, Array, V), N1 is N - 1, !,
  fill_array(N1, V, Array).

% ------------- %

clear_arg(N, Array) :-
  Idx is (N >> 5) + 1, Value is (1 << (N /\ 31)), arg(Idx, Array, OldValue),
  Complement is \ Value,
  NewValue is OldValue /\ Complement,
  (Complement < NewValue -> nb_setarg(Idx, Array, Complement) ; nb_setarg(Idx, Array, NewValue)).

is_arg(N, Array) :-
  Idx is (N >> 5) + 1, Value is 1 << (N /\ 31), arg(Idx, Array, OldValue),
  CurrentValue is OldValue /\ Value,
  CurrentValue =\= 0.

% ------------------------------- %

argument_value(N, Arg) :-
  current_prolog_flag(argv, Cmdline), append(_, [--|UserArgs], Cmdline),
  Nth is N - 1, nth0(Nth, UserArgs, Arg).

cmdlNumArg(Nth, N) :-
  argument_value(Nth, Arg), catch(atom_number(Arg, N), _, fail) ; halt(1).

