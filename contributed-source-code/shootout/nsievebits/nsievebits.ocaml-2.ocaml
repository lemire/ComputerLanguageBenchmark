(* The Computer Language Benchmarks Game
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Christophe TROESTLER
 * modified by Mario Pernici
 * modified by Vladimir Silyaev
 * modified by Edgar Friendly and Nicolas Cannasse
 *)

module BitSet = struct

  type intern
    
  let bcreate : int -> intern = Obj.magic String.create
  external fast_get : intern -> int -> int = "%string_unsafe_get"
  external fast_set : intern -> int -> int -> unit = "%string_unsafe_set"
  external fast_bool : int -> bool = "%identity"
  let fast_fill : intern -> int -> int -> int -> unit = Obj.magic String.fill
  let fast_length : intern -> int= Obj.magic String.length
    
  let int_size = 7 (* value used to round up index *)
  let log_int_size = 3 (* number of shifts *)
    
  let create n =
    let size = (n+int_size) lsr log_int_size in
    let b = bcreate size in
      fast_fill b 0 size 0xFF;
      b
	
(*  let set t x =
    let pos = x lsr log_int_size and delta = x land int_size in
      fast_set t pos ((fast_get t pos) lor (1 lsl delta))
*)

  let unset t x =
    let pos = x lsr log_int_size and delta = x land int_size in
	fast_set t pos ((fast_get t pos) land (0xFF lxor (1 lsl delta)))
	  
  let is_set t x =
    let pos = x lsr log_int_size and delta = x land int_size in
      fast_bool (((fast_get t pos) lsr delta) land 1)
	  
end
  
let nsieve m =
  let a = BitSet.create m in
  let count = ref 0 in
  for i = 2 to m - 1 do
    if BitSet.is_set a i then
      (let j = ref(2*i) in
      while !j < m do BitSet.unset a !j;  j := !j + i done;
      incr count)
  done;
  !count


let test n =
  let m = 10000 lsl n in
  Printf.printf "Primes up to %8i %8i\n" m (nsieve m)

let () =
  let n =
    try int_of_string(Array.get Sys.argv 1)
    with _ -> (Printf.printf "usage: %s N\n" Sys.argv.(0); exit 2) in
  test n;
  if n >= 1 then test(n-1);
  if n >= 2 then test(n-2)
