% The Computer Language Benchmarks Game
% http://shootout.alioth.debian.org/
% Contributed by Valentin Kraevskiy
% Should be compiled with: -H

:- module nsievebits.

:- interface.
:- import_module io.
:- pred main(io, io).
:- mode main(di, uo) is det.

:- implementation.
:- import_module int, bool, string, bitmap, list.

main(!IO) :-
   command_line_arguments(Args, !IO),
   N = (if Args = [I | _], to_int(I, X) then X else 2),   
   foldl(run, [N, N - 1, N - 2], !IO).

:- pred run(int, io, io).
:- mode run(in, di, uo) is det.

run(N, !IO) :-
   M = 10000 * pow(2, N),   
   Res = loop(new(M + 1, yes), 2, 0),
   format("Primes up to %8i %8i\n", [i(M), i(Res)], !IO).

:- func loop(bitmap, int, int) = int.
:- mode loop(bitmap_di, in, in) = out.

loop(Bitmap, N, Accum) = 
   (if N < num_bits(Bitmap) 
       then (if unsafe_is_set(Bitmap, N)
              then loop(loopA(Bitmap, 2 * N, N), N + 1, Accum + 1)
              else loop(Bitmap, N + 1, Accum))
       else Accum).

:- func loopA(bitmap, int, int) = bitmap.
:- mode loopA(bitmap_di, in, in) = bitmap_uo.

loopA(Bitmap, N, M) =
   (if N < num_bits(Bitmap)
      then loopA(unsafe_clear(Bitmap, N), N + M, M)
      else Bitmap).
