(* nsieve-bits.sml
 *
 *   Good old Sieve of Eratosthenes (using bit array).
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 * Modified by sweeks@sweeks.com to run with MLton.
 * Bug fixed, optimized and shortened by Vesa Karvonen.
 *)

(* abbreviations *)
structure W=Word and W8=Word8 and A=Array and U=Unsafe.Array and S=StringCvt

(* word <-> string *)
val (s2w, w2s) = (S.scanString (W.scan S.DEC), S.padLeft #" " 8 o W.fmt S.DEC)

(* bit indexing *)
fun idx i = W.toIntX (W.>> (i, 0w3))
fun bit i = W8.<< (0w1, W.andb (i, 0w7))

(* bit test / set *)
fun tst (a, i) = W8.andb (U.sub (a, idx i), bit i) <> 0w0
fun set (a, i) = U.update (a, idx i, W8.orb (U.sub (a, idx i), bit i))

(* sieve *)
fun sieve n =
    let val a = A.array (W.toIntX (W.>> (n+0w7, 0w3)), 0w0)
        fun s (i, c) = let fun k j = if j>=n then () else (set (a,j) ; k (j+i))
                       in if i>=n then c else if tst (a,i) then s (i+0w1, c)
                                         else (k (i+i) ; s (i+0w1, c+0w1)) end
    in app print ["Primes up to ", w2s n, " ", w2s (s (0w2, 0w0)), "\n"] end

(* driver *)
val n = valOf (s2w (hd (CommandLine.arguments ()))) handle _ => 0w9
val _ = app (fn d => if d<=n then sieve (W.<<(0w1, n-d) * 0w10000) else ())
            [0w0, 0w1, 0w2]
