% The Computer Language Benchmarks Game
% http://shootout.alioth.debian.org/
% Based on work by Anthony Borla
% Modified for Mercury by Glendon Holst


:- module nsievebits.
:- interface.
:- import_module io.

:- pred main(io::di, io::uo) is det.

% ----------------------------------------------------------------------

:- implementation.

:- import_module bitmap.
:- import_module list.
:- import_module int.
:- import_module bool.
:- import_module string.

% ----------------------------------------------------------------------

main(!IO) :-
	io.command_line_arguments(Args, !IO),
	(
		if
			Args = [AString|_],
			string.to_int(string.strip(AString), Aint)
		then
			N = Aint
		else
			N is 9
	),
	
	nsieve(10000 << N, !IO),
	nsieve(10000 << (N-1), !IO),
	nsieve(10000 << (N-2), !IO).

% ------------------------------- %

:- pred nsieve(int::in, io::di, io::uo) is det.

nsieve(N, !IO) :-
  Arr = bitmap.new(N, yes),
  nsieve(2, Arr, 0, R),
  io.format("Primes up to %8u %8u\n", [i(N), i(R)], !IO).

% ------------------------------- %

:- pred nsieve(int::in, bitmap::in, int::in, int::out) is det.

nsieve(Index, Arr, Acc, Result) :-
(
	Index = num_bits(Arr) -> Result = Acc
;
	is_clear(Arr,Index) -> nsieve(Index+1, Arr, Acc, Result)
;
	clear_sieve(2*Index, Index, Arr, Aout), nsieve(Index+1, Aout, Acc+1, Result)
).


% ------------- %

:- pred clear_sieve(int::in, int::in, bitmap::in, bitmap::out) is det.

clear_sieve(N, M, Arr, Aout) :-
(
	if N < num_bits(Arr) then 
		clear(N, Arr, A1), clear_sieve(N+M, M, A1, Aout)
	else
		Aout = Arr
).

% ------------------------------- %

