/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
 
   contributed by Isaac Gouy (Clean novice)
   updated by John van Groningen (Clean Guru!)

   Clean is a functional programming language. 
   Existential type variable have some vague similarity
   so NToggle delegates function calls to Toggle.
*/

module methcall
import StdEnv, LanguageShootout

Start
   # toggle = makeToggle True
   # toggleValue = loop argi toggle False
   # ntoggle = makeNToggle True 3
   # ntoggleValue = loop argi ntoggle False	
   = toLString toggleValue +++ "\n" +++ 
      toLString ntoggleValue +++ "\n"

   where 	
   loop :: !Int !.Toggler !Bool -> Bool
   loop n t v
      | n == 0 = v
      # t = activate t
      # v = value t
      = loop (n-1) t v

   toLString b
      | b = "true"
      = "false"

:: Toggler = 
   E.a: { state :: a
        , activate_ :: ! a -> a
        , value_ :: ! a -> Bool
        }

value o=:{state,value_} = value_ state
activate o=:{state,activate_} = {o & state = activate_ state}

makeToggle b =
   { state = b
   , activate_ = \ state -> not state
   , value_ = \ state -> state
   }

:: TogglerR = ! { t :: !Toggler, max :: !Int, count :: !Int}

makeNToggle b max =
  { state = {t = makeToggle b, max=max, count = 0}
   , activate_ = \ {t, max, count} -> 
      if (count+1 >= max)
         {t=activate t, max=max, count=0}
         {t=t, max=max, count=count+1}
   , value_ = \ {t} -> value t
   }

