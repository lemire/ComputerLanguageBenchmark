;;; -*- mode: emacs-lisp -*-
;;; $Id$
;;; http://www.bagley.org/~doug/shootout/ 

(require 'eieio)

(defun print-bool (b)
  (if b (princ "true\n") (princ "false\n")))

(defclass toggle ()
  ((state :initarg state
	  :initform t)))

(defmethod toggle-value ((this toggle))
  (oref this state))

(defmethod activate ((this toggle))
  (oset this state (not (oref this state)))
  this)

(defclass nth-toggle (toggle)
    ((count-max :initarg :max-counter
		:initform 1)
     (counter :initform 0)))

(defmethod activate ((this nth-toggle))
  (oset this counter (+ 1 (oref this counter)))
  (cond ((>= (oref this counter)
	     (oref this count-max))
	 (oset this state (not (oref this state)))
	 (oset this counter 0)))
  this)

(defun main ()
  (let* ((arg (car command-line-args-left))
	 (n (if arg (string-to-number arg) 1)))
    (let ((tog (toggle "foo"))
	  (val t))
      (dotimes (i n)
	(setq val (toggle-value (activate tog))))
      (print-bool val)

    (let ((ntog (nth-toggle "bar" :max-counter 3))
	  (val t))
      (dotimes (i n)
	(setq val (toggle-value (activate ntog))))
      (print-bool val)))))

