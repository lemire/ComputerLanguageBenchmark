;;; -*- mode: scheme -*-
;;; $Id$
;;; http://www.bagley.org/~doug/shootout/
;;; from Manuel Serrano

(module method
	(main main)
	(static (class toggle
		       (state::bool (default #t)))
		(class nthtoggle::toggle
		       (count-max::int (default 0))
		       (counter::int (default 0)))))

(define-generic (value o::toggle))

(define (print-bool b)
  (display (if b #"true\n" #"false\n")))

(define-method (value o::toggle)
  (with-access::toggle o (state)
		       state))

(define-generic (activate o::toggle))

(define-method (activate o::toggle)
  (with-access::toggle o (state)
		       (set! state (not state))
		       o))

(define-method (activate o::nthtoggle)
  (with-access::nthtoggle o (counter count-max state)
			  (set! counter (+fx 1 counter))
			  (if (>=fx counter count-max)
			      (begin
				(set! state (not state))
				(set! counter 0)))
			  o))

(define (main args)
  (let ((n (or (and (= (length args) 2) (string->number (cadr args))) 1)))
    (let* ((val #t)
	   (toggle (instantiate::toggle
		    (state val))))
      (let loop ((i 0))
	(if (<fx i n)
	    (begin
	      (set! val (value (activate toggle)))
	      (loop (+fx i 1)))))
      (print-bool val)
      (set! val #t)
      (let ((ntoggle (instantiate::nthtoggle
		      (state #t)
		      (count-max 3))))
	(let loop ((i 0))
	  (if (<fx i n)
	      (begin
		(set! val (value (activate ntoggle)))
		(loop (+fx i 1)))))
	(print-bool val)))))
