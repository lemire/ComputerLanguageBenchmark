#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id$
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (defvar HI 0)
  (defvar LO 0)
  
  (define (hi_ex val)
    (cons 'hi_ex val))
  
  (define (lo_ex val)
    (cons 'lo_ex val))
  
  (define (some_fun num)
    (catch #t
      (hi_fun num)))
  
  (define (hi_fun num)
    (let ((val (catch 'Hi_Exception (lo_fun num))))
      (if (and (consp val)
	       (eq (car val) 'hi_ex))
	  (setq HI (1+ HI)))))
  
  (define (lo_fun num)
    (let ((val (catch 'Lo_Exception (blowup num))))
      (if (and (consp val)
	       (eq (car val) 'lo_ex))
	  (setq LO (1+ LO)))))
  
  (define (blowup num)
    (if (= 0 (mod num 2))
	(throw 'Hi_Exception (hi_ex num))
      (throw 'Lo_Exception (lo_ex num))))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (while (> n 0)
      (setq n (1- n))
      (some_fun n)))
  (format standard-output "Exceptions: HI=%d / LO=%d\n" HI LO))
