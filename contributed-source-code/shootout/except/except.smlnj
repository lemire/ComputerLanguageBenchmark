(* except.sml
 *
 *   Timing exception handling.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 *)
structure Test : sig
    val main : (string * string list) -> OS.Process.status
end = struct
    open FormatComb

    exception HiExn and LoExn
    val (hi, lo) = (ref 0, ref 0)

    fun blowup flag = raise (if flag then LoExn else HiExn)
    fun lo_fun flag = blowup flag handle LoExn => lo := !lo + 1
    fun hi_fun flag = lo_fun flag handle HiExn => hi := !hi + 1
    fun some_fun flag = hi_fun flag
	handle e => (print "Should not get here.\n"; raise e)

    fun loop (0, _) = print (format (text "Exceptions: HI=" o int o
				     text " / LO=" o int o nl) (!hi) (!lo))
      | loop (n, flag) = (some_fun flag; loop (n - 1, not flag))

    fun main' n = (loop (n, n mod 2 = 0); OS.Process.success)
    fun main (_, []) = main' 1
      | main (_, arg :: _) = main' (getOpt (Int.fromString arg, 1))
end
