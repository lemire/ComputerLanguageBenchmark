;;; -*- mode: scheme -*-
;;; $Id$
;;; http://www.bagley.org/~doug/shootout/

(module except
	(main main))

(define HI 0)
(define LO 0)

(define (some_fun n)
  (try
   (hi_fun n)
   (lambda (escape proc msg obj)
     (print "should not get here " proc ":" msg " -- " obj)
     (escape #f))))

(define (hi_fun n)
  (try
   (lo_fun n)
   (lambda (escape proc msg obj)
     (cond ((not (equal? obj 'Hi))
	    (error proc msg obj)) ; rethrow
	   (else
	    (set! HI (+ HI 1))
	    (escape #t))))))

(define (lo_fun n)
  (try
   (blowup n)
   (lambda (escape proc msg obj)
     (cond ((not (equal? obj 'Lo))
	    (error proc msg obj)) ; rethrow
	   (else
	    (set! LO (+ LO 1))
	    (escape #t))))))

(define (blowup n)
  (if (= 0 (modulo n 2))
      (error '() "Hi Exception" 'Hi)
      (error '() "Lo Exception" 'Lo)))

(define (main args)
  (let ((n (or (and (= (length args) 2) (string->number (cadr args))) 1)))
    (do ((i 0 (+ i 1)))
	((= i n))
      (some_fun i)))
  (display* "Exceptions: HI=" HI " / LO=" LO)
  (newline))
