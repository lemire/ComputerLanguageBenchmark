;;; -*- mode: emacs-lisp -*-
;;; $Id$
;;; http://www.bagley.org/~doug/shootout/

(defvar HI 0)
(defvar LO 0)
  
(defun hi_ex (val)
  (cons 'hi_ex val))
  
(defun lo_ex (val)
  (cons 'lo_ex val))
  
(defun some_fun (num)
  (catch t
    (hi_fun num)))

(defun hi_fun (num)
  (let ((val (catch 'Hi_Exception (lo_fun num))))
    (if (and (consp val)
	     (eq (car val) 'hi_ex))
	(setq HI (1+ HI)))))

(defun lo_fun (num)
  (let ((val (catch 'Lo_Exception (blowup num))))
    (if (and (consp val)
	     (eq (car val) 'lo_ex))
	(setq LO (1+ LO)))))

(defun blowup (num)
  (if (= 0 (mod num 2))
      (throw 'Hi_Exception (hi_ex num))
    (throw 'Lo_Exception (lo_ex num))))

(defun main ()
  (let* ((arg (car command-line-args-left))
	 (n (if arg (string-to-number arg) 1)))
    (while (> n 0)
      (setq n (1- n))
      (some_fun n)))
  (princ (format "Exceptions: HI=%d / LO=%d\n" HI LO)))
