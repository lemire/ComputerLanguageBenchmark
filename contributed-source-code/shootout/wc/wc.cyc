/*
 * http://shootout.alioth.debian.org/
 * Author: Waldemar Hebisch (hebisch@math.uni.wroc.pl)
 * Optimizations: Michael Herf (mike@herfconsulting.com)
 */

#include <stdio.h>
#include <unistd.h>
#include <assert.h>

#define CHAR int
#define BSIZ 4096

unsigned long ws[256];
char buff[BSIZ+1]@zeroterm;

int main() {

    int w_cnt=0,l_cnt=0,b_cnt=0,cnt;
    unsigned long was_sp = 1;
    unsigned char ?pp, ?pe;
    /* Fill tables */
    for (unsigned c = 0; c < 256; c++) ws[c] = 0;

    /* also: ws['\r']=ws['\v']=ws['\f']= */
    ws[' ']=ws['\t']=ws['\n']=1;
    ws['\n']=65536 + 1;

    /* Main loop */
    while((cnt=read(0,buff,BSIZ))) {
        unsigned long tcnt = 0;

	b_cnt += cnt;
        char ?@nozeroterm mybuf = (char ?@nozeroterm)buff;
        assert(cnt <= numelts(mybuf));
        for (unsigned ppi=0; ppi < cnt; ppi++) {
            long x = ws[mybuf[ppi]];
	    tcnt += x ^ was_sp;
	    was_sp = x & 0xFFFF;
	}
	w_cnt += tcnt  & 0xFFFF;
	l_cnt += tcnt >> 16;
    }

    w_cnt += (ws[ buff[b_cnt&(BSIZ-1)-1] ]^1)&1;
    w_cnt>>=1;

    printf("%d %d %d\n", l_cnt, w_cnt, b_cnt);
    return 0;
}
