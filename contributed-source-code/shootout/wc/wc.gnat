-- $Id$
-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- contributed by Marius Amado Alves
-- Fixed by Pascal Obry on 2005/03/30
--
-- gnatmake -O3 cw.adb

with Ada.Characters.Handling;  use Ada.Characters.Handling;
with Ada.Characters.Latin_1;   use Ada.Characters.Latin_1;
with Ada.Command_Line;         use Ada.Command_Line;
with Ada.Streams;              use Ada.Streams;
with Ada.Streams.Stream_IO;    use Ada.Streams.Stream_IO;
with Ada.Strings.Fixed;
with Ada.Text_IO;              use Ada.Text_IO;
with Ada.Text_IO.Text_Streams; use Ada.Text_IO.Text_Streams;

procedure wc is

   Input_Stream : constant Text_Streams.Stream_Access :=
     Stream (Current_Input);
   EOL          : constant Stream_Element := Character'Pos (LF);
   Is_Separator : constant array (Stream_Element) of Boolean :=
     (0 .. 32 | 127 .. 159 => True, others => False);

   In_Word : Boolean := False;
   Buffer  : Stream_Element_Array (1 .. 4_096);
   N       : Stream_Element_Offset;

   Lines   : Natural := 0;
   Words   : Natural := 0;
   Total   : Natural := 0;

   procedure Begin_Word is
   begin
      Words := Words + 1;
      In_Word := True;
   end Begin_Word;

   procedure End_Word is
   begin
      In_Word := False;
   end End_Word;

   procedure End_Line is
   begin
      Lines := Lines + 1;
      End_Word;
   end End_Line;

   procedure Count_Words (S : in Stream_Element_Array) is
   begin
      Total := Total + S'Length;
      for I in S'Range loop
         if S (I) = EOL then
            End_Line;
         else
            if Is_Separator (S (I)) then
               if In_Word then
                  End_Word;
               end if;
            else
               if not In_Word then
                  Begin_Word;
               end if;
            end if;
         end if;
      end loop;
   end Count_Words;

   pragma Inline (Begin_Word, End_Word, End_Line, Count_Words);

begin
   loop
      Read (Root_Stream_Type'Class (Input_Stream.all), Buffer, N);
      Count_Words (Buffer (1 .. N));
      exit when N < Buffer'Length;
   end loop;

   declare
      Result : constant String :=
        Natural'Image (Lines) & Natural'Image (Words) & Natural'Image (Total);
   begin
      Ada.Text_IO.Put_Line (Result (Result'First + 1 .. Result'Last));
   end;
end wc;
