//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
open Ulong;

body '''
#include <limits.h>
#include <unistd.h>
#define BSIZE 4096
unsigned long wds[UCHAR_MAX + 1];
unsigned long nwds[UCHAR_MAX + 1];
char sp=' ';
char tab = '\\t';
char lf='\\n';
unsigned char buff[BSIZE];
''';

const UCHAR_MAX:int;
const BSIZE:int;
const sp:int;
const lf:int;
const tab:int;

proc setws: int * ulong = "wds[$1]=$2;";
proc setnws: int * ulong = "nwds[$1]=$2;";
fun getws: ulong -> ulong = "wds[$1]";
fun getnws: ulong -> ulong = "nwds[$1]";

fun readbuf: unit -> int = "read(0,buff,BSIZE)";

var prev_nws = 0x1_0000uL;
var w_cnt = 0uL;
var l_cnt = 0uL;
var b_cnt = 0uL;

type iterator = "unsigned char *";
fun eq: iterator * iterator -> bool = "$1 == $2";
fun deref: iterator -> ulong = "*$1";
fun add: iterator * ulong -> iterator = "$1 + $2";
proc post_incr: iterator = "$1++;";

fun band: ulong * ulong -> ulong = "$1 & $2";
fun hi: ulong -> ulong = "$1 >> 16";
fun lo: ulong -> ulong = "$1 & 0xFFFFuL";
fun parity : ulong -> ulong = "$1 & 1uL";
fun neg: ulong -> ulong = "-$1";

const buff: iterator = "buff";

fun iswhite(ch:int) =>
  ch == sp or ch == tab or ch == lf;

fun islf(ch:int)=> ch == lf;

fun ul(x:bool)=> C_hack::cast[ulong]x;

/* Fill tables */
{
  var ch = UCHAR_MAX; until ch < 0 do
    setws(ch, ul (iswhite ch) + band (0x10000uL,  -(ul (islf ch))));
    setnws(ch, ul (not (iswhite ch)) +  0x10000uL);
    --ch;
  done;
};

/* Main loop */
{
  var cnt: ulong;
  proc uread() {
    var n = readbuf();
    if n < 0 do System::exit 1; done;
    cnt = C_hack::cast[ulong]n;
  }

  uread;
  whilst cnt > 0uL do
    var vect_count = 0uL;
    var pp:iterator;
    pe := buff + cnt;

    b_cnt += cnt;
    pp = buff;

    until pp == pe do
      vect_count += band (getws(deref pp), prev_nws);
      prev_nws    = getnws(deref pp);
      pp++;
    done;
    w_cnt += lo vect_count;
    l_cnt += hi vect_count;
    uread;
  done;

  w_cnt += parity prev_nws;
};

print l_cnt; print " "; print w_cnt; print " "; print b_cnt; endl;

