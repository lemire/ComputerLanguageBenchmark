(* wc.sml
 *
 *   Word count. (Optimized for machine with few registers.)
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 *)
structure Test : sig
    val main : (string * string list) -> OS.Process.status
end = struct
    val max = 4096
    val buf = Word8Array.array (max, 0w0)
    val sub = Byte.byteToChar o Unsafe.Word8Array.sub
    fun x + y = Word.toIntX (Word.+ (Word.fromInt x, Word.fromInt y))

    val (c, l) = (ref 0, ref 0)

    fun newblock (w, ow) =
	let val n = Posix.IO.readArr (Posix.FileSys.stdin,
				      Word8ArraySlice.full buf)
	in if n = 0 then w else (c := (n + !c); scan (0, n, w, ow))
	end

    and scan (i, n, w, ow) =
	if i >= n then newblock (w, ow)
	else let val i' = i + 1
	     in case sub (buf, i) of
		    #"\n" => (l := (1 + !l); scan (i', n, w, 1))
		  | (#" " | #"\t" | #"\r") => scan (i', n, w, 1)
		  | _ => scan (i', n, w + ow, 0)
	     end

    fun main _ =
	let val w = newblock (0, 1)
	    open FormatComb
	in print (format (int o sp 1 o int o sp 1 o int o nl) (!l) w (!c));
	   OS.Process.success
	end
end
