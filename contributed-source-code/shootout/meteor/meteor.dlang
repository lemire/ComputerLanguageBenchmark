/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by - Michael Snoyman (D novice)
*/
import std.stdio;

enum { E, SE, SW, W, NW, NE }
const uint CellsPerRow = 5;
const uint RowsPerBoard = 10;
const uint CellsPerBoard = CellsPerRow * RowsPerBoard;
const uint PermutationCount = 12;
const uint CellsPerPiece = 5;

class result_t {
   ubyte[50] numbers;

   void write() {
      foreach(i, n; numbers) {
         if((i % 10) == 5) // beginning of odd row
            writef(" ");
         assert(n < 10);
         writef("%d ", n);
         if((i % 5) == 4) // end of row
            writefln("");
      }
   }

   /// fill the values from a solved board
   void fill(Board b)
   in {
      foreach(cell; b.cells)
         assert(!(cell.pieceCell is null));
   }
   out {
      int nums[10];
      foreach(n; numbers) {
         assert(n < 10);
         ++nums[n];
      }
      foreach(i, num; nums)
         assert(num == 5);
   }
   body {
      foreach(n, cell; b.cells)
         numbers[n] = cell.pieceCell.number;
   }

   int opCmp(Board rhs) {
      foreach(index, number; numbers) {
         int rnumber = rhs.cells[index].pieceCell.number;
         assert(number < 10 && rnumber < 10);
         if(number < rnumber)
            return -1;
         else if(number > rnumber)
            return 1;
      }
      return 0;
   }

   ubyte opIndex(size_t index)
   in {
      assert(index < 50);
   }
   out(result) {
      assert(result < 10);
   }
   body {
      return numbers[index];
   }

   ubyte opIndexAssign(ubyte n, size_t index)
   in {
      assert(index < 50);
      assert(n < 10);
   }
   body {
      return numbers[index] = n;
   }

   invariant {
      foreach(number; numbers)
         assert(number < 10);
   }
}

class PieceCell {
   PieceConfig pieceConfig;
   PieceCell[6] around;
   BoardCell place;
   int index; //FIXME

   this(PieceConfig p, int index) {
      pieceConfig = p;
      this.index = index;
   }
   bool placed() { return !(place is null); }
   void placed(bool b)
   in {
      assert(!b);
   }
   out {
      assert(b == placed);
   }
   body {
      if(!(place is null)) {
         place.pieceCell = null;
         place = null;
      }
   }

   int number() {
      return pieceConfig.piece.number;
   }

   void flip() {
      PieceCell tmp = around[NE];
      around[NE] = around[NW];
      around[NW] = tmp;

      tmp = around[SE];
      around[SE] = around[SW];
      around[SW] = tmp;

      tmp = around[E];
      around[E] = around[W];
      around[W] = tmp;
   }

   void rotate() {
      PieceCell tmp = around[0];
      for(int i = 0; i < 5; ++i)
         around[i] = around[i + 1];
      around[5] = tmp;
   }
}

class PieceConfig {
   PieceCell[CellsPerPiece] cells;
   Piece piece;
   int permIndex; /// which permuation this is
   
   this(Piece piece, int permIndex) {
      this.piece = piece;
      this.permIndex = permIndex;
      
      for(int i = 0; i < CellsPerPiece; ++i)
         cells[i] = new PieceCell(this, i);
      loadConfig(piece.number);
      if(permIndex >= PermutationCount/2)
         flip();
      for(int i = permIndex%(PermutationCount/2); i; --i)
         rotate();
   }

   bool placed()
   out(result) {
      foreach(cell; cells)
         assert(cell.placed == result);
   }
   body {
      return cells[0].placed;
   }

   void placed(bool b) {
      foreach(cell; cells)
         cell.placed = b;
   }

private:
   /// load the basic configuration for the given piece number
   void loadConfig(int number)
   in {
      assert(number < 10);
   }
   body {
      switch(number) {
      case 0:
         connect(0, E, 1);
         connect(1, E, 2);
         connect(2, E, 3);
         connect(3, SE, 4);
         break;
      case 1:
         connect(0, SE, 1);
         connect(1, SW, 2);
         connect(2, W, 3);
         connect(3, SW, 4);
         break;
      case 2:
         connect(0, W, 1);
         connect(1, W, 2);
         connect(2, SW, 3);
         connect(3, SE, 4);
         break;
      case 3:
         connect(0, E, 1);
         connect(1, E, 2);
         connect(1, SE, 3);
         connect(2, SW, 3);
         connect(3, SE, 4);
         break;
      case 4:
         connect(0, SE, 1);
         connect(1, SW, 2);
         connect(1, E, 3);
         connect(3, SE, 4);
         break;
      case 5:
         connect(0, W, 1);
         connect(0, SW, 2);
         connect(1, SE, 2);
         connect(1, SW, 3);
         connect(2, W, 3);
         connect(3, W, 4);
         break;
      case 6:
         connect(0, E, 1);
         connect(0, SE, 2);
         connect(1, SW, 2);
         connect(2, SW, 3);
         connect(3, SE, 4);
         break;
      case 7:
      /*
         connect(0, SW, 1);
         connect(1, W, 2);
         connect(2, W, 3);
         connect(2, NW, 4);
         connect(3, NE, 4);
      */
         connect(0, SW, 1);
         connect(0, SE, 2);
         connect(1, E, 2);
         connect(2, E, 3);
         connect(3, NE, 4);
         break;
      case 8:
         connect(0, SE, 1);
         connect(1, SE, 2);
         connect(2, E, 3);
         connect(3, SE, 4);
         break;
      case 9:
         connect(0, SE, 1);
         connect(1, SE, 2);
         connect(2, SE, 3);
         connect(2, SW, 4);
         connect(3, W, 4);
         break;
      default:
         assert(0);
      }
   }

   /// connect two cells along the specified border
   void connect(int cell1, int border, int cell2)
   in {
      assert(cell1 != cell2);
      assert(0 <= border && border < 6);
   }
   body {
      cells[cell1].around[border] = cells[cell2];
      switch(border) {
         case E: border = W; break;
         case W: border = E; break;
         case SE: border = NW; break;
         case NW: border = SE; break;
         case NE: border = SW; break;
         case SW: border = NE; break;
         default: assert(0);
      }
      cells[cell2].around[border] = cells[cell1];
   }

   void flip() {
      foreach(cell; cells)
         cell.flip;
   }

   void rotate() {
      foreach(cell; cells)
         cell.rotate;
   }
}

class Piece {
   PieceConfig[PermutationCount] configs;
   int number;

   this(int number)
   in {
      assert(number >= 0 && number < 10);
   }
   body {
      this.number = number;
      for(int i = 0; i < PermutationCount; ++i)
         configs[i] = new PieceConfig(this, i);
   }
}

class BoardCell {
   BoardCell[6] around;
   PieceCell pieceCell;

   uint place() { return place_; }
   void setPlace(uint place, BoardCell[CellsPerBoard] cells)
   in {
      assert(place < 50);
      foreach(cell; cells)
         assert(!(cell is null));
   }
   body {
      place_ = place;
      uint row = place / 5;
      assert(row < 10);
      bool firstCol = ((place%5) == 0);
      bool lastCol = ((place%5) == 4);

      if(row % 2 == 0) { // even row
         if(row) { // has northern around
            if(!firstCol)
               around[NW] = cells[place - 6];
            around[NE] = cells[place - 5];
         }
         // all even rows have southern neighbors
         if(!firstCol)
            around[SW] = cells[place + 4];
         around[SE] = cells[place + 5];
      }
      else { // odd row
         // all odd rows have northern neighbors
         around[NW] = cells[place - 5];
         if(!lastCol)
            around[NE] = cells[place - 4];
         if(row != 9) { // has southern neighbors
            around[SW] = cells[place + 5];
            if(!lastCol)
               around[SE] = cells[place + 6];
         }
      }

      // add around on this row
      if(!firstCol)
         around[W] = cells[place - 1];
      if(!lastCol)
         around[E] = cells[place + 1];
   }

   /// size of the island i'm in; 0 for checked cells and placed ones
   uint islandSize()
   out(result) {
      assert(result <= 50);
   }
   body {
      if(!(pieceCell is null) || checked)
         return 0;
      uint ret = 1;
      checked = true;
      foreach(cell; around)
         if(!(cell is null))
            ret += cell.islandSize;
      return ret;
   }

private:
   uint place_;
   bool checked;
}

class Board {
   BoardCell[CellsPerBoard] cells;

   this() {
      for(int i = 0; i < CellsPerBoard; ++i)
         cells[i] = new BoardCell();
      for(int i = 0; i < CellsPerBoard; ++i)
         cells[i].setPlace(i, cells);
      assert(cells[0].islandSize == 50);
      assert(cells[0].islandSize == 0);
   }

   /// attempt to put the given cell of the given config at the given place
   bool put(PieceConfig pc, uint cellIndex, uint place)
   in {
      assert(place < 50);
      assert(cellIndex < 5);
      assert(!pc.placed);
   }
   out(result) {
      assert(pc.placed == result);
   }
   body {
      if(put(pc.cells[cellIndex], cells[place]))
         return true;
      pc.placed = false; // also removes the piece from the board
      return false;
   }

   /// attempt to put a piececell in a boardcell
   bool put(PieceCell p, BoardCell b)
   in {
      assert(!p.placed);
   }
   out(result) {
      if(result) {
         assert(p.placed);
         foreach(cell; p.around)
            assert(cell is null || cell.placed);
      }
   }
   body {
      if(!(b.pieceCell is null))
         return false;
      b.pieceCell = p;
      p.place = b;

      for(int i = 0; i < 6; ++i) {
         PieceCell p2 = p.around[i];
         if(p2 is null || p2.placed)
            continue;
         BoardCell b2 = b.around[i];
         if(b2 is null)
            return false;

         if(!put(p2, b2))
            return false;
      }

      return true;
   }

   /// checks that a possible solutions exists; purely an optimization
   bool possible() {
      foreach(cell; cells)
         cell.checked = false;
      foreach(cell; cells) {
         if(cell.islandSize % 5)
            return false;
      }
      return true;
   }

   /*
   /// print out the board-- merely for debugging purposes
   void printBoard() {
      int[6] printOrder = [NW, NE, W, E, SW, SE];
      writefln("cell\tNW NE W  E  SW SE");
      foreach(place, cell; cells) {
         assert(cell.place == place);
         writef("%d\t", place);
         foreach(direction; printOrder) {
            BoardCell b = cell.around[direction];
            if(b is null)
               writef("--");
            else {
               if(b.place < 10)
                  writef("0");
               writef("%d", b.place);
            }
            writef(" ");
         }
         writefln("");
      }
      writefln("");
   }
   */
}

class Solver {
   result_t low, high;
   Piece[10] pieces;
   Board b;
   uint solutions;
   int placedCount;

   this() {
      low = new result_t;
      high = new result_t;
      for(int i = 0; i < 50; ++i)
         low[i] = 9;
      for(int i = 0; i < 10; ++i)
         pieces[i] = new Piece(i);
      b = new Board();
   }

   void solve() {
      if(placedCount == 10) {
         ++solutions;
         if(low > b)
            low.fill(b);
         if(high < b)
            high.fill(b);
         return;
      }
      ++placedCount;

      // get the next empty board cell
      int place;
      for(place = 0; !(b.cells[place].pieceCell is null); ++place) {
         assert(place < 50);
      }

      // try fitting each piece in that slot
      foreach(number, piece; pieces) {
         assert(piece.number == number);
         if(piecePlaced[number])
            continue;
         piecePlaced[number] = true;
         
         // try each configuration of the piece
         foreach(config; piece.configs) {
            assert(!config.placed);

            // try each cell within the config
            for(int cellIndex = 0; cellIndex < 5; ++cellIndex) {
               if(b.put(config, cellIndex, place)) {
                  if(b.possible)
                     solve();
                  config.placed = false;
               }
            }
            assert(!config.placed);
         }
         piecePlaced[number] = false;
      }
      --placedCount;
   }
private:
   bool piecePlaced[10];
}

void main() {
   Solver s = new Solver;
   s.solve();
   writefln("%d solutions found\n", s.solutions);
   s.low.write;
   writefln("");
   s.high.write;
   writefln("");
}
