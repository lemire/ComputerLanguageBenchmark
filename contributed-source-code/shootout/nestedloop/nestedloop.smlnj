(* nestedloop.sml
 *
 *   Nested loop benchmark.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 *)
structure Test : sig
    val main : (string * string list) -> OS.Process.status
end = struct
    fun x + y = Word.toIntX (Word.+ (Word.fromInt x, Word.fromInt y))
    fun x - y = Word.toIntX (Word.- (Word.fromInt x, Word.fromInt y))

    fun loops n =
	let fun lf (0, x) = x | lf (f, x) = lf (f - 1, x + 1)
	    fun le (0, x) = x | le (e, x) = le (e - 1, lf (n, x))
	    fun ld (0, x) = x | ld (d, x) = ld (d - 1, le (n, x))
	    fun lc (0, x) = x | lc (c, x) = lc (c - 1, ld (n, x))
	    fun lb (0, x) = x | lb (b, x) = lb (b - 1, lc (n, x))
	    fun la (0, x) = x | la (a, x) = la (a - 1, lb (n, x))
	in la (n, 0)
	end

    fun main' n = (print (Int.toString (loops n) ^ "\n"); OS.Process.success)
    fun main (_, []) = main' 1
      | main (_, arg :: _) = main' (getOpt (Int.fromString arg, 1))
end
