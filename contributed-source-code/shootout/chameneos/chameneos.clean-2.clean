/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Tim Hochberg, loosely based on Tobias Polzin's Python version
*/
module chameneos

import StdEnv, LanguageShootout

:: Color = Red | Blue | Yellow | Nil

:: GlobalState = {n :: !Int, 
				  waiter1 :: !Color,
				  waiter2 :: !Color}
				  
:: LocalState = {color :: !Color,
				 met :: !Int,
				 iswaiter1 :: !Bool}


Start world
	= toString (schedule (LS Blue) (LS Red) (LS Yellow) ((LS Blue), gs)) +++ "\n"
where 
	gs = {n=argi, waiter1=Nil, waiter2=Nil}
	LS c = {color=c, met=0, iswaiter1=False}


:: LS :== LocalState
// Trivial round-robin scheduler.
schedule :: !*LS !*LS !*LS (!*LS, !*GlobalState) -> Int
schedule {color=Nil, met=m0} {color=Nil, met=m1} {color=Nil, met=m2} ({color=Nil, met=m3}, _)
	= m0 + m1 + m2 + m3
schedule s0 s1 s2 (s3, gs) 
	= schedule s1 s2 s3 (creature s0 gs)


// A social creature
creature :: !*LocalState !*GlobalState -> (*LocalState, *GlobalState)
creature ls gs=:{waiter1=Nil, waiter2=Nil}
	= ({ls & iswaiter1=True}, {gs & waiter1=ls.color})
creature ls gs=:{waiter2=Nil}
	| gs.n <= 0	
		= ({ls & color=Nil}, gs)   
	| otherwise 
		= ({ls & color=c, met=inc ls.met}, 
		   {gs & waiter2=c, n=dec gs.n})
		  with c = (complement ls.color gs.waiter1)
creature ls gs
	| ls.iswaiter1	
		= ({ls & iswaiter1=False, color=gs.waiter2, met=inc ls.met},
		   {gs & waiter1=Nil, waiter2=Nil})
	| otherwise
		= (ls, gs)
			
allfaded :: [LocalState] -> Bool
allfaded [{color=Nil}:rest] = allfaded rest
allfaded []					= True
allfaded _					= False	


complement :: !Color !Color -> Color
complement Red Yellow    = Blue
complement Red Blue      = Yellow
complement Red Red       = Red
complement Yellow Blue   = Red
complement Yellow Red    = Blue
complement Yellow Yellow = Yellow
complement Blue Red      = Yellow
complement Blue Yellow   = Red
complement Blue Blue     = Blue
complement _	_		 = Nil
