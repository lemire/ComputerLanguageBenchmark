# The Computer Language Shootout Benchmarks
#   http://shootout.alioth.debian.org/
#
#   contributed by Charles Evans  2005/12/23
# 	based on C version by Kevin Carson
#   compilation:
#       icont BinaryTree.icn

link printf

record NewTreeNode(l,r,item)

procedure ItemCheck(tree)
if /tree.l then return tree.item
else return tree.item + ItemCheck(tree.l) - ItemCheck(tree.r)
end

procedure BottomUpTree(item,depth)
if depth > 0 then 
   return NewTreeNode(BottomUpTree(2 * item - 1, depth - 1),
	              BottomUpTree(2 * item, depth - 1),
          	      item)
else return NewTreeNode(,,item)
end

procedure main(argv) #{
 local N, depth, minDepth, maxDepth, stretchDepth
 local stretchTree, longLivedTree, tempTree, i, iterations, check
    argc:=*argv
    N := integer(argv[1])

    minDepth := 4;

    if ((minDepth + 2) > N) then 
        maxDepth := minDepth + 2
    else
        maxDepth := N;

    stretchDepth := maxDepth + 1;

    stretchTree := BottomUpTree(0, stretchDepth);
    printf("stretch tree of depth %d\t check: %d\n",
           stretchDepth,ItemCheck(stretchTree));

    stretchTree:=&null

    longLivedTree := BottomUpTree(0, maxDepth);

    every  (depth := minDepth to maxDepth by 2) do{

        iterations := 2^( maxDepth - depth + minDepth);
        check := 0;

        every (i := 1 to  iterations)do{
            tempTree := BottomUpTree(i, depth);
            check +:= ItemCheck(tempTree);
            tempTree := &null;

            tempTree := BottomUpTree(-i, depth);
            check +:= ItemCheck(tempTree);
            tempTree := &null;
        } #/* for(i := 1...) */

        printf("%d\t trees of depth %d\t check: %d\n",
               iterations * 2,depth,check);

    } #/* for(depth := minDepth...) */

    printf("long lived tree of depth %d\t check: %d\n",
           maxDepth,ItemCheck(longLivedTree));
#    write(&errout,&time) # p4-2g= 113sec, 104sec w $define
    return 0;

end # /*} main() */
