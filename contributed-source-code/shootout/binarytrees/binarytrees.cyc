/* The Computer Language Shootout Benchmarks
   http://shootout.alioth.debian.org/

   contributed by Kevin Carson, converted to Cyclone by
                  Brent Fulgham, using help from Greg Morrisett
		  and the Cyclone 'rewrite' utility.
*/

#include <math.h>
#include <stdio.h>
#include <stdlib.h>


typedef struct tn {
    struct tn?    left;
    struct tn?    right;
    long          item;
} treeNode;


treeNode@ NewTreeNode(treeNode* `H left, treeNode* `H right, long item)
{
    treeNode@ nw = (treeNode@)malloc(sizeof(treeNode));

    nw->left = left;
    nw->right = right;
    nw->item = item;

    return nw;
} /* NewTreeNode() */


long ItemCheck(treeNode@ tree)
{
    if (tree->left == NULL)
        return tree->item;
    else
        return tree->item + ItemCheck(tree->left) - ItemCheck(tree->right);
} /* ItemCheck() */


treeNode@ BottomUpTree(long item, unsigned depth)
{
    if (depth > 0)
        return NewTreeNode
        (
            BottomUpTree(2 * item - 1, depth - 1),
            BottomUpTree(2 * item, depth - 1),
            item
        );
    else
        return NewTreeNode(NULL, NULL, item);
} /* BottomUpTree() */


void DeleteTree(treeNode@ tree)
{
    if (tree->left != NULL)
    {
        DeleteTree(tree->left);
        DeleteTree(tree->right);
    }

    free(tree);
} /* DeleteTree() */


int main(int argc, char ??argv)
{
    unsigned   depth, maxDepth;
    treeNode   *stretchTree, *longLivedTree, *tempTree;

    unsigned N = atol(argv[1]);

    unsigned minDepth = 4;

    if ((minDepth + 2) > N)
        maxDepth = minDepth + 2;
    else
        maxDepth = N;

    unsigned stretchDepth = maxDepth + 1;

    stretchTree = BottomUpTree(0, stretchDepth);
    printf("stretch tree of depth %u\t check: %li\n",
           stretchDepth,
           ItemCheck(stretchTree));

    DeleteTree(stretchTree);

    longLivedTree = BottomUpTree(0, maxDepth);

    for (unsigned depth = minDepth; depth <= maxDepth; depth += 2)
    {
        long    i, check;

        long iterations = (long)pow(2, maxDepth - depth + minDepth);

        check = 0;

        for (i = 1; i <= iterations; i++)
        {
            tempTree = BottomUpTree(i, depth);
            check += ItemCheck(tempTree);
            DeleteTree(tempTree);

            tempTree = BottomUpTree(-i, depth);
            check += ItemCheck(tempTree);
            DeleteTree(tempTree);
        } /* for(i = 1...) */

        printf("%li\t trees of depth %u\t check: %li\n",
               iterations * 2,
               depth,
               check);
    } /* for(depth = minDepth...) */

    printf("long lived tree of depth %u\t check: %li\n",
           maxDepth,
           ItemCheck(longLivedTree));

    return 0;
} /* main() */
