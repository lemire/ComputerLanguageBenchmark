;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/
;;
;; Derived by Michael D. Adams from the MzScheme variant, which was
;; Derived from the Chicken variant by Sven Hartrumpf

(import (rnrs))

; TODO: ikarus doesn't do fast records yet so we implement them ourselves
;(define-record-type node (fields left val right) (sealed #t))
;(define-record-type leaf (fields val) (sealed #t))

(define (make-node left val right) `#(node ,left ,val ,right))
(define (node? n)
  (and (vector? n) (eq? 4 (vector-length n)) (eq? 'node (vector-ref n 0))))
(define (node-left n) (vector-ref n 1))
(define (node-val n) (vector-ref n 2))
(define (node-right n) (vector-ref n 3))
(define (make-leaf val) `#(leaf ,val))
(define (leaf? n)
  (and (vector? n) (eq? 2 (vector-length n)) (eq? 'leaf (vector-ref n 0))))
(define (leaf-val n) (vector-ref n 1))

(define (make item d)
  (if (= d 0)
      (make-leaf item)
      (let ((item2 (* item 2))
            (d2 (- d 1)))
        (make-node (make (- item2 1) d2) item (make item2 d2)))))

(define (check t)
  (if (leaf? t)
      (leaf-val t)
      (+ (node-val t) (- (check (node-left t)) (check (node-right t))))))

(define (main argv)
  (let* ((min-depth 4)
         (max-depth (max (+ min-depth 2) (string->number (cadr argv)))))
    (let ((stretch-depth (+ max-depth 1)))
      (display "stretch tree of depth ")
      (display stretch-depth)
      (display "\t check: ")
      (display (check (make 0 stretch-depth)))
      (display "\n"))
    (let ((long-lived-tree (make 0 max-depth)))
      (do ((d 4 (+ d 2))
           (c 0 0))
          ((> d max-depth))
        (let ((iterations
               (fxarithmetic-shift-left 1 (+ (- max-depth d) min-depth))))
          (do ((i 0 (+ i 1)))
              ((>= i iterations))
            (set! c (+ c (check (make i d)) (check (make (- i) d)))))
          (display (* 2 iterations))
          (display "\t trees of depth ")
          (display d)
          (display "\t check: ")
          (display c)
          (display "\n")))
      (display "long lived tree of depth ")
      (display max-depth)
      (display "\t check: ")
      (display (check long-lived-tree))
      (display "\n"))))

(main (command-line))
