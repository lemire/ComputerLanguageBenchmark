/* The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
   cribbed from Kannan Goundan's Scala #2 program
*/

class TreeNode {
   ?TreeNode left = null; 
   ?TreeNode right = null;
   int item; 
}

int check(?TreeNode tree) = 
   tree == null ? 0 : tree.item + check(tree.left) - check(tree.right);

?TreeNode makeTree(int i, int depth) = 
   depth == 0 
      ? new TreeNode(item: i)
      : new TreeNode(
         left: makeTree(2*i-1, depth-1),
         right: makeTree(2*i, depth-1), 
         item: i);


let int minDepth = 4;

void main(String[] args){
   let n = Integer.parseInt(args[0]);
   let maxDepth = Math.max(minDepth + 2, n);
   let stretchDepth = maxDepth + 1;

   print("stretch tree", stretchDepth, makeTree(0,stretchDepth).check);   

   let longLivedTree = makeTree(0,maxDepth);

   for (int depth=minDepth; depth<=maxDepth; depth+=2){
      let iterations = 1 << (maxDepth - depth + minDepth);

      var sum = 0;
      for (int i=1; i<=iterations; i++)
         sum += makeTree(i,depth).check + makeTree(-i,depth).check;

      print(iterations*2 + "\t trees", depth, sum);
   }

   print("long lived tree", maxDepth, longLivedTree.check);
}

void print(String name, int depth, int check) =
   println(name + " of depth " + depth + "\t check: " + check);
