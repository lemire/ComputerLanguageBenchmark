;;; -*- mode: lisp -*-
;;;
;;; http://shootout.alioth.debian.org/
;;;
;;; From: Manuel Giraud
;;; Nicer rewrite: Nicolas Neuss
;;; Modified by Juho Snellman 2005-10-26
;;;  * Change the node representation from a struct to an improper list
;;;    (saves 8 bytes for each node on SBCL/CMUCL)
;;;  * Use NIL for leaf nodes, as in the Haskell solution
;;;  * Add command-line parsing for non-CMUCL implementations

;;; Node is either NIL (for leaf nodes) or an improper list (DATA LEFT . RIGHT)
(defun build-btree (item depth)
  (declare (fixnum item depth))
  (if (zerop depth)
      nil
      (let ((item2 (* 2 item))
            (depth-1 (1- depth)))
        (declare (fixnum item2 depth-1))
        (cons item
              (cons (build-btree (the fixnum (1- item2)) depth-1)
                    (build-btree item2 depth-1))))))

(defun check-node (node)
  (declare (values fixnum))
  (if node
      (let ((data (car node))
            (kids (cdr node)))
        (declare (fixnum data))
        (- (+ data (check-node (car kids)))
           (check-node (cdr kids))))
      0))

(defun loop-depths (max-depth &key (min-depth 4))
  (loop for d from min-depth by 2 upto max-depth do
        (let ((iterations (ash 1 (+ max-depth min-depth (- d)))))
          (format t "~D~C trees of depth ~D~C check: ~D~%"
                  (* iterations 2) #\tab d #\tab
                  (loop for i from 1 upto iterations
                        sum (check-node (build-btree i d))
                        sum (check-node (build-btree (- i) d)))))))

(defun main (&optional (n (parse-integer
                           (or (car (last #+sbcl sb-ext:*posix-argv*
                                          #+cmu  extensions:*command-line-strings*
                                          #+gcl  si::*command-args*))
                               "1"))))
  (format t "stretch tree of depth ~D~C check: ~D~%" (1+ n) #\tab
          (check-node (build-btree 0 (1+ n))))
  (let ((*print-pretty* nil) (long-lived-tree (build-btree 0 n)))
    (loop-depths n)
    (format t "long lived tree of depth ~D~C check: ~D~%"
            n #\tab (check-node long-lived-tree))))

;;(main)

