/*
 * The Computer Language Benchmarks Game
 * http://shootout.alioth.debian.org/
 *
 * Original C contributed by Kevin Carson
 * Conversion to Objective-C by Selman Ulug
 * Modified by Sokolov Yura
 */

#include <objc/Object.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

@interface TreeNode : Object
{
  TreeNode *left;
  TreeNode *right;
  long      item;
}
- init : (id)pLeft : (id)pRight : (long)pItem;
- (long) itemCheck;
+ bottomUpTree : (long) tItem : (unsigned) tDepth;
- free;
@end

@implementation TreeNode
-init : (id)pLeft : (id)pRight : (long)pItem
{
  [super init];
  left = pLeft;
  right = pRight;
  item = pItem;
  return self;
}

- (long) itemCheck
{
  if (left == nil)
    return item;
  else
    return item + [left itemCheck] - [right itemCheck];
}

+ bottomUpTree : (long)tItem : (unsigned)tDepth
{
  if (tDepth > 0)
    {
      return [[TreeNode alloc] init
			       : [self bottomUpTree : 2 * tItem - 1 : tDepth - 1]
			       : [self bottomUpTree : 2 * tItem : tDepth - 1]
			       : tItem];
    }
  else
    {
      return [[TreeNode alloc] init : nil : nil : tItem];
    }
}

- free
{
  if (left != nil)
    {
      [left free];
      [right free];
    }
  return [super free];
}
@end

int
main (int argc, char** argv)
{
  unsigned   N, depth, minDepth, maxDepth, stretchDepth;
  id         stretchTree, longLivedTree, tempTree;

  if(argc>=2)
    N = atol(argv[1]);
  else
    N = 10;

  minDepth = 4;

  if ((minDepth + 2) > N)
    maxDepth = minDepth + 2;
  else
    maxDepth = N;

  stretchDepth = maxDepth + 1;

  stretchTree = [TreeNode bottomUpTree : 0 : stretchDepth];
  printf
    (
     "stretch tree of depth %u\t check: %li\n",
     stretchDepth,
     [stretchTree itemCheck]
     );

  [stretchTree free];

  longLivedTree = [TreeNode bottomUpTree : 0 : maxDepth];

  for (depth = minDepth; depth <= maxDepth; depth += 2)
    {
      long    i, iterations, check;

      iterations = 1 << (maxDepth - depth + minDepth);

      check = 0;

      for (i = 1; i <= iterations; i++)
        {
	  tempTree = [TreeNode bottomUpTree :i : depth];
	  check += [tempTree itemCheck];
	  [tempTree free];

	  tempTree = [TreeNode bottomUpTree : -i : depth];
	  check += [tempTree itemCheck];
	  [tempTree free];
        } /* for(i = 1...) */

      printf
        (
	 "%li\t trees of depth %u\t check: %li\n",
	 iterations * 2,
	 depth,
	 check
	 );
    } /* for(depth = minDepth...) */

  printf
    (
     "long lived tree of depth %u\t check: %li\n",
     maxDepth,
     [longLivedTree itemCheck]
     );

  return 0;
}
