\ binary-tree.gforth
\ http://shootout.alioth.debian.org/
\ contributed by Ian Osgood
\ modified by Bernd Paysan

4 constant min-depth

\ read NUM from last command line argument
0. argc @ 1- arg >number 2drop drop min-depth 2 + max constant NUM

struct{
  cell left
  cell right
  cell item
} node

: bottom-up-tree ( item depth -- tree )
  dup if
    over 2* 1- over 1- recurse  >r
    over 2*    swap 1- recurse  r>
  else 0 then ( item right left )
  sizeof node allocate throw
  tuck node left !  tuck node right !  tuck node item ! ;

: item-check ( tree -- n )
  dup node item @
  over node left @ if
    over node left @ recurse +  over node right @ recurse -
  then nip ;
  
: free-tree ( tree -- )
  dup node right @ if
    dup node right @ recurse  dup node left @ recurse
  then free throw ;

: .check ( check depth -- )
  ."  of depth " 1 u.r #tab emit ."  check: " 1 .r ;

: main
  0 NUM 1+ bottom-up-tree
  ." stretch tree" dup item-check NUM 1+ .check cr
  free-tree
  0 NUM bottom-up-tree
  NUM 1+ min-depth do
    1  NUM min-depth + i -  lshift  0 ( iterations check )
    over 1+ 1 do
      i        j bottom-up-tree dup item-check swap free-tree +
      i negate j bottom-up-tree dup item-check swap free-tree +
    loop
    swap 2* 1 u.r #tab emit ."  trees" i .check cr
  2 +loop
  ." long lived tree" dup item-check NUM .check cr
  free-tree ;

main bye  \ done!
