;;; The Computer Language Benchmarks Game
;;; http://shootout.alioth.debian.org/
;;; contributed by Fabien D.

(define (make-tree item depth)
   (if (= depth 0)
      (list item '() '())
      (let ((new-depth (- depth 1))
            (new-item (* item 2)))
         (list item (make-tree (- new-item 1) new-depth) (make-tree new-item new-depth)))))


(define (check-tree tree)
   (let ((item (car tree))
         (left (cadr tree))
         (right (caddr tree)))

      (if (null? left)
         item
         (+ item (- (check-tree left) (check-tree right))))))



(define (iterate depth min-depth max-depth)
   (let* ((iterations (expt 2 (- (+ max-depth min-depth) depth)))
               (check (do ((i 1 (+ i 1)) (check 0))
                          ((>= i (+ iterations 1)) check)
                          (set! check (+ check (check-tree (make-tree i depth)) (check-tree (make-tree (- i) depth)))))))

                          (begin
                              (display (* iterations 2))
                              (display "    trees of depth ")
                              (display depth)
                              (display "    check: ")
                              (display check)
                              (newline))))



(define (main user-depth)
   (let* ((min-depth 4)
          (max-depth (max (+ min-depth 2) user-depth))
          (stretch-depth (+ max-depth 1))
          (long-lived (make-tree 0 max-depth)))

      (begin
         (display "stretch tree of depth ")
         (display stretch-depth)
         (display "    check: ")
         (display (check-tree (make-tree 0 stretch-depth)))
         (newline)

         (do ((depth min-depth (+ depth 2)))
             ((>= depth stretch-depth))
             (iterate depth min-depth max-depth))

         (display "long lived tree of depth ")
         (display max-depth)
         (display "    check: ")
         (display (check-tree long-lived))
         (newline)
         (newline))))
             

(main (string->number (vector-ref argv 1)))
