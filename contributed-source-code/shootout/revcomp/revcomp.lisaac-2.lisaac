/* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Xavier Oswald
*/

Section Header
  
  + name := REVCOMP;
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Public
  
  - puts tab:NATIVE_ARRAY[CHARACTER] <- `puts(@tab)`;
  
  - buffer :STRING;
    
  - iub_pairs:STRING_CONSTANT := "ATCGBVDHKMRY";
  
  - iub_complement :NATIVE_ARRAY[CHARACTER] := NATIVE_ARRAY[CHARACTER].create 256; 
    
  - build_iub_complement <-
  ( 
    0.to 256 do { i:INTEGER;
      iub_complement.put (i.to_character) to i;   
    };
    
    (iub_pairs.lower).to (iub_pairs.upper) by 2 do { j:INTEGER;
      iub_complement.put(iub_pairs.item (j+1)) to (iub_pairs.item  j   .to_integer); 
      iub_complement.put(iub_pairs.item  j   ) to (iub_pairs.item (j+1).to_integer);
      iub_complement.put(iub_pairs.item (j+1)) to (iub_pairs.item  j   .to_lower.to_integer); 
      iub_complement.put(iub_pairs.item  j   ) to (iub_pairs.item (j+1).to_lower.to_integer);
    };    
  );

  - in_place_reverse <-
  ( + i,len:INTEGER;
    + c:CHARACTER;    
    + s:NATIVE_ARRAY[CHARACTER];
    
    i := 0;
    len := buffer.count - 1;
    s := buffer.storage;
    
    {i < len}.while_do {
      c := s.item i;
      s.put (iub_complement.item((s.item len).to_integer)) to i;
      s.put (iub_complement.item(c.to_integer)) to len;
      i := i + 1;
      len := len - 1;
    };
    
    (i = len).if {
      s.put(iub_complement.item((s.item i).to_integer)) to i;
    };
  );
  
  - process <-
  ( + c :CHARACTER;
    + s :NATIVE_ARRAY[CHARACTER];
    + len:INTEGER;
    
    in_place_reverse;
    
    s := buffer.storage;
    len := buffer.count;
        
    {len > 60}.while_do{
      c := s.item 60;
      s.put '\0' to 60;
      puts s;
      s.put c to 60;
      s := s + 60; 
      len := len - 60;
    };
    
    s.put '\0' to len;
    puts s;    
  );

  - main <-
  ( + mlen   :INTEGER;
    + line:STRING;
   
    buffer := STRING.create 16777216;
    mlen := 128;
    build_iub_complement;
              
    IO.read_line;
    line := IO.last_string;        
    {IO.end_of_input}.until_do {
      (! line.is_empty).if {
        (line.first = '>').if {
          (buffer.is_empty).if_false {
            process;
          };
          IO.put_string line;
          IO.put_new_line;
          buffer.clear;
        } else {
          buffer.append line;
        };
      };
      IO.read_line;
    };
  
    (! buffer.is_empty).if {
      process;
    };

  );
