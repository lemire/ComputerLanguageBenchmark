/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*/

import java.io.*;

void main(String[] args){

   byte[] IUBCodeComplements(){
      let code = "ABCDGHKMNRSTVWYabcdghkmnrstvwy".getBytes;
      let comp = "TVGHCDMKNYSABWRTVGHCDMKNYSABWR".getBytes;
      let byte[] a = new byte[ "z".getBytes[0] ];

      for (var i=0; i<code.length; i++) a[ code[i] ] = comp[i];
      return a;
   }

   let IUB = IUBCodeComplements();


   void complementReverseWrite(String desc, Stack<byte[]> lines, 
         BufferedOutputStream w){

      void inplaceComplementReverse(byte[] b){
         var i = 0;
         var j = b.length - 1;
         while (i < j){
            let swap = b[i];
            b[i] = IUB[ b[j] ];
            b[j] = IUB[ swap ];
            i = i + 1;
            j = j - 1;
         }
         if (i == j) b[i] = IUB[ b[i] ];
      }

      let nl = "\n".getBytes[0];
      w.write(desc.getBytes); w.write(nl);

      let n = 60; 
      var k = 0;
      if (!lines.empty) k = lines.peek.length;
      let isSplitLine = k < n;
      var isFirstLine = true;

      while (!lines.empty) {
        let line = lines.pop;
        inplaceComplementReverse(line);

        if (isSplitLine){
           if (isFirstLine){ w.write(line); isFirstLine = false; }
           else { w.write(line,0,n-k); w.write(nl); w.write(line,n-k,k); }
        }
        else { w.write(line); w.write(nl); }
      }
      if (isSplitLine && !isFirstLine) w.write(nl);
   }



   let r = new BufferedReader(new InputStreamReader(System.in));
   let w = new BufferedOutputStream(System.out);

   var lines = new Stack();
   var desc = "";

   var ?String line;
   while ((line = r.readLine()) != null) {
      let c = line[0];
      if (c == '>'){
         if (desc.length > 0){
            complementReverseWrite(desc, lines, w);
            lines = new Stack();
         }
         desc = line;
      } else {
         if (c != ';') lines.push(line.getBytes);
      }
      }
   r.close;

   if (desc.length > 0) complementReverseWrite(desc, lines, w);
   w.close;
}
