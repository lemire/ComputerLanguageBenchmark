/** 
 * The Computer Language Benchmarks Game 
 * Based on the CAL Open Quark version
 * Contributed by Magnus Byne.
 */
module Revcomp;

import Cal.Core.Prelude using
    typeConstructor = Boolean, Byte, Char, Int, JObject, String;
    function = eager, seq, toByte;
    ;
import Cal.Core.Char using
    function = toInt, toLowerCase;
    ;
import Cal.Core.String using
    function = subscript;
    ;
import Cal.Collections.List using
    function = foldLeftStrict;
    ;
import Cal.IO.Console using
    function = printLine;
    ;


data foreign unsafe import jvm "java.io.BufferedReader" private JBufferedReader;

data foreign unsafe import jvm "java.io.InputStream" private JInputStream;

data foreign unsafe import jvm "java.io.InputStreamReader"
    private JInputStreamReader;

data foreign unsafe import jvm "java.io.Reader" private JReader;

data foreign unsafe import jvm "java.io.FileReader" private JFileReader;

data foreign unsafe import jvm "java.io.PrintStream" private JPrintStream;

foreign unsafe import jvm "constructor"
    private createBufferedReader :: JReader -> JBufferedReader;

foreign unsafe import jvm "constructor"
    private createInputStreamReaderStream :: JInputStream -> JInputStreamReader;

foreign unsafe import jvm "method readLine"
    private readLine :: JBufferedReader -> String;

foreign unsafe import jvm "static field java.lang.System.out"
    private stdout :: JPrintStream;

foreign unsafe import jvm "static field java.lang.System.in"
    private stdin :: JInputStream;

foreign unsafe import jvm "isNull" private isNull :: String -> Boolean;

foreign unsafe import jvm "method write"
    private write :: JPrintStream -> JByteArray -> Int -> Int -> ();

data foreign unsafe import jvm "byte[]" JByteArray;

//Import Java byte arrays
foreign unsafe import jvm "newArray" byteArray_new :: Int -> JByteArray;

foreign unsafe import jvm "subscriptArray"
    byteArray_subscript :: JByteArray -> Int -> Byte;

foreign unsafe import jvm "lengthArray" byteArray_length :: JByteArray -> Int;

foreign unsafe import jvm "updateArray"
    byteArray_update :: JByteArray -> Int -> Byte -> Byte;

foreign unsafe import jvm "cast"
    jInputStreamReaderToJReader :: JInputStreamReader -> JReader;

foreign unsafe import jvm "cast" cast :: JByteArray -> JObject;

data Chunk =
    Chunk
        dataChunk :: !JByteArray
        length :: !Int
    ;

charToByte :: Char -> Byte;
charToByte !c = toByte (Char.toInt c);

initCharMap :: JByteArray -> ();
initCharMap !charMap =
    let
        loop :: Int -> ();
        loop !i =
            if i < 128 then
                byteArray_update charMap i (toByte i)
                `seq`
                ()
            else
                ()
            ;

        mappings :: [(Char, Char)];
        mappings =
            [
                ('A', 'T'),
                ('C', 'G'),
                ('G', 'C'),
                ('T', 'A'),
                ('U', 'A'),
                ('M', 'K'),
                ('R', 'Y'),
                ('W', 'W'),
                ('S', 'S'),
                ('Y', 'R'),
                ('K', 'M'),
                ('V', 'B'),
                ('H', 'D'),
                ('D', 'H'),
                ('B', 'V'),
                ('N', 'N')
            ]
            ;
    in
        loop 0
        `seq`
        foldLeftStrict
            (
                \!a !mapping ->
                    byteArray_update
                        charMap
                        (Char.toInt mapping.#1)
                        (charToByte mapping.#2)
                    `seq`
                    byteArray_update
                        charMap
                        (Char.toInt (toLowerCase mapping.#1))
                        (charToByte mapping.#2)
                    `seq`
                    a
            )
            ()
            mappings
    ;

//this includes the CR
outputLineLength :: Int;
outputLineLength = 61;

printChunks :: [Chunk] -> ();
printChunks chunks =
    let
        outputBuffer :: JByteArray;
        outputBuffer =
            eager $ byteArray_new (chunkSize * List.length chunks * 61 / 60)
            ;

        eol :: Byte;
        eol = eager $ toByte (eager $ Char.toInt '\n');

        appendChunk :: JByteArray -> Int -> Int -> Int -> Int;
        appendChunk !chunk !i !charsOnLine !ptr =
            if i >= 0 then
                byteArray_update
                    outputBuffer
                    ptr
                    (byteArray_subscript chunk i)
                `seq`
                (
                    if (ptr + 2) % outputLineLength == 0 then
                        byteArray_update outputBuffer (ptr + 1) eol
                        `seq`
                        appendChunk chunk (i - 1) 0 (ptr + 2)
                    else
                        appendChunk
                            chunk
                            (i - 1)
                            (charsOnLine + 1)
                            (ptr + 1)
                )
            else
                ptr
            ;

        appendChunks :: [Chunk] -> Int -> Int;
        appendChunks !chunks !ptr =
            case chunks of
            [] ->
                if ptr % outputLineLength != 0 then
                    byteArray_update outputBuffer ptr eol 
                    `seq` 
                    ptr + 1
                else
                    ptr
                ;
            first : rest ->
                case first of
                Chunk buffer bytes ->
                    appendChunks
                        rest
                        (appendChunk buffer (bytes - 1) (0 :: Int) ptr)
                    ;
                ;
            ;
    in
        write stdout outputBuffer 0 (appendChunks chunks 0)
    ;

appendToChunk :: JByteArray -> String -> JByteArray -> Int -> ();
appendToChunk !charMap !line !buffer !offset =
    let
        helper :: Int -> Int -> ();
        helper !i !end =
            if i < end then
                byteArray_update
                    buffer
                    (offset + i)
                    (byteArray_subscript
                        charMap
                        (toInt (String.subscript line i))
                    )
                `seq`
                helper (i + 1) end
            else
                ()
            ;
    in
        helper 0 (String.length line)
    ;

chunkSize :: Int;
chunkSize = 10240;

main :: [String] -> ();
public main !args =
    let
        charMap :: JByteArray;
        charMap = eager $ byteArray_new 128;

        reader :: JBufferedReader;
        reader =
            eager
            $ createBufferedReader
                (jInputStreamReaderToJReader
                    (createInputStreamReaderStream stdin)
                )
            ;

        readLines :: JBufferedReader -> [Chunk] -> JByteArray -> Int -> ();
        readLines !reader !chunks !buffer !bytesInBuffer =
            let
                line :: String;
                line = eager $ readLine reader;
            in

                if isNull line then
                    printChunks (Chunk buffer bytesInBuffer : chunks)
                else if subscript line 0 == '>' then
                    printChunks (Chunk buffer bytesInBuffer : chunks)
                    `seq`
                    printLine line
                    `seq`
                    readLines reader [] (byteArray_new chunkSize) 0
                else if bytesInBuffer + String.length line < chunkSize then
                    appendToChunk charMap line buffer bytesInBuffer
                    `seq`
                    readLines
                        reader
                        chunks
                        buffer
                        (bytesInBuffer + String.length line)
                else
                    let
                        newBuffer :: JByteArray;
                        newBuffer = eager $ byteArray_new chunkSize;

                        len :: Int;
                        len = eager $ String.length line;
                    in
                        appendToChunk charMap line newBuffer 0
                        `seq`
                        readLines
                            reader
                            (Chunk buffer bytesInBuffer : chunks)
                            newBuffer
                            len
            ;
    in

        initCharMap charMap
        `seq`
        readLines reader [] (byteArray_new chunkSize) 0
    ;

