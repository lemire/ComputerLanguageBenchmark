;;; -*- mode: scheme -*-
;;; $Id$
;;; http://www.bagley.org/~doug/shootout/

(module hash
	(option (set! *genericity* #f))
	(main main))

(define (main args)
  (let* ((n (or (and (= (length args) 2) (string->number (cadr args))) 1))
	 (max (do ((max 1 (* max 2))) ((> max 10000) max)))
	 (x (make-hash-table max
			     (lambda (o) (string->0..2^x-1 o 14))
			     (lambda (c) (car c))
			     string=?
			     max))
	 (y (make-hash-table max
			     (lambda (o) (string->0..2^x-1 o 14))
			     (lambda (c) (car c))
			     string=?
			     max)))
    (do ((i 0 (+ i 1)))
	((= i 10000))
      (put-hash! (cons (string-append "foo_" (number->string i 10)) i) x))
    (do ((i 0 (+ i 1)))
	((= i n))
      (for-each-hash (lambda (cell)
		       (let* ((x-key (car cell))
			      (x-val (cdr cell))
			      (old-y-cell (get-hash x-key y))
			      (old-y-val (cond (old-y-cell
						(rem-key-hash! x-key y)
						(cdr old-y-cell))
					       (else
						0))))
			 (put-hash! (cons x-key (+ x-val old-y-val)) y)))
		     x))
    (print (cdr (get-hash "foo_1" x)) " "
	   (cdr (get-hash "foo_9999" x)) " "
	   (cdr (get-hash "foo_1" y)) " "
	   (cdr (get-hash "foo_9999" y)))))
