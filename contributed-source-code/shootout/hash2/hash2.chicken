;; ---------------------------------------------------------------------
;; The Great Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Based on existing Shootout submission [Scheme Guile]. However hashing
;; tasks performed using only SRFI-69-compliant facilities. Use of
;; default hash function and predicate provides significantly better
;; performance than explicitly passing native implementations; thus, do
;; this:
;;
;;    ... (ht (make-hash-table)) ...
;;
;; not this:
;;
;;    ... (ht (make-hash-table string-ci=? string-ci-hash)) ...
;;
;; Contributed by Anthony Borla
;; ---------------------------------------------------------------------

(declare (fixnum) (disable-interrupts) (unsafe) (block) (lambda-lift))

; -------------------------------

(define-constant +hash-tbl-size+ 10000)

; --------------

(define (main args)
  (let ((n (if (null? args)
               1
               (string->number (car args))))

    (ht1 (make-hash-table))
    (ht2 (make-hash-table)))

    (do ((i 1 (+ i 1)))
        ((< +hash-tbl-size+ i))
      (hash-table-set! ht1 (string-append "foo_" (number->string i)) i))

    (do ((i 1 (+ i 1)))
        ((< n i))
      (hash-table-walk ht1 (lambda (key value) (hash-table-set! ht2 key (+ value (hash-table-ref/default ht2 key 0))))))

    (let ((ht1-k1 (hash-table-ref ht1 "foo_1"))
      (ht1-k9999 (hash-table-ref ht1 "foo_9999"))
      (ht2-k1 (hash-table-ref ht2 "foo_1"))
      (ht2-k9999 (hash-table-ref ht2 "foo_9999")))

      (print ht1-k1 " " ht1-k9999 " " ht2-k1 " " ht2-k9999))))

; -------------------------------

(main (command-line-arguments))

