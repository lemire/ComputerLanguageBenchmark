/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*/

import java.math.*;

void main(String[] args){
   let L = 10;
   var n = Integer.parseInt(args[0]);    

   var j = 0;
   let digits = new PiDigitSpigot();

   while (n > 0){
      if (n >= L){
         for (int i=0; i<L; i++) print( digits.next() );
         j += L;
      } else {
         for (int i=0; i<n; i++) print( digits.next() );
         for (int i=n; i<L; i++) print(" ");
         j += n;
      }
      print("\t:"); println(j);
      n -= L;
   }
}


class PiDigitSpigot {
   Transformation z = new Transformation().qrst(1,0,0,1);
   Transformation x = new Transformation();
   Transformation inverse = new Transformation();

   int next(){
      let y = this.digit();
      if (this.isSafe(y)){
         z = this.produce(y); return y;
      } else {
         z = this.consume( x.next() ); return this.next();
      }
   }

   int digit() = z.extract(3);
   boolean isSafe(int digit) = digit == z.extract(4);
   Transformation produce(int i) = ( inverse.qrst(10,-10*i,0,1) ).compose(z);
   Transformation consume(Transformation a) = z.compose(a);
}



class Transformation {
   BigInteger q = BigInteger.valueOf(0);
   BigInteger r = BigInteger.valueOf(0);
   BigInteger s = BigInteger.valueOf(0);
   BigInteger t = BigInteger.valueOf(0);
   int k = 0;

   Transformation next(){
      k++;
      q = BigInteger.valueOf(k);
      r = BigInteger.valueOf(4 * k + 2);
      s = BigInteger.valueOf(0);
      t = BigInteger.valueOf(2 * k + 1);
      return this;
   }

   int extract(int j){
      let bigj = BigInteger.valueOf(j);
      return (((q * bigj) + r) / ((s * bigj) + t)).intValue;
   }

   Transformation qrst(int q, int r, int s, int t){
      this.q = BigInteger.valueOf(q);
      this.r = BigInteger.valueOf(r);
      this.s = BigInteger.valueOf(s);
      this.t = BigInteger.valueOf(t);
      k = 0;
      return this;
   }

   Transformation compose(Transformation a) = 
      new Transformation(
         q:  q * a.q,
         r: (q * a.r) + (r * a.t),
         s: (s * a.q) + (t * a.s),
         t: (s * a.r) + (t * a.t)
      );
}
