; The Computer Language Shootout
; http://shootout.alioth.debian.org/
; pidigits: bigloo version
; Sven Hartrumpf 2005-04-26
; Implements 'Spigot' algorithm origionally due to Stanly Rabinowitz.
; Program is based on an implementation for SCM by Aubrey Jaffer and
; Jerry D. Hedden.

(module pidigits (main main))

(define (pi n d)
  (let* (;(r (inexact->exact (floor (exp (* d (log 10)))))) ; 10^d
         (r (do ((s 1 (* 10 s)) (i d (- i 1))) ((zero? i) s))) ; bigloo: this line is faster
         (p (+ (quotient n d) 1))
         (m (quotient (* p d 3322) 1000))
         (a (make-vector (+ m 1) 2))
         (digits 0))
    (vector-set! a m 4)
    (do ((j 1 (+ j 1))
         (q 0 0)
         (b 2 (remainder q r)))
      ((> j p))
      (do ((k m (- k 1)))
        ((zero? k))
        (set! q (+ q (* (vector-ref a k) r)))
        (let ((t (+ (* k 2) 1)))
             ;((t (+ (bit-lsh k 1) 1))) ; bigloo: this line is equally fast
          (vector-set! a k (remainder q t)) ; quotient/remainder like in mzscheme would speedup this and the the next line
          (set! q (* k (quotient q t)))))
      (let* ((s (number->string (+ b (quotient q r))))
             (l (string-length s)))
        (cond ((> j 1)
               (do ((l l (+ l 1)))
                 ((>= l d))
                 (cond ((< digits n)
                        (write-char #\0)
                        (set! digits (+ digits 1))
                        (cond ((zero? (modulo digits 10))
                               (write-char #\tab) (display ":") (write digits) (newline))))))))
        (do ((i 0 (+ i 1)))
          ((= i l))
          (cond ((< digits n)
                 (write-char (string-ref s i))
                 (set! digits (+ digits 1))
                 (cond ((zero? (modulo digits 10))
                        (write-char #\tab) (display ":") (write digits) (newline))))))))))

; bigloo: d maximally 5 (or 4?, otherwise overflow? causing incorrect results), d minimally (still with correct results) 3

(define (main args)
  (pi (string->number (cadr args)) 5))
  ;(do ((i (string->number (cadr args)) (+ i 10)) (n 100 (- n 1))) ((<= n 0)) (pi i 5)) ; for getting measurable runtime
