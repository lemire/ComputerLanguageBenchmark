(* spigot.sml
 *
 *   Generating digits of PI using unbounded spigot algorithm.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 *)
structure Test:sig val main:string*string list->OS.Process.status end = struct

    type lft = IntInf.int * IntInf.int * IntInf.int * IntInf.int

    fun gcd(n:IntInf.int,m)=
	let val (n, m) = (abs n, abs m)
	    fun g(n,0)=n | g(n,m)=g(m,n mod m)
	in if n<m then g(m,n) else g(n,m) end

    fun can(q,r,s,t)=
	let val f=gcd(q,gcd(r,gcd(s,t))) in (q div f, r div f, s div f, t div f) end

    fun stream (out, nx, sf, pr, cn, mk) =
	let fun l (z, k: IntInf.int) =
		let val z = if k mod 20 = 0 then can z else z
		    val y = nx z
		in if sf(z,y) then (out y; l(pr(z,y),k)) else l(cn(z,mk k),k+1)
		end
	in l end

    fun extr ((q,r,s,t): lft, x) = (q*x+r)div(s*x+t)
    fun comp ((q,r,s,t): lft, (u,v,w,x)) = (q*u+r*w,q*v+r*x,s*u+t*w,s*v+t*x)

    fun pi N =
	let val n = ref 0
	    fun nl (k, 0) = print ("\t:" ^ Int.toString k ^ "\n")
	      | nl (k, m) = (print " "; nl (k, m - 1))
	    fun out d =
		let val i = !n + 1 val m = i mod 10
		in print (IntInf.toString d); n := i;
		   if m = 0 then nl (i, 0) else ();
		   if i >= N then
		       (if m = 0 then () else nl (i, 10-m);
			OS.Process.exit OS.Process.success)
		   else ()
		end
	in stream (out,	fn z => extr (z, 3),
		        fn (z, n) => extr (z, 4) = n,
		        fn (z, n) => comp ((10, ~10*n, 0, 1), z),
		        comp,
		        fn k => let val k' = 2*k+1 in (k, 2*k', 0, k') end)
		  ((1, 0, 0, 1), 1)
	end

    fun main (_, []) = pi 1
      | main (_, arg::_) = pi (getOpt (Int.fromString arg, 1))
end
