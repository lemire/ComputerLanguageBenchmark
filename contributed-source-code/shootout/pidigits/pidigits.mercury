% The Computer Language Benchmarks Game
% http://shootout.alioth.debian.org/
%
% Based on work by Anthony Borla (SWI-Prolog), 
%   Christophe Troestler, Matthias Giovannini, and David Teller (OCaml),
%   Mike Pall and Stefan Krause (Java)
% contributed by Glendon Holst

:- module pidigits.
:- interface.
:- import_module io.

:- pred main(io::di, io::uo) is det.

% ----------------------------------------------------------------------

:- implementation.

:- import_module list.
:- import_module int.
:- import_module integer.
:- import_module bool.
:- import_module string.
:- import_module char.
:- import_module exception.

% ----------------------------------------------------------------------

main(!IO) :-
	io.command_line_arguments(Args, !IO),
	(
		if
			Args = [AString|_],
			string.to_int(string.strip(AString), Aint)
		then
			N = Aint
		else
			N is 2500
	),
	pidigits(N, !IO).


% ----------------------------------------------------------------------
:- type integer_digits ---> integer_digits(	q :: integer, 
											r :: integer, 
											s :: integer, 
											t :: integer).

% ------------------------------- %

:- pred pidigits(int::in, io::di, io::uo) is det.


pidigits(N, !IO) :- 
	PIDigits = integer_digits(one, zero, zero, one),
	pidigits_(1, N, zero, PIDigits, !IO),
	(
		N mod 10 \= 0 ->
		io.format("%s\t:%i\n",
			[s(string.pad_right("", ' ', (10 - (N mod 10)))), i(N)], 
			!IO)
	;
		true
	).

% ------------- %

:- pred pidigits_(int, int, integer, integer_digits, io, io) is det.
:- mode pidigits_(in, in, in, in, di, uo) is det.

pidigits_(I, N, K, IntDigits0, !IO) :-
(
	I =< N ->
    DigitNext = extract(integer(3), IntDigits0), 
    DigitSafe = extract(integer(4), IntDigits0),
	
    (
		DigitNext \= DigitSafe ->
		K1 = K + one,
		consume(K1, IntDigits0, IntDigits1),
		pidigits_(I, N, K1, IntDigits1, !IO)
	;
		io.write_int(integer.int(DigitNext), !IO),
		(
			I mod 10 = 0 ->
			io.format("\t:%i\n",[i(I)], !IO)
		;
			true
		),
		produce(DigitNext, IntDigits0, IntDigits1),
		pidigits_(I + 1, N, K, IntDigits1, !IO)
	)
;
	true
).

% ------------- %


:- func extract(integer, integer_digits) = integer.

extract(X, IntDigits) = ((IntDigits^q * X) + IntDigits^r) // 
	((IntDigits^s * X) + IntDigits^t).

% ------------- %

:- pred produce(integer::in, integer_digits::in, integer_digits::out) is det.

produce(Digit, IntDigits0, IntDigits) :-
	IntDigits1 = (IntDigits0^r := (IntDigits0^r * integer(10)) + 
		(IntDigits0^t * integer(-10) * Digit)),
	IntDigits = (IntDigits1^q := IntDigits1^q * integer(10)).
	
% ------------- %

:- pred consume(integer::in, integer_digits::in, integer_digits::out) is det.

consume(K, IntDigits0, IntDigits) :-
	Den = integer(2) * K + one,
	Den2 = integer(2) * Den,
	IntDigits1 = (IntDigits0^r := (IntDigits0^r * Den) + (IntDigits0^q * Den2)),
	IntDigits2 = (IntDigits1^t := (IntDigits1^t * Den) + (IntDigits1^s * Den2)),
	IntDigits3 = (IntDigits2^s := IntDigits2^s * K),
	IntDigits = (IntDigits3^q := IntDigits3^q * K).
	
% ------------------------------- %
