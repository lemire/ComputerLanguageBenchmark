/** 
 * The Computer Language Benchmarks Game 
 * Based on the CAL Open Quark version
 * Contributed by Magnus Byne.
 */
module Pidigits;

import Cal.Core.Prelude using
    typeConstructor = Int, Integer, String;
    function = eager, fromInteger, seq, stringToInt;
    ;

import Cal.Core.Debug using
    function = show;
    ;

import Cal.Collections.List using
    function = head;
    ;

import Cal.Core.String using
    function = replicate;
    ;

import Cal.IO.Console using
    function = print;
    ;

data F =
    F
        w :: !Integer
        x :: !Integer
        y :: !Integer
        z :: !Integer
    ;

lfts :: Integer -> [F];
lfts !k = F k (4 * k + 2) 0 (2 * k + 1) : lfts (k + 1);

floor :: Integer -> F -> Integer;
floor !x !m =
    case m of
    F q r s t -> (q * x + r) / (s * x + t);
    ;

complement1 :: F -> F -> F;
complement1 !m !n =
    case m of
    F q r s t ->
        case n of
        F u v w x ->
            F (q * u + r * w) (q * v + r * x) (t * w) (t * x);
        ;
    ;

complement2 :: F -> F -> F;
complement2 !m !n =
    case m of
    F q r s t ->
        case n of
        F u v w x ->
            F (q * u) (q * v + r * x) (s * u) (s * v + t * x);
        ;
    ;

main :: [String] -> ();
public main !args =
    let
        pidigits :: [Int];
        pidigits =
            let
                stream :: F -> [F] -> [Int];
                stream !z !l =
                    let
                        y :: Integer;
                        y = eager $ floor 3 z;
                    in
                        case l of
                        x : xs ->
                            if y == floor 4 z then
                                fromInteger y
                                : stream
                                    (complement1 (F 10 (-10 * y) 0 1) z)
                                    (x : xs)
                            else
                                stream (complement2 z x) xs
                            ;
                    ;
            in
                stream (F 1 0 0 1) (lfts 1)
            ;

        n :: Int;
        n = eager $ stringToInt (head args);

        lineLength :: Int;
        lineLength = 10;

        //print digits in accordance with the benchmark spec
        printDigits :: [Int] -> Int -> Int -> ();
        printDigits !digits !digitsPrinted !digitsPrintedOnLine =
            if digitsPrinted == n then
                print
                    (
                        replicate (lineLength - digitsPrintedOnLine) ' '
                        ++ "\t:"
                        ++ show digitsPrinted
                        ++ "\n"
                    )
            else if digitsPrintedOnLine == lineLength then
                print ("\t:" ++ show digitsPrinted ++ "\n")
                `seq`
                printDigits digits digitsPrinted 0
            else
                case digits of
                digit : remainingDigits ->
                    print (show digit)
                    `seq`
                    printDigits
                        remainingDigits
                        (digitsPrinted + 1)
                        (digitsPrintedOnLine + 1)
                    ;
            ;
    in
        printDigits pidigits 0 0
    ;

