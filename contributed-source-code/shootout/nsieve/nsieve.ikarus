;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/

;; Derived by Michael D. Adams from the MzScheme varient

(import (rnrs))

(define (nsieve m)
  (let ((a (make-bytevector m 1)))
    (let loop ((i 2) (n 0))
      (if (< i m)
          (begin
            (if (eq? 1 (bytevector-u8-ref a i))
                (begin
                  (let clear ((j (+ i i)))
                    (if (< j m)
                        (begin
                          (bytevector-u8-set! a j 0)
                          (clear (+ j i)))))
                  (loop (+ 1 i) (+ 1 n)))
                (loop (+ 1 i) n)))
          n))))

(define (string-pad str len)
  (string-append (make-string (- len (string-length str)) #\space) str))

(define (test n)
  (let* ((m (* (expt 2 n) 10000))
         (count (nsieve m)))
    (display "Primes up to ") (display (string-pad (number->string m) 8))
    (display " ") (display (string-pad (number->string count) 8))
    (newline)))

(define (main args)
  (if (< (length args) 2)
      (begin
        (display "An argument is required") (newline) 2)
      (let ((n (string->number (cadr args))))
        (if (not n)
            (begin
              (display "An integer is required") (newline) 2)
            (begin
              (if (>= n 0) (test n))
              (if (>= n 1) (test (- n 1)))
              (if (>= n 2) (test (- n 2)))
              0)))))

(main (command-line))
