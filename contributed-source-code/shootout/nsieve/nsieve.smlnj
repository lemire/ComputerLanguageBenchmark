(* nsieve.sml
 *
 *   Good old Sieve of Eratosthenes. (Based on the OCaml version.)
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 *)
structure Test:sig val main:string*string list->OS.Process.status end = struct

    infix 8 $  val op $ = Unsafe.Word8Array.sub
    infix 3 <- fun (a,i)<-x = Unsafe.Word8Array.update(a,i,x)
    infix 4 << fun i << j = Word.toIntX(Word.<<(Word.fromInt i,Word.fromInt j))

    fun sieve n =
	let val a = Word8Array.array (n+1, 0w1)
	    fun s (i,c) = let fun k j = if j<=n then ((a,j)<-0w0;k(j+i)) else ()
			  in if i>n then c else if a$i=0w0 then s(i+1,c)
					   else (k(i+i); s(i+1,c+1))
			  end
	    open FormatComb  fun i x = pad left 8 int x
	in print (format (text "Primes up to " o i o sp 1 o i o nl) n (s (2,0)))
	end

    fun main' n = (sieve ((1<<n) * 10000);
		   if n>=1 then sieve ((1<<(n-1)) * 10000) else ();
		   if n>=2 then sieve ((1<<(n-2)) * 10000) else ();
		   OS.Process.success)

    fun main (_, []) = main' 1
      | main (_, arg :: _) = main' (getOpt (Int.fromString arg, 1))
end
