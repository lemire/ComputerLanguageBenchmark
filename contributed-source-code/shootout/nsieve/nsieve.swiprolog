% ----------------------------------------------------------------------
% The Computer Language Shootout                              
% http://shootout.alioth.debian.org/                                
%                                                                   
% Assumes execution using the following command-line usage:
%
%   pl -q -G0 -g main -t halt -s SOURCENAME -- USERARG1 ... < in > out
%
% which is a slight variation from the usual invocation in that it
% specifies an unlimited global stack size.
%
% Contributed by Anthony Borla
% ----------------------------------------------------------------------

main :-
  cmdlNumArg(1, N),

  N1 is 2 ** N * 10000,
  N2 is 2 ** (N - 1) * 10000,
  N3 is 2 ** (N - 2) * 10000,

  calcAndshowSieve(N1),
  calcAndshowSieve(N2),
  calcAndshowSieve(N3).

% ------------------------------- %

calcAndshowSieve(N) :-
  make_array(ns, N, 1, Array),
  nsieve(2, Array, N, 0, R),
  format('Primes up to~t~w~21|~t~w~30|~n', [N, R]).

% ------------------------------- %

nsieve(ASize, _, ASize, R, R) :- !.

nsieve(N, Array, ASize, A, R) :-
  not(is_arg(N, Array)),
  N1 is N + 1, !, nsieve(N1, Array, ASize, A, R).

nsieve(N, Array, ASize, A, R) :-
  clear_sieve(N, N, Array, ASize), A1 is A + 1, 
  N1 is N + 1, !, nsieve(N1, Array, ASize, A1, R).

% ------------- %

clear_sieve(N, M, Array, ASize) :-
  N1 is N + M, clear_sieve_loop(N1, M, Array, ASize).

clear_sieve_loop(N, _, _, ASize) :- ASize < N, !.

clear_sieve_loop(N, M, Array, ASize) :-
  clear_arg(N, Array),
  N1 is N + M, !, clear_sieve_loop(N1, M, Array, ASize).

% ------------------------------- %

make_array(Name, N, V, Array) :-
  functor(Array, Name, N),
  fill_array(N, V, Array).

% ------------- %

fill_array(0, _, _) :- !.

fill_array(N, V, Array) :-
  nb_setarg(N, Array, V), N1 is N - 1, !,
  fill_array(N1, V, Array).

% ------------- %

set_arg(N, Array) :- nb_setarg(N, Array, 1).
clear_arg(N, Array) :- nb_setarg(N, Array, 0).
is_arg(N, Array) :- arg(N, Array, 1).

% ------------------------------- %

argument_value(N, Arg) :-
  current_prolog_flag(argv, Cmdline), append(_, [--|UserArgs], Cmdline),
  Nth is N - 1, nth0(Nth, UserArgs, Arg).

cmdlNumArg(Nth, N) :-
  argument_value(Nth, Arg), catch(atom_number(Arg, N), _, fail) ; halt(1).

