;; nsieve benchmark for The Computer Language Shootout
;; Written by Dima Dorfman, 2004
;; Compile with bigloo: bigloo -Obench -unsafe -o nsieve_bigloo nsieve.scm

(module nsieve
	(extern (macro printf::int (string long long) "printf"))
	(main main)) ; Bigloo wants this, but Gauche chokes on it. Sigh.

(define (nsieve m)
  (let ((a (make-vector m #t)))
    (let loop ((i 2) (n 0))
      (if (< i m)
	  (begin
	    (if (vector-ref a i)
		(begin
		  (let clear ((j (+ i i)))
		    (if (< j m)
			(begin
			  (vector-set! a j #f)
			  (clear (+ j i)))))
		  (loop (+ 1 i) (+ 1 n)))
		(loop (+ 1 i) n)))
	  n))))

(define (test n)
  (let* ((m (* (expt 2 n) 10000))
	 (count (nsieve m)))
    (printf #"Primes up to %8d %8d\n" m count)))

(define (main args)
  (if (< (length args) 2)
      (begin (display "An argument is required") (newline) 2)
      (let ((n (string->number (cadr args))))
	(if (not n)
	    (begin (display "An integer is required") (newline) 2)
	    (begin
	      (if (>= n 0) (test n))
	      (if (>= n 1) (test (- n 1)))
	      (if (>= n 2) (test (- n 2)))
	      0)))))
