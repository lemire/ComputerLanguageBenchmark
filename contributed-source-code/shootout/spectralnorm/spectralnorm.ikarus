;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/
;;
;; Derived by Michael D. Adams from the MzScheme variant

(import (rnrs))

;;; Stupid boiler-plate for formatting floating point value
(define (roundto digits n)
  (let* ([e (expt 10 digits)]
         [num (round (abs (* e (exact n))))]
         [str (number->string (mod num e))])
    (string-append
     (if (negative? n) "-" "")
     (number->string (div num e))
     "."
     (make-string (- digits (string-length str)) #\0)
     str)))

;; -------------------------------

(define (approximate n)
  (let ((u (make-vector n 1.0))
        (v (make-vector n 0.0)))
    (do ((i 0 (fx+ i 1)))
        ((= 10 i))
      (mulAtAv n u v)
      (mulAtAv n v u))
    (let loop ([i 0] [vBv 0.0] [vV 0.0])
      (if (< i n)
          (loop (fx+ i 1)
                (fl+ vBv (fl* (vector-ref u i) (vector-ref v i)))
                (fl+ vV (fl* (vector-ref v i) (vector-ref v i))))
          (flsqrt (fl/ vBv vV))))))

;; --------------

(define (A i j)
  (/ 1.0 (fx+ (fx+ (fxdiv (fx* (fx+ i j) (fx+ (fx+ i j) 1)) 2) i) 1)))

;; --------------

(define (mulAv n v av)
  (do ((i 0 (fx+ i 1)))
      ((= n i))
    (vector-set! av i 0.0)
    (do ((j 0 (fx+ j 1)))
        ((= n j))
      (vector-set! av i (fl+ (vector-ref av i) (fl* (A i j) (vector-ref v j)))))))

;; --------------

(define (mulAtV n v atv)
  (do ((i 0 (fx+ i 1)))
      ((= n i))
    (vector-set! atv i 0.0)
    (do ((j 0 (fx+ j 1)))
        ((= n j))
      (vector-set! atv i (fl+ (vector-ref atv i) (fl* (A j i) (vector-ref v j)))))))

;; --------------

(define (mulAtAv n v atav)
  (let ((u (make-vector n 0.0)))
    (mulAv n v u)
    (mulAtV n u atav)))

;; -------------------------------

(define (main args)
  (let ((n (if (< (length args) 2)
               100
               (string->number (cadr args)))))
    (display (roundto 9 (approximate n))) (newline)))

; -------------------------------

(main (command-line))
