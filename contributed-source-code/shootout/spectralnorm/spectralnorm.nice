/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*/

import Include;

void main(String[] args){
   let n = Integer.parseInt(args[0]);

   // create unit vector
   let u = new double[n];       
   for (var i=0; i<n; i++) u[i] =  1.0;

   // 20 steps of the power method
   let v = new double[n];  
   for (var i=0; i<10; i++) {
      MultiplyAtAv(n,u,v);
      MultiplyAtAv(n,v,u);
   }

   // B=AtA         A multiplied by A transposed
   // v.Bv /(v.v)   eigenvalue of v 
   var vBv = 0.0, vv = 0.0;
   for (var i=0; i<n; i++) {
      vBv += u[i]*v[i];
      vv  += v[i]*v[i];
   }

   println( Math.sqrt(vBv/vv).toStringWith(9) ); 
}


/* return element i,j of infinite matrix A */
double A(int i, int j){
   return 1.0/((i+j)*(i+j+1) /2 +i+1); 
}

/* multiply vector v by matrix A */
void MultiplyAv(int n, double[] v, double[] Av){
   for (var i=0; i<n; i++){
      Av[i] = 0.0;
      for (var j=0; j<n; j++) Av[i] += A(i,j)*v[j];
   }
}

/* multiply vector v by matrix A transposed */
void MultiplyAtv(int n, double[] v, double[] Atv){
   for (var i=0;i<n;i++){
      Atv[i] = 0.0;
      for (var j=0; j<n; j++) Atv[i] += A(j,i)*v[j];
   }
}

/* multiply vector v by matrix A and then by matrix A transposed */
void MultiplyAtAv(int n, double[] v, double[] AtAv){
   let u = new double[n];
   MultiplyAv(n,v,u);
   MultiplyAtv(n,u,AtAv);
}
