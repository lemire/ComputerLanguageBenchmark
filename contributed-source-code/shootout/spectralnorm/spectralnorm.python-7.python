# The Computer Language Benchmarks Game
# http://shootout.alioth.debian.org/
# Contributed by Sebastien Loisel
# Fixed by Isaac Gouy
# Sped up by Josh Goldfoot
# Dirtily sped up by Simon Descarpentries
# Concurrency by Jason Stitt
# Modified by Justin Peel

from multiprocessing import Pool, cpu_count
from math            import sqrt
from itertools       import izip
from sys             import argv
from operator        import add

def eval_A (i, j):
    ij = i + j
    return 1.0 / ((ij) * (ij + 1) / 2 + i + 1)

def eval_A_times_u (u, splits):
    args = ((split, u) for split in splits)
    return reduce(add,pool.map(part_A_times_u, args))    

def eval_At_times_u (u, splits):
    args = ((split, u) for split in splits)
    return reduce(add,pool.map(part_At_times_u, args))

def eval_AtA_times_u (u, splits):
    return eval_At_times_u (eval_A_times_u (u, splits), splits)

def part_A_times_u((split,u)):
    return tuple(sum([eval_A(i,j) * u_j for j, u_j in enumerate(u)])
            for i in xrange(split[0],split[1]))

def part_At_times_u((split,u)):
    return tuple(sum([eval_A(j,i) * u_j for j, u_j in enumerate(u)])
            for i in xrange(split[0],split[1]))

def main(numprocs):
    n = int(argv[1])
    u = [1] * n
    numineach = [n / numprocs]*numprocs
    for i in xrange(n % numprocs):
        numineach[i] += 1
    splits = [(0,numineach[0])]
    for i in xrange(1,numprocs):
        splits.append((splits[-1][1],splits[-1][1] + numineach[i]))
    for dummy in xrange (10):
        v = eval_AtA_times_u (u, splits)
        u = eval_AtA_times_u (v, splits)

    vBv = vv = 0

    for ue, ve in izip (u, v):
        vBv += ue * ve
        vv  += ve * ve

    print "%0.9f" % (sqrt(vBv/vv))

if __name__ == '__main__':
    numprocs = cpu_count()
    pool = Pool(processes=numprocs)
    main(numprocs)
