;;; The Computer Language Benchmarks Game
;;; http://shootout.alioth.debian.org/
;;;
;;; contributed by Anthony Borla

(require-extension format)

(define (approximate n)
  (let ((u (make-vector n 1.0))
        (v (make-vector n 0.0))
        (vBv 0.0) (vV 0.0))

    (do ((i #e0 (fx+ i 1)))
        ((fx= 10 i))
      (mulAtAv n u v)
      (mulAtAv n v u))

    (do ((i #e0 (fx+ i 1)))
        ((fx= n i))
      (set! vBv (+ vBv (* (vector-ref u i) (vector-ref v i))))
      (set! vV (+ vV (* (vector-ref v i) (vector-ref v i)))))

    (sqrt (/ vBv vV))))

(define (A i j)
  (/ 1.0 (exact->inexact (fx+ (fx+ (fx/ (fx* (fx+ i j) (fx+ (fx+ i j) 1)) 2) i) 1))))

(define (mulAv n v av)
  (do ((i #e0 (fx+ i 1)))
      ((fx= n i))
    (vector-set! av i 0.0)
    (do ((j #e0 (fx+ j 1)))
        ((fx= n j))
      (vector-set! av i (+ (vector-ref av i) (* (A i j) (vector-ref v j)))))))

(define (mulAtV n v atv)
  (do ((i #e0 (fx+ i 1)))
      ((fx= n i))
    (vector-set! atv i 0.0)
    (do ((j #e0 (fx+ j 1)))
        ((fx= n j))
      (vector-set! atv i (+ (vector-ref atv i) (* (A j i) (vector-ref v j)))))))

(define (mulAtAv n v atav)
  (let ((u (make-vector n 0.0)))
    (mulAv n v u)
    (mulAtV n u atav)))

(define (main args)
  (let ((n (if (null? args)
               100
               (string->number (car args)))))

    (format #t "~,9F~%" (approximate n))))

(main (command-line-arguments))

