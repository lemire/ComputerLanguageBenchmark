% The Computer Language Shootout Benchmarks Game
% http://shootout.alioth.debian.org/
%
% Based on work by Sebastien Loisel and Troestler Christophe
% contributed by Glendon Holst
% ----------------------------------------------------------------------


:- module spectralnorm.
:- interface.
:- import_module io.

:- pred main(io::di, io::uo) is det.

% ----------------------------------------------------------------------

:- implementation.

:- import_module list.
:- import_module array.
:- import_module math.
:- import_module int.
:- import_module float.
:- import_module string.

% ----------------------------------------------------------------------

:- type sn_vect == array(float).

% ----------------------------------------------------------------------

main(!IO) :-
	io.command_line_arguments(Args, !IO),
	(
		if
			Args = [AString|_],
			string.to_int(string.strip(AString), Aint)
		then
			N = Aint
		else
			N is 5500
	),

	U0 = array.init(N, 1.0),
	V0 = array.init(N, 0.0),

	eval_AtA(10, U0, U, V0, V),
	
	Vv = sum_Products(N,0.0,V, V),
	VBv = sum_Products(N,0.0,U, V),
	
	io.format("%0.9f\n", [f(sqrt(VBv / Vv))], !IO).

% ------------------------------- %

:- pred eval_AtA(int, sn_vect, sn_vect, sn_vect, sn_vect) is det.
:- mode eval_AtA(in, array_di, array_uo, array_di, array_uo) is det.

eval_AtA(N, U0, U, V0, V) :-
(
	N > 0 ->
	eval_AtA_times_u(U0, V0, V1),
	eval_AtA_times_u(V1, U0, U1),
	eval_AtA(N - 1, U1, U, V1, V)
;
	U = U0,
	V = V0
).

% ------------- %

:- func eval_A(int, int) = float.

eval_A(I, J) = 1.0 / float((((I + J) * (I + J + 1)) / 2) + I + 1).

% ------------- %

:- func sum_Products(int, float, sn_vect, sn_vect) = float.

sum_Products(N, V, Arr1, Arr2) = sum_Products_(0, N, V, Arr1, Arr2).

:- func sum_Products_(int, int, float, sn_vect, sn_vect) = float.

sum_Products_(I, N, V, Arr1, Arr2) = Result :-
(
	I < N ->
	Result = sum_Products_(I + 1, N, 
		(V + (array.lookup(Arr1,I) * array.lookup(Arr2,I))), 
		Arr1, Arr2)
;
	Result = V
).

% ------------------------------- %

:- pred eval_AtA_times_u(sn_vect, sn_vect, sn_vect) is det.
:- mode eval_AtA_times_u(in, array_di, array_uo) is det.

eval_AtA_times_u(U, V0, V) :-
	W0 = array.init(array.size(U), 0.0),
	eval_A_times_u(U, W0, W1),
	eval_At_times_u(W1, V0, V).

% ------------- %

:- pred eval_A_times_u(sn_vect, sn_vect, sn_vect) is det.
:- mode eval_A_times_u(in, array_di, array_uo) is det.

eval_A_times_u(U, V0, V) :- eval_A_times_u_i_(0, array.size(U), U, V0, V).

:- pred eval_A_times_u_i_(int, int, sn_vect, sn_vect, sn_vect) is det.
:- mode eval_A_times_u_i_(in, in, in, array_di, array_uo) is det.

eval_A_times_u_i_(I, N, U, V0, V) :-
(
	I < N ->
	array.set(V0, I, 0.0, V1),
	eval_A_times_u_j_(I, 0, N, U, V1, V2),
	eval_A_times_u_i_(I + 1, N, U, V2, V)
;
	V = V0
).

:- pred eval_A_times_u_j_(int, int, int, sn_vect, sn_vect, sn_vect) is det.
:- mode eval_A_times_u_j_(in, in, in, in, array_di, array_uo) is det.

eval_A_times_u_j_(I, J, N, U, V0, V) :-
(
	J < N ->
	Vi = array.lookup(V0, I) + eval_A(I,J) * array.lookup(U, J),
	array.set(V0, I, Vi, V1),
	eval_A_times_u_j_(I, J + 1, N, U, V1, V)
;
	V = V0
).

% ------------- %

:- pred eval_At_times_u(sn_vect, sn_vect, sn_vect) is det.
:- mode eval_At_times_u(in, array_di, array_uo) is det.

eval_At_times_u(U, V0, V) :- eval_At_times_u_i_(0, array.size(U), U, V0, V).

:- pred eval_At_times_u_i_(int, int, sn_vect, sn_vect, sn_vect) is det.
:- mode eval_At_times_u_i_(in, in, in, array_di, array_uo) is det.

eval_At_times_u_i_(I, N, U, V0, V) :-
(
	I < N ->
	array.set(V0, I, 0.0, V1),
	eval_At_times_u_j_(I, 0, N, U, V1, V2),
	eval_At_times_u_i_(I + 1, N, U, V2, V)
;
	V = V0
).

:- pred eval_At_times_u_j_(int, int, int, sn_vect, sn_vect, sn_vect) is det.
:- mode eval_At_times_u_j_(in, in, in, in, array_di, array_uo) is det.

eval_At_times_u_j_(I, J, N, U, V0, V) :-
(
	J < N ->
	Vi = array.lookup(V0, I) + eval_A(J, I) * array.lookup(U, J),
	array.set(V0, I, Vi, V1),
	eval_At_times_u_j_(I, J + 1, N, U, V1, V)
;
	V = V0
).

% ------------------------------- %
