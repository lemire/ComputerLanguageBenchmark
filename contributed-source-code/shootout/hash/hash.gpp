// -*- mode: c++ -*-
// $Id$
// http://shootout.alioth.debian.org
//
// Improved by Brad Knotwell to use memory constraints

#include <stdio.h>
#include <iostream>
#include <memory>
#include <ext/hash_map>

using namespace std;
#if (! defined(__INTEL_COMPILER))
using namespace __gnu_cxx;
#endif

struct eqstr {
    bool operator()(const char* s1, const char* s2) const {
	return strcmp(s1, s2) == 0;
    }
};

#if defined(__INTEL_COMPILER)
struct str_hash_compare
{
    enum { bucket_size = 4, min_buckets = 8 };
	
    bool operator()(char const *s1, char const *s2) const
    {return strcmp(s1, s2) < 0;}

    size_t operator() (const char* s) const
    {
        size_t h = 0;
        for (; *s; ++s)
            h = 5 * h + *s;
        return h;
    }
};
#endif

int
main(int argc, char *argv[]) {
    int n = ((argc == 2) ? atoi(argv[1]) : 1);
    char buf[16];
#if defined(__INTEL_COMPILER)
    typedef hash_map<const char*, int, str_hash_compare> HM;
#else
    typedef hash_map<const char*, int, hash<const char*>, eqstr, __single_client_alloc> HM;
#endif
    HM X;

    for (int i=1; i<=n; i++) {
	sprintf(buf, "%x", i);
	X[strdup(buf)] = i;
    }

    int c = 0;
    for (int i=n; i>0; i--) {
	sprintf(buf, "%d", i);
	if (X.find(buf) != X.end()) c++;
    }

    cout << c << endl;
}
