;; ---------------------------------------------------------------------
;; The Great Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Based on existing Shootout submission [Scheme Guile]. However hashing
;; tasks performed using only SRFI-69-compliant facilities. Use of
;; default hash function and predicate provides significantly better
;; performance than explicitly passing native implementations; thus, do
;; this:
;;
;;    ... (ht (make-hash-table)) ...
;;
;; not this:
;;
;;    ... (ht (make-hash-table string-ci=? string-ci-hash)) ...
;;
;; Contributed by Anthony Borla
;; ---------------------------------------------------------------------

(declare (fixnum) (disable-interrupts) (unsafe) (block) (lambda-lift))

; -------------------------------

(define (main args)
  (let ((n (if (null? args)
               1
               (string->number (car args))))

    (c 0) (ht (make-hash-table)))

    (do ((i 1 (+ i 1)))
        ((< n i))
      (hash-table-set! ht (number->string i 16) i))

    (do ((i 1 (+ i 1)))
        ((< n i))
      (if (hash-table-exists? ht (number->string i 10))
          (set! c (+ c 1))))

    (print c)))

; -------------------------------

(main (command-line-arguments))

