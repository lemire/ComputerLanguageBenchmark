(* -*- mode: sml -*-
 * $Id$
 * http://www.bagley.org/~doug/shootout/
 * from Tom 7
 *)

val bufsize = 4096
val rdbufsize = 4096

val stdout = Posix.FileSys.wordToFD 0w1
val stdin = Posix.FileSys.wordToFD 0w0

datatype block = END
               | MORE of int ref * Word8Array.array * block

val buff = Unsafe.Word8Array.create rdbufsize

fun out END = ()
  | out (MORE (ir as ref i, a, next)) =
  let in
    Posix.IO.writeArr (stdout, Word8ArraySlice.slice(a, i, NONE));
    out next
  end

fun rd (start, len, count, b) =
  if (start + len) >= count then 
    (* done with this block. 
       Copy from start to the end of the array into
       buff, then return the starting index into buff. *)
    let in
      Word8ArraySlice.copy {src=Word8ArraySlice.slice(buff, start, SOME(len)),
                            dst=buff, di=0};
      (b, len)
    end
  else
    if Unsafe.Word8Array.sub(buff, start + len) = 0w10 then
      (* found newline *)
      case b of
	 END => raise Fail "unexpected END"
       | MORE(ir as ref i, a, _) =>
        if i > len then
            let in
              (* enough room *)
              Word8ArraySlice.copy {src=Word8ArraySlice.slice(buff, start, SOME(len + 1)),
	                            dst=a, di=(i - len - 1)};
              ir := i - (len + 1);
              
              rd(start + len + 1, 0, count, b)
            end
          else (* not enough room *)
            let
              (* going to need a new buffer *)
              val na = Unsafe.Word8Array.create bufsize
              val l = (len + 1) - i
            in
              (* put the tail in whatever room is left *)
	      Word8ArraySlice.copy {src=Word8ArraySlice.slice(buff, (start + len + 1) -i, SOME(i)),
	                            dst=a, di= 0 };
              (* put the head in a new buffer *)
              Word8ArraySlice.copy {src=Word8ArraySlice.slice(buff, start, SOME(l)),
	                            dst=na, di=bufsize - l };
              ir := 0;
              rd(start + len + 1, 0, count, MORE(ref (bufsize - l), na, b))
            end
	else rd (start, len + 1, count, b)
	
fun loop (b, s) =
  let 
    val count = Posix.IO.readArr (stdin, Word8ArraySlice.slice(buff, s, SOME(rdbufsize-s)))
    val (bb, bs) = rd (0, s, count + s, b)
  in
    case count of
      0 => out bb
    | _ => loop (bb, bs)
  end

fun main(name, args) =
    ( loop (MORE(ref bufsize, Unsafe.Word8Array.create bufsize, END), 0);
      OS.Process.success);

val _ = main( CommandLine.name(), CommandLine.arguments() );

