;;; -*- mode: lisp -*-
;;; $Id$
;;; http://shootout.alioth.debian.org/

;;; this version uses an adjustable array with fill-pointer
;;; which is slower than using a simple array, and recopying the
;;; entire array for every resizing.

(declaim (optimize (speed 3) (debug 0) (safety 0) (space 0) (compilation-speed 0)))

(defconstant BLOCKSIZE 4096)
(defvar bufsize BLOCKSIZE)

(defun main ()
  (declare (fixnum bufsize))
  (let ((buf (make-array bufsize :element-type 'character
			 :adjustable t :fill-pointer 0)))

    ; read 4096 bytes at a time into buf
    (do ((fp (read-sequence buf *standard-input*
			    :start (fill-pointer buf)
			    :end (+ (fill-pointer buf) BLOCKSIZE))
	     (read-sequence buf *standard-input*
			    :start (fill-pointer buf)
			    :end (+ (fill-pointer buf) BLOCKSIZE))))
	((= fp (fill-pointer buf)))
      (setf (fill-pointer buf) fp)
      (if (> (+ fp BLOCKSIZE) bufsize)
	  (setq buf (adjust-array buf (setq bufsize (the fixnum (* 2 bufsize)))))))

    ; now traverse buf backwards, printing lines
    ; adjust fill pointer
    (do ((c1 (- (fill-pointer buf) 1) (1- c1))
	 (c2 (fill-pointer buf)))
	((= c1 0) (write-sequence buf *standard-output* :start c1 :end c2))
      (declare (fixnum c1 c2))
      (if (eq (aref buf (- c1 1)) #\newline)
	  (progn
	    (write-sequence buf *standard-output* :start c1 :end c2)
	    (setq c2 c1))))))
