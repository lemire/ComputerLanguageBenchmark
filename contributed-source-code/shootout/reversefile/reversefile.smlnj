(* reversefile.sml
 *
 *   Output lines in reverse order.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 *)
structure Test : sig
    val main : (string * string list) -> OS.Process.status
end = struct

    structure AS = Word8ArraySlice
    structure IO = Posix.IO

    fun x + y = Word.toIntX (Word.+ (Word.fromInt x, Word.fromInt y))
    fun x - y = Word.toIntX (Word.- (Word.fromInt x, Word.fromInt y))

    val sz = 4096

    fun newarr () = Unsafe.Word8Array.create sz
    val sub = Byte.byteToChar o Unsafe.Word8Array.sub

    val (buf, top) = (newarr (), ref 0)
    fun write (a, i, len) =
	ignore (IO.writeArr (Posix.FileSys.stdout, AS.slice (a, i, SOME len)))
    fun out (a, i, len) =
	let val cur = !top
	    val new = cur + len
	in if new > sz then (write (buf, 0, cur);
			     AS.copy { dst = buf, di = 0,
				       src = AS.slice (a, i, SOME len) };
			     top := len)
	   else (AS.copy { dst = buf, di = cur,
			   src = AS.slice (a, i, SOME len) };
		 if new = sz then (write (buf, 0, sz); top := 0)
		 else top := new)
	end
    fun flush () = case !top of 0 => () | c => write (buf, 0, c)

    fun gobble (a, i, stack) =
	if i < sz then
	    let val n = IO.readArr (Posix.FileSys.stdin, AS.slice (a, i, NONE))
	    in if n = 0 then (a, i, stack) else gobble (a, i + n, stack)
	    end
	else gobble (newarr (), 0, a :: stack)

    fun dopend (l, (p, pi)) = (app (fn a => out (a, 0, sz)) l; out (p, 0, pi))

    fun nostraddle (_, 0, []) = ()
      | nostraddle (_, 0, a :: more) = nostraddle (a, sz, more)
      | nostraddle (a, i, stack) =
	let fun look j =
		let val j' = j - 1
		in if j' < 0 then
		       case stack of b :: bs => straddle (b, bs, [], (a, i))
				   | [] => out (a, 0, i)
		   else if sub (a, j') = #"\n" then
		       (out (a, j, i - j); nostraddle (a, j, stack))
		   else look j'
		end
	in look (i - 1)
	end

    and straddle (a, stack, pl, last) =
	let fun look j =
		let val j' = j - 1
		in if j' < 0 then
		       case stack of b :: bs => straddle (b, bs, a :: pl, last)
				   | [] => dopend (a :: pl, last)
		   else if sub (a, j') = #"\n" then (out (a, j, sz - j);
						     dopend (pl, last);
						     nostraddle (a, j, stack))
		   else look j'
		end
	in look sz
	end

    fun main _ =
	(nostraddle (gobble (newarr (), 0, [])); flush (); OS.Process.success)
end
