(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module fannkuch;
import System.Console as C, BenchmarksGame;

procedure pfannkuchen(n: integer): integer; 
type
   Vector = array * of integer;
var
   perm, perm1, count, maxPerm: Vector;
   check, m, r, i, k, temp, maxFlipsCount, flipsCount, perm0: integer;
begin
   perm := new Vector(n); 
   perm1 := new Vector(n); 
   count := new Vector(n); 
   maxPerm := new Vector(n); 

   check := 0;
   maxFlipsCount := 0;
   m := n - 1;
   for i := 0 to m do perm1[i] := i; end;

   r := n;
   loop
      (* write-out the first 30 permutations *)
      if (check < 30) then
         for i := 0 to m do C.Write("{0}", perm1[i]+1); end;
         C.WriteLine();
         inc(check);
      end;

      while r # 1 do count[r-1] := r; dec(r); end;
      if ~ ((perm1[0]=0) or (perm1[m]=m)) then
         for i := 0 to m do perm[i] := perm1[i]; end;
         flipsCount := 0;
         loop
            k := perm[0];
            if k = 0 then exit; end;
            for i := 0 to ((k+1) div 2) - 1 do
               temp := perm[i]; perm[i] := perm[k-i]; perm[k-i] := temp;
            end;
            inc(flipsCount);
         end;
         if flipsCount > maxFlipsCount then
            maxFlipsCount := flipsCount;
            for i := 0 to m do maxPerm[i] := perm1[i]; end;
         end;
      end;
      loop
         if r = n then return maxFlipsCount; end;
         perm0 := perm1[0];
         i := 0;
         while i < r do
            k := i + 1;
            perm1[i] := perm1[k];
            i := k;
         end;
         perm1[r] := perm0;

         dec(count[r]);
         if count[r] > 0 then exit; end;
         inc(r);
      end;
   end;
end pfannkuchen;

var 
   n : integer;
begin 
   n := BenchmarksGame.argi();
   C.WriteLine("Pfannkuchen({0}) = {1}", n, pfannkuchen(n));
end fannkuch.
