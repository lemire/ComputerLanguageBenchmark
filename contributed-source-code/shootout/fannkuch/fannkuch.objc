/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
   use -std=gnu99 in gcc's arguments
*/

#include <stdlib.h>
#include <stdio.h>
#include <objc/Object.h>

@interface Fannkuch : Object {
    int n;
    int *perm, *perm1, *count, *maxPerm;
}
-init : (int) n;
-(int) calc;
@end

@implementation Fannkuch
-init : (int) nn {
    n = nn;
    size_t x = n * sizeof(int);
    perm = (int*) malloc(x);
    perm1 = (int*) malloc(x);
    count = (int*) malloc(x);
    maxPerm = (int*) malloc(x);
    return self;
}
-(int) calc {
    int check = 0;
    int maxFlipsCount = 0;
    int m = n - 1;

    for (int i = 0; i < n; i++) perm1[i] = i;
    int r = n;

    while (YES) {
        // write-out the first 30 permutations
        if (check < 30){
          for(int i=0; i<n; i++) printf("%d",perm1[i]+1);
          printf("\n");
          check++;
        }

        while (r != 1) { count[r - 1] = r; r--; }
        if (!(perm1[0] == 0 || perm1[m] == m)) {
            for (int i = 0; i < n; i++) perm[i] = perm1[i];

            int flipsCount = 0;
            int k;

            while (!((k = perm[0]) == 0)) {
                int k2 = (k + 1) >> 1;
                for (int i = 0; i < k2; i++) {
                    int temp = perm[i]; perm[i] = perm[k - i]; perm[k - i] = temp;
                }
                flipsCount++;
            }

            if (flipsCount > maxFlipsCount) {
                maxFlipsCount = flipsCount;
                for (int i = 0; i < n; i++) maxPerm[i] = perm1[i];
            }
        }

        while (YES) {
            if (r == n) return maxFlipsCount;
            int perm0 = perm1[0];
            int i = 0;
            while (i < r) {
                int j = i + 1;
                perm1[i] = perm1[j];
                i = j;
            }
            perm1[r] = perm0;

            count[r] = count[r] - 1;
            if (count[r] > 0) break;
            r++;
        }
    }
}
@end

int main (int argc, char * argv[]) {
    int n = (argc>1) ? atoi(argv[1]) : 7;
    Fannkuch* fan = [[Fannkuch alloc] init : n];
    printf("Pfannkuchen(%d) = %d\n", n, [fan calc] );
}

