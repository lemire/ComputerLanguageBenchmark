(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/

   Based on Ocaml contribution of
       Christophe Papazian (Decembre 2005)

   Parallelized by Alfredos-Panagiotis Damkalis
       with the help of Jon Harrop's functions 
*)

(* please compile with -unsafe to optimize speed *)

open Array open Printf


let threads_num = 4

(* semi-standard function for process-based parallelism *)
let invoke (f : 'a -> 'b) x : unit -> 'b =
  let input, output = Unix.pipe() in
  match Unix.fork() with
  | -1 -> Unix.close input; Unix.close output; (let v = f x in fun () -> v)
  | 0 ->
      Unix.close input;
      let output = Unix.out_channel_of_descr output in
        Marshal.to_channel output (try `Res(f x) with e -> `Exn e) [];
        close_out output;
        exit 0
  | pid ->
      Unix.close output;
      let input = Unix.in_channel_of_descr input in fun () ->
        let v = Marshal.from_channel input in
        ignore (Unix.waitpid [] pid);
        close_in input;
        match v with `Res x -> x | `Exn e -> raise e

let ( |> ) x f = f x

let map_JonH (f : 'a -> 'b) a : 'b array =
  map (invoke f) a |>
    map (fun f -> f())

(*global variables*)
let n = try if length Sys.argv>1 then int_of_string Sys.argv.(1)else 7  with _->7
let r = init(n+2)(fun x -> x-1) and p=init n((+)1) and s=create n 0

let init_f i = (i,create n i,create (n+2) i)
let parray = init threads_num (init_f)

(*pretty printing function*)
let q p = iter print_int p;print_newline()

(*counting permutations*)
let rec a n r = r.(n)<-(r.(n)+1);
  if r.(n)=n-1 then a (n+1) r
  else (if r.(n)=n then r.(n)<-0;n)

(*swapping arrays*)
let w m p=
  let rec a i=i=n||(p.(i)<>(i+1)&&a(i+1))in
   if a 0
   then (for i=0 to n-1 do s.(i)<-p.(i)done;
         let rec y m=
          let x=s.(0)-1
           in if x=0 then m
              else (for i=0 to((x-1) lsr 1)do
                     let t=s.(i)in
                     let o = x-i in
                       s.(i)<-s.(o); s.(o)<-t
                    done;y(m+1))
         in y m)
   else 0

(*building new permutations*)
let x n p=
  for i=1 to n-1 do let t=p.(0)in
  for j=0 to i-1 do p.(j)<-p.(j+1) done; p.(i)<-t done

(*jump <threads_num-1> permutations so the current thread
  check its part of permutations*)
let rec inder i z p r = x i p;
                        let c = (a 2 r) in
                          if (c<=n) && (z < (threads_num-1))
                          then (inder c (z+1) p r)
                          else ((c,p,r))
(*initialize starting permutation for each thread*)
let rec initp i z= parray.(z) <- (i,copy p,copy r); x i p;
                   let c = (a 2 r) in
                       if (c<=n) && (z < (threads_num-2))
                       then (initp c (z+1))
                       else parray.(z+1) <- (c,copy p,copy r)

(* main *)
let _ = let rec f i m z= (* printing loop *)
          if i <=n && z>0
          then(q p;x i p;f(a 2 r)(max m(w 0 p))(z-1))
          else (if z>0
                then (q p;m)
                else (initp i 0; fold_left max m (map_JonH (g m) parray))) (*start threads*)
        and g m (i,p,r) = if i <=n (* non printing loop *)
                          then(g (max m(w 0 p)) (inder i 0 p r))
                          else (m) in
printf "Pfannkuchen(%i) = %i\n" n (f (a 2 r) 0 30)
