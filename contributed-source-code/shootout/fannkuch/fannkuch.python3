# The Computer Language Benchmarks Game
# http://shootout.alioth.debian.org/
#
# contributed by Sokolov Yura
# modified by Tupteq
# 2to3
# fixed by Daniele Varrazzo
# mp by Ahmad Syukri

def print30(n):
    count = list(range(0, n))
    perm1 = list(range(n))
    showmax = 30
    r = n
    perm1_ins = perm1.insert
    perm1_pop = perm1.pop

    while showmax:
        while r != 1:
            count[r-1] = r
            r -= 1
            
        print("".join(str(i+1) for i in perm1))
        showmax -= 1

        while r != n:
            perm1_ins(r, perm1_pop(0))
            count[r] -= 1
            if count[r] > 0:
                break
            else:
                r += 1
        else:
            return

def init(arg):
    global n
    n = arg

def fannkuch(i):
    count = list(range(1, n))
    max_flips = 0
    m = n-1
    r = n-1
    check = 0
    perm1 = list(range(n))
    perm1[i] = m
    perm1[m] = i
    perm1_ins = perm1.insert
    perm1_pop = perm1.pop
    
    while 1:
        while r != 1:
            count[r-1] = r
            r -= 1

        if perm1[0] != 0 and perm1[m] != m:
            perm = perm1[:]
            flips = 0
            k = perm[0]
            while k:
                perm[:k+1] = perm[k::-1]
                flips += 1
                k = perm[0]
            if flips > max_flips:
                max_flips = flips
                
        while r != m:
            perm1_ins(r, perm1_pop(0))
            count[r] -= 1
            if count[r] > 0:
                break
            r += 1
        else:
            return max_flips

def main():
    from multiprocessing import Pool
    from sys import argv
    try:
        n = int(argv[1])
    except:
        n = 7
    print30(n)
    pool = Pool(initializer = init, initargs = (n,))
    print("Pfannkuchen(%d) = %d\n" % (n, max(pool.map(fannkuch, list(range(n))))), end='')

if __name__=="__main__":
    main()
