/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Dennis Decker Jensen
*/

parse arg num .
check = 0
maxflips = 0
f.0 = num; p.0 = num
do i = 1 for num; p.i = i; end;

call pfannkuch_permutations num
say "Pfannkuchen(" || num || ") = " || maxflips
exit(0)

pfannkuch_permutations: procedure expose f. p. maxflips check
arg n
if n = 1 then do
	/* write the first 30 permutations */
	if check < 30 then do
		do i = 1 for p.0; call charout , p.i; end
		say
		check = check + 1
	end	

	f.0 = p.0
	do i = 1 for p.0; f.i = p.i; end
	maxflips = max(nflips(), maxflips)
end
else do
	do i = 1 for n
		call pfannkuch_permutations n-1
		m = p.1		/* roll */
		do j = 1 for n
			k = j + 1
			p.j = p.k
		end
		p.n = m
	end
end
return maxflips

nflips: procedure expose f.
n = 0
do while f.1 \= 1
	call reverse f.1
	n = n + 1
end
return n

reverse: procedure expose f.
arg n
k = n % 2
do i = 1 for k
	parse value f.i f.n with f.n f.i
	n = n - 1
end
return

