;; The Computer Language Shootout
;; http://shootout.alioth.debian.org/
;; Written by Dima Dorfman, 2004
;; Slightly improved by Sven Hartrumpf, 2005-2006
;; Adapted for gambit-c by Paul Berg

(declare (standard-bindings) (block) (not safe) (not interrupts-enabled) (fixnum))

(define (1+ i) (+ i 1))
(define (1- i) (- i 1))

(define vector-for-each (lambda (pred v)
                          (do ((i 0 (1+ i))
                               (v-length (vector-length v)))
                              ((>= i v-length))
                            (pred (vector-ref v i)))))

(define (vector-reverse-slice! v i j)
  (do ((i i (1+ i))
       (j (1- j) (1- j))) ; exclude position j
      ((<= j i))
    (vector-swap! v i j)))

(define (vector-swap! v i j)
  (let ((t (vector-ref v i)))
    (vector-set! v i (vector-ref v j))
    (vector-set! v j t)))

(define (count-flips pi)
  (do ((rho (vector-copy pi))
       (i 0 (1+ i)))
      ((= (vector-ref rho 0) 0) i)
    (vector-reverse-slice! rho 0 (1+ (vector-ref rho 0)))))

(define (fannkuch n)
  (let ((pi (do ((pi (make-vector n))
                 (i 0 (1+ i)))
                ((= i n) pi)
              (vector-set! pi i i)))
        (r n)
        (count (make-vector n)))
    (let loop ((flips 0)
               (perms 0))
      (cond ((< perms 30)
             (vector-for-each (lambda (x)
                                (display (1+ x)))
                              pi)
             (newline)))
      (do ()
          ((= r 1))
        (vector-set! count (1- r) r)
        (set! r (1- r)))
      (let ((flips2 (max (count-flips pi) flips)))
        (let ((result
               (let loop2 ()
                 (if (= r n)
                     flips2
                     (let ((perm0 (vector-ref pi 0)))
                       (do ((i 0))
                           ((>= i r))
                         (let ((j (1+ i)))
                           (vector-set! pi i (vector-ref pi j))
                           (set! i j)))
                       (vector-set! pi r perm0)
                       (vector-set! count r (1- (vector-ref count r)))
                       (if (<= (vector-ref count r) 0)
                           (begin
                             (set! r (1+ r))
                             (loop2))
                           #f))))))
          (or result
              (loop flips2 (1+ perms))))))))

(define (main arg)
  (let ((n (string->number arg)))
    (if (not (integer? n))
        (begin (display "An integer is required") (newline) 2)
        (display (string-append "Pfannkuchen(" arg ") = " (number->string (fannkuch n)) "\n")))))


