"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Paolo Bonzini *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor:'benchmarks-game'!

main
   | n f |
   n := Smalltalk commandLineArguments last asNumber.
   f := self fannkuch: n to: Stdout.
   Stdout
      nextPutAll: 'Pfannkuchen(', n printString, ') = ';
      print: f; cr.
!

fannkuch: n to: output
   ^(PermGenerator new: n) maxPfannkuchenTo: output
! !

"* SPLITFILE=PermGenerator.st *"!

Object subclass:#PermGenerator
   instanceVariableNames:'timesRotated perm atEnd'
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!PermGenerator class methodsFor:'instance creation'!

new: size
   ^self new
      initialize: size;
      yourself
! !

!PermGenerator methodsFor:'initialize-release'!

initialize: size
   perm := (1 to: size) asArray.
   timesRotated := Array new: size withAll: 0.
   atEnd := false
! !

!PermGenerator methodsFor:'accessing'!

atEnd
   ^atEnd
!

next
   | result |
   result := perm copy.
   self makeNext.
   ^result
! !

!PermGenerator methodsFor:'benchmarks-game'!

maxPfannkuchenTo: output
   | max permutation check |
   max := 0.
   check := 0.
   [self atEnd] whileFalse:
      [permutation := self next.
      check < 30 ifTrue:
         [permutation do: [:each | output print: each].
         output cr.
         check := check + 1].
      max := max max: (self pfannkuchen: permutation)].
   ^max
!

pfannkuchen: anArray
   | first complement a b k |
   k := 0.
   [ (first := anArray at: 1) == 1 ] whileFalse: [
      k := k + 1.
      complement := first + 1.
      1 to: first // 2 do: [ :i |
         a := anArray at: i.
         b := anArray at: complement - i.
         anArray at: i put: b.
         anArray at: complement - i put: a.
      ]
   ].
   ^k
!

makeNext
   | temp remainder |
   "* Generate the next permutation. *"
   2 to: perm size do: [ :r |
      "* Rotate the first r items to the left. *"
      temp := perm at: 1.
      1 to: r - 1 do: [ :i | perm at: i put: (perm at: i + 1) ].
      perm at: r put: temp.

      remainder := timesRotated at: r put: ((timesRotated at: r) + 1) \\ r.
      remainder = 0 ifFalse: [ ^self ].

      "* After r rotations, the first r items are in their original positions.
      Go on rotating the first r+1 items. *"
   ].

   "* We are past the final permutation. *"
   atEnd := true
! !
