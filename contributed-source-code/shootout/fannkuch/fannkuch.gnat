-----------------------------------------------------------------------
-- The Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- converted to Ada by Jim Rogers
-- compile: gcc -c -gnatwu -O2 -gnatn -funroll-loops -gnatp fannkuch.adb
-----------------------------------------------------------------------
with Ada.Command_Line; use Ada.Command_Line;
with Ada.Text_Io; use Ada.Text_Io;

procedure Fannkuch is
   package Pos_Io is new Ada.Text_Io.Integer_Io(Positive);
   use Pos_IO;
   type Perm_Array is array(Natural range <>) of Natural;
   procedure Swap(A, B : in out Natural) is
      Temp : Natural := A;
   begin
      A := B;
      B := Temp;
   end Swap;
   
   function Fann(N : Positive) return Natural is
      M        : Natural := N - 1;
      Perm     : Perm_Array(0..M);
      Perm1    : Perm_Array(0..M);
      Count    : Perm_Array(0..M);
      Max_Flips_Count : Natural:= 0;
      R        : Natural := N;
      Check    : Natural := 0;
   begin
      for I in Perm1'range loop
         Perm1(I) := I;
      end loop;
      loop
         if Check < 30 then
            for I in Perm1'range loop
               Put(Item => Perm1(I) + 1, Width => 1);
            end loop;
            New_Line;
            Check := Check + 1;
         end if;
         while R /= 1 loop
            Count(R - 1) := R;
            R := R - 1;
         end loop;
         if not (Perm1(0) = 0 or Perm1(M) = M) then
            Perm := Perm1;
            declare
               Flips_Count : Natural := 0;
               K           : Natural;
            begin
               loop
                  K := Perm(0);
                  exit when K = 0;
                  for I in 0..((K + 1)/2 -1) loop
                     Swap(Perm(I), Perm(K - I));
                  end loop;
                  Flips_Count := Flips_Count + 1;
               end loop;
               if Flips_Count > Max_Flips_Count then
                  Max_Flips_Count := Flips_Count;
               end if;
            end;
         end if;
         loop
            if R = N then 
               return Max_Flips_Count;
            end if;
            declare
               Perm0 : Natural := Perm1(0);
               J : Natural;
               I : Natural := 0;
            begin
               while I < R loop
                  J := I + 1;
                  Perm1(I) := Perm1(J);
                  I := J;
               end loop;
               Perm1(r) := Perm0;
            end;
            Count(R) := Count(R) - 1;
            exit when Count(R) > 0;
            r := R + 1;
         end loop;
      end loop;
   end Fann;
   Num : Positive := 7;
   Result : Positive;
begin
   if Argument_Count > 0 then
      Num := Positive'Value(Argument(1));
   end if;
   Result := Fann(Num);
   Put("Pfannkuchen(" );
   Put(Item => Num, Width => 0);
   Put(") = ");
   Put(Item => Result, Width => 0);
   New_Line;
end Fannkuch;

