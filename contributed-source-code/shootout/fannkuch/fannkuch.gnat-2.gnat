-- The Computer Language Benchmarks Game
-- http://shootout.alioth.debian.org/
--
-- Based on code by Dave Fladebo, Eckehard Berns and Heiner Marxen.
-- Based on the ATS version by Hongwei Xi,
-- and the Java version by The Anh Tran.
-- Contributed by Jonathan Parker.
--

with Ada.Command_Line;
with Ada.Text_Io; use Ada.Text_Io;

procedure Fannkuch is

   Multitasking_Version_Desired : constant Boolean := True;

   type Fann_Int is mod 2**64;

   N_image : constant String   := Ada.Command_Line.Argument (1);
   N       : constant Fann_Int := Fann_Int'Value (N_image);

   pragma Assert (N > 0, "Input argument N must be integer > 0.");

   Fann_First : constant Fann_Int := Fann_Int'First;
   Fann_Last  : constant Fann_Int := Fann_Int'First + (N - 1);

   subtype Perm_Index is Fann_Int range Fann_First .. Fann_Last;
   type Permutation is array(Perm_Index) of Fann_Int;

   subtype R_Range is Fann_Int range Fann_First .. Fann_Last-1;

   procedure Get_Count_of_Flips
     (Perm1      : in     Permutation;
      Flip_Count :    out Fann_Int)
   is 
      j, k, tmp : Fann_Int;
      P_1st     : Fann_Int    := Perm1(Fann_First);
      Perm      : Permutation := Perm1;
   begin
      Flip_Count := 0;

      while P_1st /= Fann_First loop  -- Flip until P_1st = Fann_First
         k := P_1st - 1;
         j := Fann_First + 1;
         while j < k loop
            tmp     := Perm(j);
            Perm(j) := Perm(k);
            j := j + 1;
            Perm(k) := tmp;
            k := k - 1;
         end loop;
         tmp         := Perm(P_1st);
         Perm(P_1st) := P_1st;
         P_1st       := tmp;
         Flip_Count  := Flip_Count + 1;
      end loop;
   end Get_Count_of_Flips;

   procedure Get_Another_Permutation
     (Perm       : in out Permutation;
      R_Position : in     Fann_Int)
   is
      tmp : Fann_Int := Perm(Fann_First);
      i   : Fann_Int := Fann_First;
   begin
      while i < R_Position loop
         Perm(i) := Perm(i+1);
         i := i + 1;
      end loop;
      Perm(R_Position) := tmp;
   end Get_Another_Permutation;

   function Max_No_of_Flips_Detected (R : in R_Range) return Fann_Int is
      R_strt, Flip_Count : Fann_Int;
      Perm, Count : Permutation := (others => Fann_Int'First);
      Max_Count : Fann_Int := 0;
   begin
      for m in Fann_First .. Fann_Last loop
         Perm(m) := m;
      end loop;
      Perm(R) := Fann_Last;
      Perm(Fann_Last) := R;

      for m in Fann_First .. Fann_Last loop
         Count(m) := m+1;
      end loop;

      R_strt := Fann_Last-1;
      while R_strt < Fann_Last loop

         Get_Another_Permutation (Perm, R_strt);

         Count(R_strt) := Count(R_strt) - 1;
         if Count(R_strt) > Fann_First then

            while R_strt > Fann_First+1 loop
               Count(R_strt-1) := R_strt;
               R_strt := R_strt - 1;
            end loop;

            if Perm(Fann_Last)  < Fann_Last and then
               Perm(Fann_First) > Fann_First
            then
               Get_Count_of_Flips (Perm, Flip_Count);
               if Flip_Count > Max_Count then  Max_Count := Flip_Count;  end if;
            end if;

         else
            R_strt := R_strt + 1;
         end if;

      end loop;

      return Max_Count;

   end Max_No_of_Flips_Detected;

   --  Uses original sequential method of enumerating permutations. Gives
   --  the right Max_Flips_Counted for N = 1 to 4, if No_of_Perms_to_Do = 30.

   procedure Print_Perms_and_Count_Flips 
     (No_of_Perms_to_Do : in     Fann_Int;
      Max_Flips_Counted :    out Fann_Int) 
   is
      Perm, Count : Permutation := (others => Fann_Int'First);
      F_1st : constant Fann_Int := Fann_Int'First;
      R : Fann_Int := Fann_Last + 1;
      Flip_Count : Fann_Int := 0;
   begin
      Max_Flips_Counted := 0;

      for m in Fann_First .. Fann_Last loop
         Perm(m) := m;
      end loop;

      Print_and_Count: for Lines in 1 .. No_of_Perms_to_Do loop

         for m in Fann_First .. Fann_Last loop
            declare
               Perm_Image : constant String := Fann_Int'Image (Perm(m)+1-F_1st);
            begin
               Put (Perm_Image(2..Perm_Image'Length));
            end;
         end loop;
         New_Line;

         while R > Fann_First+1 loop
            Count(R-1) := R;
            R := R-1;
         end loop;

         if Perm(Fann_Last) < Fann_Last and Perm(Fann_First) > Fann_First then
            Get_Count_of_Flips (Perm, Flip_Count);
            if Flip_Count > Max_Flips_Counted then 
               Max_Flips_Counted := Flip_Count; 
            end if;
         end if;

         Get_Next_Perm: loop
            exit Print_and_Count when R > Fann_Last;
            Get_Another_Permutation (Perm, R);
            Count(R) := Count(R) - 1;
            exit Get_Next_Perm when Count(R) > Fann_First;
            R := R + 1;
         end loop Get_Next_Perm;

      end loop Print_and_Count;

   end Print_Perms_and_Count_Flips;

   Store_of_Max_Flip_Counts : Permutation := (others => 0);
   Max_Flips, F, Initial_Count : Fann_Int := 0;

begin

   Print_Perms_and_Count_Flips 
     (No_of_Perms_to_Do => 30, 
      Max_Flips_Counted => Initial_Count);

   if N < 4 then -- use the above results, and terminate the procedure:
      Put ("Pfannkuchen("); Put (N_image); Put (") =");
      Put (Fann_Int'Image (Initial_Count));
      return;
   end if;

   if Multitasking_Version_Desired then

      declare  -- and launch 1 task for each R in R_Range:

         task type Flip_Counter is
            entry Start (R : in Fann_Int);
            entry Return_Result (Max_Flip_Count_for_R : out Fann_Int);
         end Flip_Counter;

         task body Flip_Counter is
            R_local, Count_for_R : Fann_Int;
         begin
            accept Start (R : in Fann_Int) do
               R_local := R;
            end Start;

            Count_for_R := Max_No_of_Flips_Detected (R_local);

            accept Return_Result (Max_Flip_Count_for_R : out Fann_Int) do
               Max_Flip_Count_for_R := Count_for_R;
            end Return_Result;
         end Flip_Counter;

         Counter : array(R_Range) of Flip_Counter; -- the tasks.

      begin 
         for R in R_Range loop
            Counter(R).Start (R);
         end loop;

         for R in R_Range loop
            Counter(R).Return_Result (F);
            Store_of_Max_Flip_Counts(R) := F;
         end loop;
      end;

   else   -- Sequential:
    
      for R in R_Range loop
         Store_of_Max_Flip_Counts(R) := Max_No_of_Flips_Detected (R);
      end loop;

   end if;

   Max_Flips := 0;
   for R in R_Range loop
      if Store_of_Max_Flip_Counts(R) > Max_Flips then
         Max_Flips := Store_of_Max_Flip_Counts(R);
      end if;
   end loop;

   Put ("Pfannkuchen("); Put (N_image); Put (") =");
   Put (Fann_Int'Image (Max_Flips));

end Fannkuch;
