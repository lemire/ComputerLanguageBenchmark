;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/

;; Derived by Michael D. Adams from the CMUCL varient, by Wade Humeniuk


(import (rnrs))

(define (write-permutation perm)
  (vector-for-each (lambda (i) (write (fx+ 1 i))) perm)
  (newline))

(define (fannkuch n)
  (let ((perm (make-vector n))
        (perm1 (make-vector n))
        (count (make-vector n))
        (flips 0)
        (flipsmax 0)
        (r n)
        (check 0))

    (do ((i 0 (fx+ 1 i)))
        ((eq? i n))
      (vector-set! perm1 i i))
    
    (let outer_loop ()

     (when (< check 30)
           (write-permutation perm1)
           (set! check (fx+ 1 check)))

     (let loop ()
       (vector-set! count (fx- r 1) r)
       (set! r (fx- r 1))
       (when (> r 1) (loop)))

     (unless (or (zero? (vector-ref perm1 0))
                 (eq? (fx- n 1) (vector-ref perm1 (fx- n 1))))
             (set! flips 0)
             (do ((i 0 (fx+ 1 i)))
                 ((eq? i n))
               (vector-set! perm i (vector-ref perm1 i)))
             (do ((k (vector-ref perm1 0) (vector-ref perm 0)))
                 ((zero? k))
               (do ((j (fx- k 1) (fx- j 1))
                    (i 1 (fx+ 1 i)))
                   ((>= i j))
                 (let ((i-val (vector-ref perm i))
                       (j-val (vector-ref perm j)))
                   (vector-set! perm j i-val)
                   (vector-set! perm i j-val)))
               (set! flips (fx+ 1 flips))
               (let ((new-k (vector-ref perm k)))
                 (vector-set! perm k k)
                 (vector-set! perm 0 new-k)))
             (set! flipsmax (max flipsmax flips)))

     (let loop ()
       (if (eq? r n)
           flipsmax
           (let ((perm0 (vector-ref perm1 0)))
             (do ((i 0 (fx+ 1 i)))
                 ((>= i r))
               (vector-set! perm1 i (vector-ref perm1 (fx+ 1 i))))
             (vector-set! perm1 r perm0)
             (vector-set! count r (fx- (vector-ref count r) 1))
             (if (> (vector-ref count r) 0)
                 (outer_loop)
                 (begin
                   (set! r (fx+ 1 r))
                   (loop)))))))))

(define (main args)
  (let ((n (string->number (cadr args))))
    (let ((x (fannkuch n)))
      (display "Pfannkuchen(") (display n) (display ") = ") (display x) (newline))))

(main (command-line))
