! The Great Computer Language Shootout
! http://shootout.alioth.debian.org/
!
! contributed by Steve Decker
! based on the D version by Dave Fladebo
! revised for new specification
! compilation:
!    gfortran -O3 -fomit-frame-pointer fannkuch.f90
!    ifort -O3 -ipo -static fannkuch.f90

program fannkuch
  implicit none

  integer :: n, i, r, flips, temp, j, k, maxFlipsCount = 0, curPerm = 1
  character(len=2) :: argv
  integer, dimension(:), allocatable :: perm, perm1, cnt

  call get_command_argument(1, argv)
  read (argv, *) n

  allocate(perm(n), perm1(n), cnt(n))

  ! Initialize permutation
  perm1 = (/ (i, i = 1, n) /)

  r = n + 1
  outer: do  ! For all n! permutations
     if (curPerm <= 30) then
        curPerm = curPerm + 1
        write(*,"(99(i0))") perm1
     end if
     do while (r > 2)
        cnt(r-1) = r
        r = r - 1
     end do
     if (perm1(1) > 1 .and. perm1(n) < n) then
        perm = perm1

        i = perm(1)
        flips = 0
        do while (i > 1)  ! Perform flips until first element is 1
           temp = perm(i)
           perm(i) = i
           i = temp
           j = 2; k = i - 1
           do while (j < k)
              temp = perm(j)
              perm(j) = perm(k)
              perm(k) = temp
              j = j + 1; k = k - 1
           end do
           flips = flips + 1  ! Count number of flips
        end do

        if (flips > maxFlipsCount) maxFlipsCount = flips
     end if
     do  ! Produce next permutation
        if (r == n+1) then
           write(*,"(2(a,i0))") "Pfannkuchen(", n, ") = ", maxFlipsCount
           exit outer
        end if

        temp = perm1(1)
        i = 1
        do while (i < r)
           j = i + 1
           perm1(i) = perm1(j)
           i = j
        end do
        perm1(r) = temp
        ! perm1(1:r) = cshift(perm1(1:r),1)
        ! could replace the previous 8 lines, but this is much slower.

        cnt(r) = cnt(r) - 1
        if (cnt(r) > 1) exit
        r = r + 1
     end do
  end do outer
end program fannkuch
