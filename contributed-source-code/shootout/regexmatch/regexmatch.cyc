/* -*- mode: c -*-
 * regexmatch.cyc
 * http://shootout.alioth.debian.org/
 */

#include <core.h>   /* these includes ensure we get Cyclone's libraries */
#include <stdio.h>  /* outside of the extern "C include".               */
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <assert.h>

/* Put the unsafe C interface in a separate namespace. */
namespace UnsafePcre {
extern "C include" {  /* tell Cyclone that <pcre.h> is C code */
#if defined(__CYGWIN__)
#include <pcre.h>     /* include the pcre C interface */
#else
#include "/usr/include/pcre.h"
#endif
  extern void *GC_malloc(int);
  extern void Cyc_Core_ufree(void *);
  void pcre_init() {
    pcre_malloc = GC_malloc;
    pcre_free= Cyc_Core_ufree;
  }
} cyclone_override {
  pcre *`U pcre_compile(const char @pattern, int options,
			const char *`H *errptr, int *erroffset,
			const unsigned char *tableptr);
  int pcre_exec(const pcre @code, const pcre_extra *extra, 
                const char *subject, int length,
		int startoffset, int options,
		int *ovector, int ovecsize);
  pcre_extra *pcre_study(const pcre @code, int options, const char *`H *errptr);
  int pcre_fullinfo(const pcre @code, const pcre_extra *extra, int what,
		    void *where);
} export { pcre_compile, pcre_study, pcre_fullinfo, pcre_exec, pcre_init, pcre_malloc, pcre_free; }
}

void dummy_prevent_treeshake(int *\U `H a) __attribute((consume(1))) {
  Core::ufree(a);
  UnsafePcre::pcre_malloc = 0;
  UnsafePcre::pcre_free = 0;
}

/* Make a nice wrapper for the unsafe C code */
namespace Pcre {
  typedef UnsafePcre::pcre pcre;
  typedef UnsafePcre::pcre_extra pcre_extra;

  /* wrapper for pcre_compile -- doesn't do much */
  pcre *`U pcre_compile(const char ?pattern, int options, 
			const char *`H *errptr, int *erroffset,
			unsigned char ?tableptr) {
    return UnsafePcre::pcre_compile(pattern, options, errptr, erroffset,
                                    tableptr);
  }

  /* wrapper for pcre_exec -- checks that sizes and offsets are in bounds */
  int pcre_exec(const pcre @code, const pcre_extra *extra, 
                const char ?subject, int length, int startoffset,
                int options, int ?ovector, int ovecsize) {
    assert(length >= 0 && numelts(subject) >= length);
    assert(startoffset == 0 || (startoffset > 0 && startoffset < length));
    assert(ovecsize >= 0 && numelts(ovector) >= ovecsize);
    return UnsafePcre::pcre_exec(code, extra, subject, length, startoffset,
                                 options, ovector, ovecsize);
  }

  pcre_extra *pcre_study(const pcre @code, int options, const char*`H *errptr) {
    return UnsafePcre::pcre_study(code,options,errptr);
  }

  /* FIX: hack for now; should be a variant */
  int pcre_fullinfo(const pcre @code, const pcre_extra *extra, int what, int @where) {
    return UnsafePcre::pcre_fullinfo(code,extra,what,where);
  }
}

/* Open up the safe Pcre namespace for the client */
using Pcre;
void *(*pcre_malloc)(size_t);  
void (*pcre_free)(void *);

#define MAXLINES   100
#define MAXLINELEN 132

const char @pattern = 
"(?:^|[^\\d\\(])"		/* must be preceeded by non-digit */
"(\\()?"			/* match 1: possible initial left paren */
"(\\d\\d\\d)"			/* match 2: area code is 3 digits */
"(?(1)\\))"			/* if match1 then match right paren */
"[ ]"				/* area code followed by one space */
"(\\d\\d\\d)"			/* match 3: prefix of 3 digits */
"[ -]"				/* separator is either space or dash */
"(\\d\\d\\d\\d)"		/* match 4: last 4 digits */
"\\D"				/* must be followed by a non-digit */
;


int
main(int argc, char ??argv) {
    int NUM = ((argc == 2) ? atoi(argv[1]) : 1);
    int count;
    char ? @nozeroterm cptr = NULL;
    char ??phones;
    const pcre *re;
    int erroffset;
    const char *errptr = NULL;
    int n, lines = 0;
    char num[256];
    int i, j, k, matchlen;
    char *matchoffset;
    int nmatches;
    int ?ovec, ovecsize;
    pcre_extra *study;

    UnsafePcre::pcre_init();
    phones = malloc(MAXLINES * sizeof(char ?));
    if (!phones) {
	fprintf(stderr, "malloc for phones array failed\n");
	exit(1);
    }
    lines = 0;
    do {
	phones[lines] = malloc(MAXLINELEN+1);
	if (!phones[lines]) {
	    fprintf(stderr, "malloc to hold line #%d failed\n", lines);
	    exit(1);
	}
	cptr = fgets(phones[lines], MAXLINELEN, stdin);
	lines++;
	if (lines > MAXLINES) {
	    fprintf(stderr, "MAXLINES is too small\n");
	    exit(1);
	}
    } while (cptr);

    re = pcre_compile(pattern, 0, &errptr, &erroffset, NULL);
    if (!re) {
	fprintf(stderr, "can't open compile regexp\n");
	exit(1);
    }

    study = pcre_study((const pcre @)re, 0, &errptr);

    if (pcre_fullinfo((const pcre @)re, NULL, PCRE_INFO_CAPTURECOUNT, &nmatches) != 0) {
	fprintf(stderr, "pcre_fullinfo failed\n");
	exit(1);
    }
    nmatches++;			/* add match of entire pattern */

    ovecsize = nmatches * 3;
    ovec = malloc(sizeof(int) * ovecsize);
    if (!ovec) {
	fprintf(stderr, "malloc for ovec array failed\n");
	exit(1);
    }

    count = 0;
    while (NUM--) {
	for (i=0; i<lines; i++) {
	    n = pcre_exec((const pcre @)re, study,
			  phones[i], strlen(phones[i]), 0,
			  0, ovec, ovecsize);
	    if (n == nmatches) {
		/* stuff the match into the buffer "num" */
		k = 2*2;	/* initial offset into ovec */
		/* areacode */
		j = 0;
		num[j++] = '(';
		matchoffset = phones[i] + ovec[k];
		matchlen = ovec[k+1] - ovec[k];
		strncpy(num+j, matchoffset, matchlen);
		j += matchlen; k += 2;
		num[j++] = ')';
		/* space separator */
		num[j++] = ' ';
		/* exchange */
		matchoffset = phones[i] + ovec[k];
		matchlen = ovec[k+1] - ovec[k];
		strncpy(num+j, matchoffset, matchlen);
		j += matchlen; k += 2;
		/* dash */
		num[j++] = '-';
		/* last 4 digits */
		matchoffset = phones[i] + ovec[k];
		matchlen = ovec[k+1] - ovec[k];
		strncpy(num+j, matchoffset, matchlen);
		j += matchlen; k += 2;
		/* with a cherry on top */
		num[j] = 0;
		if (0 == NUM) {
		    count++;
		    printf("%d: %s\n", count, num);
		}
	    }
	}
    }

    for (i=0; i<MAXLINES; i++) {
	free(phones[i]);
    }
    free(phones);
    free(ovec);

    return(0);
}

