\ -*- mode: forth -*-
\ $Id$
\ http://www.bagley.org/~doug/shootout/

\ from Anton Ertl, fixes by Ian Osgood:
\ this uses the Gray parser generator, which is probably too big a
\ cannon for this problem (it also needs a lot of setup code).
\ Writing a recursive descent parser by hand is probably both smaller
\ and faster in this case.


0. argc @ 1- arg >number 2drop drop constant NUM

warnings off \ Gray is a little wordy

require gray.fs

: bit-equiv ( w1 w2 -- w3 )
    \ w3=~w1^w2
    invert xor ;

: set-complement ( set1 -- set2 )
    empty ['] bit-equiv binary-set-operation ;

variable input \ pointer to next character to be scanned
variable end-input \ pointer to end of input
-1 constant eof-char

: start ( -- addr )
    input @ ;

: end ( addr -- addr u )
    input @ over - ;

: get-input ( -- c )
    start end-input @ = if
        eof-char
    else
        start c@
    endif ;

256 max-member
s" scan failed" exception constant scanfail

: ?nextchar ( f -- )
    0= scanfail and throw
    1 chars input +! ;
    
: testchar? ( set -- f )
    get-input member? ;
' testchar? test-vector !

: .. ( c1 c2 -- set )
 ( creates a set that includes the characters c, c1<=c<=c2 )
 empty copy-set
 swap 1+ rot do
  i over add-member
 loop ;

: ` ( "c" -- terminal )
    \ creates anonymous terminal for the character c )
    char singleton ['] ?nextchar make-terminal ;

char 0 char 9 .. dup  ' ?nextchar  terminal digit
set-complement        ' ?nextchar  terminal nondigit
bl singleton          ' ?nextchar  terminal lspace

2variable areacode
2variable exchange
2variable last4

(( {{ start }} digit digit digit {{ end areacode 2! }} ))
<- area-code

(( (( ` ( area-code ` ) || area-code ))
   lspace {{ start }} digit digit digit {{ end exchange 2! }}
   (( lspace || ` - ))
   {{ start }} digit digit digit digit {{ end last4 2! }}
   nondigit
)) <- telnum ( -- )

telnum parser scan-telnum ( -- )

: scan-for-nondigit ( addr1 -- addr2 )
    begin
        count ( c@+ ) >r
        r@ '0 < r@ '9 > or  r> '( <>  and
        over end-input @ u>= or
    until ;

variable count  0 count !

defer on-match  ' noop is on-match

: output-match ( -- )
    1 count +! count @ 1 u.r ." : "
    ." (" areacode 2@ type ." ) " exchange 2@ type ." -" last4 2@ type cr ;

: scanfile ( addr u -- )
    over + end-input !
    begin ( addr1 )
        dup input !
        ['] scan-telnum catch
        dup dup scanfail <> and throw
        if ( addr1 )
            scan-for-nondigit
        else
            on-match
            end-input @ over - #lf scan drop \ skip rest of line
        endif
        dup end-input @ u>=
    until
    drop ;

: mainloop ( addr u -- )
    NUM 1 +do
        2dup scanfile
    loop
    ['] output-match [is] on-match
    scanfile ;
    
stdin slurp-fid mainloop bye

