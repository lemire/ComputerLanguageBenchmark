(* regexmatch.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 * This program uses the Str module that comes with OCaml standard
 * distribution.
 *)

open Printf

let re = Str.regexp (
  "[^0-9(]*" (* must be preceded by non-digit *)
  ^ "\\(([0-9][0-9][0-9])\\|[0-9][0-9][0-9]\\)" (* match1: area code *)
  ^ " \\([0-9][0-9][0-9]\\)[ -]" (* space, prefix=3 digits, separator *)
  ^ "\\([0-9][0-9][0-9][0-9]\\)\\([^0-9]\\|$\\)" (* 4 digits, non-digit *)
)

(* Read all the lines from stdin *)
let phones =
  let lines = ref [] in
  try  while true do lines := (input_line stdin) :: !lines done; assert(false)
  with End_of_file -> List.rev !lines

let check_phone must_print count line =
  if Str.string_match re line 0 then (
    let area = Str.matched_group 1 line
    and prefix = Str.matched_group 2 line
    and digits = Str.matched_group 3 line in
    let num = (if area.[0] = '(' then sprintf "%s %s-%s"
	       else sprintf "(%s) %s-%s") area prefix digits in
    if must_print then (incr count; printf "%i: %s\n" !count num)
  )

let () =
  let n = try int_of_string(Array.get Sys.argv 1) with _ -> 1 in
  List.iter (check_phone true (ref 0)) phones;
  for i = 2 to n do List.iter (check_phone false (ref 0)) phones done

