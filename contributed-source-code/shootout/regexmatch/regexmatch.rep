#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id$
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system rep.regexp)

  (defvar regexp (concat
		  "(^|[^0-9\\(])"	; preceeding non-digit or bol
		  "("			; area code
		  "\\(([0-9][0-9][0-9])\\)" ; is either 3 digits in parens
		  "|"			; or
		  "([0-9][0-9][0-9])"	; just 3 digits
		  ")"			; end of area code
		  " "			; area code is followed by one space
		  "([0-9][0-9][0-9])"	; exchange is 3 digits
		  "[ -]"		; separator is either space or dash
		  "([0-9][0-9][0-9][0-9])" ; last 4 digits
		  "[^0-9]"		; must be followed by a non-digit
		  ))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (phones '()))
    (let ((line))
      (while (setq line (read-line))
	(setq phones (append phones (list line)))))
    (while (> n 0)
      (setq n (1- n))
      (let ((count 0))
	(mapc (lambda (line)
		(if (string-match regexp line)
		    (let ((num (expand-last-match "(\\3\\4) \\5-\\6")))
		      (setq count (1+ count))
		      (if (= 0 n)
			  (format standard-output "%d: %s\n" count num)))))
	      phones)))))
