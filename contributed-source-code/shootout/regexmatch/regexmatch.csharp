/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy 
   fixed by TJ Fontaine   
*/

using System;
using System.Text.RegularExpressions;

class regexmatch
{
   static void Main(string[] args){
      // Get the number of iterations
      int n = 0;
      if (args.Length > 0) n = Int32.Parse(args[0]);

      Regex r = new Regex(
         "(?: ^ | [^\\d\\(])" +   // must be preceeded by non-digit
         "( \\( )?" +         // match 1: possible initial left paren
         "(\\d\\d\\d)" +         // match 2: area code is 3 digits
         "(?(1) \\) )" +         // if match1 then match right paren
         "[ ]" +               // area code followed by one space
         "(\\d\\d\\d)" +         // match 3: prefix of 3 digits
         "[ -]" +            // separator is either space or dash
         "(\\d\\d\\d\\d)" +      // match 4: last 4 digits
         "\\D"               // must be followed by a non-digit
         ,RegexOptions.IgnorePatternWhitespace | RegexOptions.Compiled | RegexOptions.Multiline);

      String phoneNumbers = Console.In.ReadToEnd();
      int count = 0;
      Match m;
   		
      while (n-- > 0)
         for (m = r.Match(phoneNumbers); m.Success; m = m.NextMatch()) {
            if (n == 1) // counting-down 1 is the last iteration
               Console.WriteLine("{0}: ({1}) {2}-{3}",
                  ++count, m.Groups[2].Value, m.Groups[3].Value, m.Groups[4].Value);
         }
   }
}

