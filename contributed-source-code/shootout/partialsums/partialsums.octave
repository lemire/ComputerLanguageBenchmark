# $Id$

# This is a direct Octave translation of the C implimentation of partial-sums
# contributed by Mike Pall.

global n = str2num(argv{1});

global sum = 0;
for k = 0:n
    sum = sum + (2 / 3)**k;
endfor
printf("%.9f\t(2/3)^k\n", sum);

sum = 0;
for k = 1:n
    sum = sum + 1 / sqrt(k);
endfor
printf("%.9f\tk^-0.5\n", sum);

sum = 0;
for k = 1:n
    sum = sum + 1 / (k * (k + 1));
endfor
printf("%.9f\t1/k(k+1)\n", sum);

sum = 0;
for k = 1:n
    sink = sin(k);
    sum = sum + 1 / (k * k * k * sink * sink);
endfor
printf("%.9f\tFlint Hills\n", sum);

sum = 0;
for k = 1:n
    cosk = cos(k);
    sum = sum + 1 / ((k * k) * k * cosk * cosk);
endfor
printf("%.9f\tCookson Hills\n", sum);

sum = 0;
for k = 1:n
    sum = sum + 1 / k;
endfor
printf("%.9f\tHarmonic\n", sum);

sum = 0;
for k = 1:n
    sum = sum + 1.0 / (k * k);
endfor
printf("%.9f\tRiemann Zeta\n", sum);

sum = 0;
k = 1;
while (k <= (n-1) )
    sum = sum + 1 / k;
    k = k + 2;
endwhile
k=2;
while (k <= n)
    sum = sum - 1.0/k;
    k = k + 2;
endwhile
printf("%.9f\tAlternating Harmonic\n", sum);

sum = 0.0;
k=1;
while (k <= 2*(n-1))
    sum = sum + 1 / k;
    k = k + 4;
endwhile
k = 3;
while (k <= 2*n)
    sum = sum - 1 / k;
    k = k + 4;
endwhile
printf("%.9f\tGregory\n", sum);
