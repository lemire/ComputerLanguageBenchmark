(* 
   The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Anthony Borla
*)

structure Test : sig
  val main : (string * string list) -> OS.Process.status
end = struct

  fun sum n =
    let
      val twothirds = 2.0 / 3.0

      fun sum' (k, n, alt, a1, a2, a3, a4, a5, a6, a7, a8, a9) =
        if k > n then
          (a1, a2, a3, a4, a5, a6, a7, a8, a9)
        else
          let
            val k2 = k * k
            val k3 = k2 * k
            val s1 = Math.sin k
            val s2 = s1 * s1
            val c1 = Math.cos k
            val c2 = c1 * c1
          in
            sum'
              (k + 1.0,
               n,
               ~alt,
               a1 + Math.pow(twothirds, k - 1.0),
               a2 + 1.0 / Math.sqrt(k),
               a3 + 1.0 / (k * (k + 1.0)),
               a4 + 1.0 / (k3 * s2),
               a5 + 1.0 / (k3 * c2),
               a6 + 1.0 / k,
               a7 + 1.0 / k2,
               a8 + alt / k,
               a9 + alt / (2.0 * k - 1.0))
          end
    in
      sum' (1.0, (Real.fromInt n), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    end

  fun main' n =
    let
      val (a1, a2, a3, a4, a5, a6, a7, a8, a9) = sum n

      open Format
    in

      formatf "%.9f\t(2/3)^k\n\
              \%.9f\tk^-0.5\n\
              \%.9f\t1/k(k+1)\n\
              \%.9f\tFlint Hills\n\
              \%.9f\tCookson Hills\n\
              \%.9f\tHarmonic\n\
              \%.9f\tRiemann Zeta\n\
              \%.9f\tAlternating Harmonic\n\
              \%.9f\tGregory\n"

      print [REAL a1, REAL a2, REAL a3, REAL a4,
             REAL a5, REAL a6, REAL a7, REAL a8,
             REAL a9];

      OS.Process.success
    end

  fun main (_, []) = main' 1
    | main (_, arg :: _) = main' (getOpt (Int.fromString arg, 1))

end

