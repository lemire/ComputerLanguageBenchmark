/* ------------------------------------------------------------------ */
/* The Great Computer Language Shootout                               */
/* http://shootout.alioth.debian.org/                                 */
/*                                                                    */
/* Based on D language implementation by Dave Fladebo                 */
/*                                                                    */
/* Use of C library routines [requires interpreter GCI activation else*/
/* runtime error occurs]                                              */
/*                                                                    */
/* Contributed by Anthony Borla                                       */
/* ------------------------------------------------------------------ */

numeric digits 18

/* ----------------------------- */

call initSqrt ; call initSin ; call initCos

/* ----------------------------- */

N = ARG(1) ; if DATATYPE(N) \= 'NUM' | N < 1 then ; N = 1

SPACE = " " ; SUM. = 0.0 ; SUM.0 = 9 ; ALT = 1

do D = 1 for N
  D2 = D * D ; D3 = D2 * D ; DS = SIN(D) ; DC = COS(D)

  SUM.1 = SUM.1 + (2 / 3) ** (D - 1)
  SUM.2 = SUM.2 + 1 / SQRT(D)
  SUM.3 = SUM.3 + 1 / (D * (D + 1))
  SUM.4 = SUM.4 + 1 / (D3 * DS * DS)
  SUM.5 = SUM.5 + 1 / (D3 * DC * DC)
  SUM.6 = SUM.6 + 1 / D
  SUM.7 = SUM.7 + 1 / D2
  SUM.8 = SUM.8 + ALT / D
  SUM.9 = SUM.9 + ALT / (2 * D - 1)

  ALT = -ALT
end

say LEFT(FORMAT(SUM.1,, 9), 16, SPACE) || "(2/3)^k"
say LEFT(FORMAT(SUM.2,, 9), 16, SPACE) || "k^-0.5"
say LEFT(FORMAT(SUM.3,, 9), 16, SPACE) || "1/k(k+1)"
say LEFT(FORMAT(SUM.4,, 9), 16, SPACE) || "Flint Hills"
say LEFT(FORMAT(SUM.5,, 9), 16, SPACE) || "Cookson Hills"
say LEFT(FORMAT(SUM.6,, 9), 16, SPACE) || "Harmonic"
say LEFT(FORMAT(SUM.7,, 9), 16, SPACE) || "Riemann Zeta"
say LEFT(FORMAT(SUM.8,, 9), 16, SPACE) || "Alternating Harmonic"
say LEFT(FORMAT(SUM.9,, 9), 16, SPACE) || "Gregory"

exit 0

/* ----------------------------- */

initSqrt : procedure
  sqrt.calltype = 'cdecl as function with parameters'
  sqrt.return.type = 'float64'
  sqrt.return.name = 'return value'

  sqrt.0 = 1

  sqrt.1.type = 'float64'
  sqrt.1.name = 'number'

  LIBRARY = 'libm.so.6' ; parse source SYSTEM . .
  if SYSTEM == "WIN32" then ; LIBRARY = 'msvcrt' 

  err = rxFuncDefine('sqrt', LIBRARY, 'sqrt', 'sqrt.')

  if err \= 0 then
    say "Error registering function 'sqrt'"

  return

/* ----------------------------- */

initSin : procedure
  sin.calltype = 'cdecl as function with parameters'
  sin.return.type = 'float64'
  sin.return.name = 'return value'

  sin.0 = 1

  sin.1.type = 'float64'
  sin.1.name = 'number'

  LIBRARY = 'libm.so.6' ; parse source SYSTEM . .
  if SYSTEM == "WIN32" then ; LIBRARY = 'msvcrt' 

  err = rxFuncDefine('sin', LIBRARY, 'sin', 'sin.')

  if err \= 0 then
    say "Error registering function 'sin'"

  return

/* ----------------------------- */
    
initCos : procedure
  cos.calltype = 'cdecl as function with parameters'
  cos.return.type = 'float64'
  cos.return.name = 'return value'

  cos.0 = 1

  cos.1.type = 'float64'
  cos.1.name = 'number'

  LIBRARY = 'libm.so.6' ; parse source SYSTEM . .
  if SYSTEM == "WIN32" then ; LIBRARY = 'msvcrt' 

  err = rxFuncDefine('cos', LIBRARY, 'cos', 'cos.')

  if err \= 0 then
    say "Error registering function 'cos'"

  return

