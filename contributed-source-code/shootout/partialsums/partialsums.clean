/* The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy (Clean novice)
   modified by Arjen van Weelden */
   
module partialsums

import StdEnv, LanguageShootout

Start = foldl pretty "" (sigma 1 argi 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 (2.0 / 3.0))

pretty s (sum, name) = s +++ toStringWith 9 sum +++ "\t" +++ name +++ "\n"

sigma :: !Int !Int !Real !Real !Real !Real !Real !Real !Real !Real !Real !Real !Real -> [(Real, String)]
sigma i n s1 s2 s3 s4 s5 s6 s7 s8 s9 alt twoByThree
	| i <= n = sigma (i + 1) n
				(s1 + twoByThree ^ (k - 1.0))
				(s2 + 1.0 / (sqrt k))
				(s3 + 1.0 / (k * (k + 1.0)))
				(s4 + 1.0 / (k3 * sqr (sin k)))
				(s5 + 1.0 / (k3 * sqr (cos k)))
				(s6 + 1.0 / k)
				(s7 + 1.0 / k2)
				(s8 + alt / k)
				(s9 + alt / (2.0 * k - 1.0))
				(~ alt) twoByThree 
	| otherwise = [(s1, "(2/3)^k"), (s2, "k^-0.5"), (s3, "1/k(k+1)"), 
				(s4, "Flint Hills"), (s5, "Cookson Hills"), (s6, "Harmonic"), 
				(s7, "Riemann Zeta"), (s8, "Alternating Harmonic"), (s9, "Gregory")]
where
	k = toReal i
	k2 = sqr k
	k3 = k2 * k

sqr x :== x * x
