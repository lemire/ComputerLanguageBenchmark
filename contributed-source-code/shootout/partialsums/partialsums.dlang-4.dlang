/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Dave Fladebo
   compile: dmd -O -inline -release partialsums.d
*/

import std.math, std.stdio, std.string;

void main(char[][] args)
{
    double n = (args.length > 1 ? atoi(args[1]) : 0) + 1, alt = 1;
    double sum0=0, sum1=0, sum2=0, sum3=0, sum4=0, sum5=0, sum6=0, sum7=0, sum8=0;

    for(double d = 1; d < n; d++, alt = -alt)
    {
        double d2 = d * d, d3 = d2 * d;
        double ds = sin(d), dc = cos(d);

        sum0 += pow(2 / 3.0L,cast(uint)d - 1);
        sum1 += 1 / sqrt(d);
        sum2 += 1 / (d * (d + 1));

        //  Flint Hills
        sum3 += 1 / (d3 * ds * ds);
        //  Cookson Hills
        sum4 += 1 / (d3 * dc * dc);

        //  Harmonic
        sum5 += 1 / d;
        //  Riemann Zeta
        sum6 += 1 / (d2);

        //  Alternating Harmonic
        sum7 += alt / d;
        //  Gregory
        sum8 += alt / (2 * d - 1);
    }

    writefln("%0.9f\t(2/3)^k", sum0);
    writefln("%0.9f\tk^-0.5", sum1);
    writefln("%0.9f\t1/k(k+1)", sum2);
    writefln("%0.9f\tFlint Hills", sum3);
    writefln("%0.9f\tCookson Hills", sum4);
    writefln("%0.9f\tHarmonic", sum5);
    writefln("%0.9f\tRiemann Zeta", sum6);
    writefln("%0.9f\tAlternating Harmonic", sum7);
    writefln("%0.9f\tGregory", sum8);
}
