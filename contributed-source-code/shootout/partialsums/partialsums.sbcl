;;; The Computer Language Shootout
;;; http://shootout.alioth.debian.org/
;;;
;;; Contributed by: Shyamal Prasad, modified by Albert Krewinkel

(in-package :bleifreidenker)
(defmacro partial-sum-to-n ((partial-sum-name iter-start &optional alternating)
                            &body body)
  ;; The variable capture of k, a and n is intended
  (let ((k-fixnum (gensym)))
   `(format t ,(format nil "~~,9f~A~A~~%" #\tab partial-sum-name)
     (loop 
        ,@(when alternating
                '(initially (setf a -1d0)
                  for a double-float = (- a)))
        for ,k-fixnum fixnum from ,iter-start to n
        sum (symbol-macrolet ((k (coerce ,k-fixnum 'double-float)))
              ,@body)
        double-float))))

(declaim (inline ^2 ^3))
(defun ^2 (x) (declare (double-float x)) (the double-float (* x x)))
(defun ^3 (x) (declare (double-float x)) (the double-float (* x x x)))

(defun main (&optional
	     (n (parse-integer
		 (or (car (last #+sbcl sb-ext:*posix-argv*
				#+cmu  extensions:*command-line-strings*))))))
  (declare (fixnum n)
	   (optimize (speed 3) (compilation-speed 0) (safety 0) (debug 0)))
  (macrolet ((partial-sum-list (&rest partsum-list)
               `(progn
                  ,@(loop for (name start expr alternate) in partsum-list
                       collect `(partial-sum-to-n (,name ,start ,alternate)
                                  ,expr)))))
    (partial-sum-list 
     ("(2/3)^k"       0    (expt #.(coerce 2/3 'double-float) k))
     ("k^-0.5"        1    (/ 1.0d0 (sqrt k)))
     ("1/k(k+1)"      1    (/ 1d0   (* k (+ k 1d0))))
     ("Flint Hills"   1    (/ 1.0d0 (* (^3 k)
                                       (^2 (sin k)))))
     ("Cookson Hills" 1    (/ 1d0   (* (^3 k) (^2 (cos k)))))
     ("Harmonic"      1    (/ 1d0   k))
     ("Riemann Zeta"  1    (/ 1d0   (^2 k)))
     ("Alternative Harmonic"   1  (/ a k)           t)
     ("Gregory"       1    (/ a (- (* 2d0 k) 1d0))  t))))
