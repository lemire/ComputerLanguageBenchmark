(* The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Scott Cruzen
*)

open Real.Math

val n = valOf (Int.fromString (hd (CommandLine.arguments())))

fun nsum (i,f1,r1,f2,r2,f3,r3,f4,r4,f5,r5,f6,r6,f7,r7,f8,r8,f9,r9,a:real) =
   let val k = Real.fromInt i in
      if i <= n then nsum (i + 1, f1, f1 (k - 1.0, r1), f2, f2 (k, r2), f3, f3 (k, r3),
         f4, f4 (k, r4), f5, f5 (k, r5), f6, f6 (k, r6), f7, f7 (k, r7),
         f8, f8 (k, r8, a), f9, f9 (k, r9, a), ~a)
      else
         [f1 (k - 1.0, r1), r2, r3, r4, r5, r6, r7, r8, r9] end

val _ = map (fn (s,x) => print(concat[Real.fmt (StringCvt.FIX (SOME 9)) x,"\t",s,"\n"]))
   (ListPair.zip (["(2/3)^k", "k^-0.5", "1/k(k+1)", "Flint Hills", "Cookson Hills",
                   "Harmonic", "Riemann Zeta", "Alternating Harmonic", "Gregory"],
      nsum (1, (fn (k, r) => r + pow(2.0 / 3.0, k)), 0.0,
         (fn (k, r) => r + 1.0 / sqrt k), 0.0,
         (fn (k, r) => r + 1.0 / (k * (k + 1.0))), 0.0,
         (fn (k, r) => r + 1.0 / (k * k * k * sin k * sin k)), 0.0,
         (fn (k, r) => r + 1.0 / (k * k * k * cos k * cos k)), 0.0,
         (fn (k, r) => r + 1.0 / k), 0.0, (fn (k, r) => r + 1.0 / (k * k)), 0.0,
         (fn (k, r, a) => r + a / k), 0.0,
         (fn (k, r, a) => r + a / (2.0 * k - 1.0)), 0.0, 1.0)))
