(* partialsums.ml
 *
 * The Computer Language Benchmarks Game
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Christophe TROESTLER
 * modified by Edgar Friendly for speed (using
 *   algorithm from "partial-sums C++ g++ #3")
 *)

let n = try int_of_string (Array.get Sys.argv 1) with _ -> 25000

type sums = {mutable r1: float; mutable r2: float; mutable r3: float;
	     mutable r4: float; mutable r5: float; mutable r6: float;
	     mutable r7: float; mutable r8: float; mutable r9: float;
	    mutable pot: float}
    
let acc = {r1=1.; r2=0.; r3=0.; r4=0.; r5=0.; r6=0.; r7=0.; r8=0.; r9=0.; pot=1.}

let () =
  let dt = 2.0 /. 3.0 in
  for k = 1 to n do
    let kd = float k in
    let kd2 = kd *. kd in
    let kd3 = kd2 *. kd in

    let sink = sin kd
    and cosk = cos kd in
    
    acc.r1 <- acc.r1 +. dt ** kd;
    acc.r2 <- acc.r2 +. 1. /. sqrt kd;
    acc.r3 <- acc.r3 +. 1. /. (kd2 +. kd);
    acc.r4 <- acc.r4 +. 1. /. (kd3 *. sink *. sink);
    acc.r5 <- acc.r5 +. 1. /. (kd3 *. cosk *. cosk);
    acc.r6 <- acc.r6 +. 1. /. kd;
    acc.r7 <- acc.r7 +. 1. /. kd2;
    acc.r8 <- acc.r8 +. acc.pot /. kd;
    acc.r9 <- acc.r9 +. acc.pot /. (2.0 *. kd -. 1.0);

    acc.pot <- ~-. (acc.pot);
  done;

  Printf.printf "%.9f\t(2/3)^k\n" acc.r1;
  Printf.printf "%.9f\tk^-0.5\n" acc.r2;
  Printf.printf "%.9f\t1/k(k+1)\n" acc.r3;
  Printf.printf "%.9f\tFlint Hills\n" acc.r4;
  Printf.printf "%.9f\tCookson Hills\n" acc.r5;
  Printf.printf "%.9f\tHarmonic\n" acc.r6;
  Printf.printf "%.9f\tRiemann Zeta\n" acc.r7;
  Printf.printf "%.9f\tAlternating Harmonic\n" acc.r8;
  Printf.printf "%.9f\tGregory\n" acc.r9
