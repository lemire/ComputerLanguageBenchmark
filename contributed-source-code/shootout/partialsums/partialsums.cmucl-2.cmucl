;;; The Computer Language Shootout
;;; http://shootout.alioth.debian.org/
;;;
;;; Contributed by: Shyamal Prasad


(defun main (&optional
	     (n (parse-integer
		 (or (car (last #+sbcl sb-ext:*posix-argv*
				#+cmu  extensions:*command-line-strings*))))))
  (declare (fixnum n)
	   (optimize (speed 3) (compilation-speed 0)
		     (safety 0) (debug 0)))
  
  (format t "~,9f~a(2/3)^k~%"
	  (loop for k fixnum from 0 to n
		sum (expt (/ 2.0d0 3.0d0) (coerce k 'double-float))
		double-float) #\Tab)

  (format t "~,9f~ak^-0.5~%"
	  (loop for k fixnum from 1 to n
		sum (/ 1.0d0
		       (the double-float (sqrt (coerce k 'double-float))))
		double-float) #\Tab)

  (format t "~,9f~a1/k(k+1)~%"
	  (loop for k fixnum from 1 to n
		sum (/ 1.0d0
		       (* (coerce k 'double-float)
			  (+ (coerce k 'double-float) 1.0d0)))
		double-float) #\Tab)

  (format t "~,9f~aFlint Hills~%"
	  (loop for k fixnum from 1 to n
		sum (let ((sk (sin (coerce k 'double-float)))
			  (kd (coerce k 'double-float)))
		      (/ 1.0d0 (* kd kd kd sk sk)))
		double-float) #\Tab)

  (format t "~,9f~aCookson Hills~%"
	  (loop for k fixnum from 1 to n
		sum (let ((ck (cos (coerce k 'double-float)))
			  (kd (coerce k 'double-float)))
		      (/ 1.0d0 (* kd kd kd ck ck)))
		double-float) #\Tab)

  (format t "~,9f~aHarmonic~%"
	  (loop for k fixnum from 1 to n
	        sum (/ 1.0d0 (coerce k 'double-float))
		double-float) #\Tab)


  (format t "~,9f~aRiemann Zeta~%"
	  (loop for k fixnum from 1 to n
		sum (let ((kd (coerce k 'double-float)))
		      (/ 1.0d0 (* kd kd)))
		double-float) #\Tab)

  (format t "~,9f~aAlternating Harmonic~%"
	  (loop with a double-float = -1.0d0
		for k fixnum from 1 to n
		sum (let ((kd (coerce k 'double-float)))
		      (setf a (* -1.0d0 a))
		      (/ a kd))
		double-float) #\Tab)

  (format t "~,9f~aGregory~%"
	  (loop with a double-float = -1.0d0
		for k fixnum from 1 to n
		sum (let ((kd (coerce k 'double-float)))
		      (setf a (* -1.0d0 a))
		      (/ a (- (* 2.0d0 kd) 1.0d0)))
		double-float) #\Tab))
