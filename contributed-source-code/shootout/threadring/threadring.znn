(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module threadring;

import
   System.Threading as T,
   System.Console as C,
   BenchmarksGame;

type {public, ref} NamedThread = object (name : integer)
   var 
      signal : T.AutoResetEvent;
      token : integer;

   activity Run;
   begin 
      while TokenNotDone() do 
         NextThread().TakeToken(token-1);
      end;
      if token = 0 then C.WriteLine("{0}", name); end;
      NextThread().TakeToken(-1);
   end Run;

   procedure TokenNotDone : boolean;
   begin
      signal.WaitOne();
      return token > 0;
   end Take;

   procedure NextThread : NamedThread;
   begin 
      return threadRing[ name mod numberOfThreads ]; 
   end NextThread;

   procedure {public} TakeToken(x : integer);
   begin
      token := x;
      signal.Set();
   end TakeToken;

begin
   signal := new T.AutoResetEvent(false);
   token := 0;
   (* new Run(); *)
end NamedThread;


const numberOfThreads = 503;

var 
   threadRing : array numberOfThreads of NamedThread;
   i : integer;

begin 
   for i := 0 to numberOfThreads-1 do 
      threadRing[i] := new NamedThread(i+1); 
   end;

   (* seems a little faster to wait until now to start threads *)
   for i := 0 to numberOfThreads-1 do  
      new threadRing[i].Run(); 
   end;

   threadRing[0].TakeToken( BenchmarksGame.argi() );
end threadring.


