/*
 * The Computer Language Benchmarks Game
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Premysl Hruby
 * convert to D by dualamd
 */

module ThreadRing;

import std.stdio : writefln;
import std.conv : toInt;

import std.c.linux.pthread;
import std.c.stdlib : exit;

const uint NUM_THREADS = 503;
const uint STACK_SIZE = 16*1024;

int   token = -1;
bool finished = false;

extern (C)
{
   pthread_mutex_t[NUM_THREADS]      mutex;
   char[STACK_SIZE][NUM_THREADS]   stacks;

   void* thread_func( void *num )
   {
      int thisnode   = cast(int)num;
      int nextnode   = ( thisnode + 1 ) % NUM_THREADS;

      while (true) 
      {
         pthread_mutex_lock( &(mutex[ thisnode ]) );

         if ( token > 0 ) 
         {
            token--;
            pthread_mutex_unlock( &(mutex[ nextnode ]) );
         }
         else 
         {
             writefln( thisnode +1 );
             exit(0);
         }
      }

      return null;
   }
}

int main(string[] args)
{
   try
   {
      token = toInt(args[1]);
   }
   catch (Exception e)   
   {
      token = 1000; // test case
   }

   pthread_t cthread;
   pthread_attr_t stack_attr;

   pthread_attr_init(&stack_attr);

   for (int i = 0; i < NUM_THREADS; i++) 
   {
      pthread_mutex_init( &(mutex[ i ]), null);
      pthread_mutex_lock( &(mutex[ i ]) );

      // manual set stack space & stack size for each thread
      pthread_attr_setstack( &stack_attr, &(stacks[i]), STACK_SIZE );

      pthread_create( &cthread, &stack_attr, &thread_func, cast(void*)i );
   }

   // start game
   pthread_mutex_unlock( &(mutex[0]) );

   // wait for result
   pthread_join( cthread, null );

   return 1;
}

