/*
 * The Computer Language Benchmarks Game
 * http://shootout.alioth.debian.org/

 * contributed by Anh Tran
 */

import std.stdio;
import std.thread : Thread;
import std.conv;

const NUM_THREADS   = 503;
const STACK_SIZE   = 32*1024; // 32KB

// for easier management from main thread
RingThread   [NUM_THREADS]   rt_arr;
int         [NUM_THREADS]   token_arr;

bool   finished   = false;

public class RingThread : public Thread 
{
public:
   RingThread      next_node;
   int          node_id;

   this( int thread_id ) 
   {
      super( STACK_SIZE );   // create new thread with specified stack size
      node_id = thread_id;
   }

   ~this() {}
   
   override int run()
   {
      while (!finished)
      {
         if (token_arr[node_id] < 0)
            yield();
         else
         {
            if (token_arr[node_id] > 0)
            {
               int next_id = (node_id < (NUM_THREADS -1)) ? node_id +1 : 0;
               token_arr[next_id] = token_arr[node_id] -1;
               token_arr[node_id] = -1;
            }
            else
            {
               writefln(node_id +1);
               finished = true;
               break;
            }
         }
         
      }
      
      next_node = null;
      return 1;
   }
}


void main( string[] args ) 
{
   // set token state to IDLE
   for (int i = 0; i < NUM_THREADS; i++)
      token_arr[i] = -1;

   // init HEAD
   auto head = new RingThread( 0 );
   rt_arr[0] = head;

   // init remain threads
   for (int i = 1; i < NUM_THREADS; i++)
   {
      auto r = new RingThread( i );

      rt_arr[i] = r;
      rt_arr[i -1].next_node = r; // link to next thread
   }
   
   // TAIL node points to HEAD
   rt_arr[ NUM_THREADS -1 ].next_node = rt_arr[0];
   
   try
   {
      // set initial token value
      token_arr[0] = toInt( args[1] );
   }
   catch (Exception)
   {
      token_arr[0] = 1000;
   }

   // let's roll
   for (int i = 0; i < NUM_THREADS; i++)
      rt_arr[i].start();

   // just sleep
   for (int i = 0; i < NUM_THREADS; i++)
      rt_arr[i].wait();
}
