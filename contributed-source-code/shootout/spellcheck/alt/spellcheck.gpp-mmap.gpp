// -*- mode: c++ -*-
// $Id$
// http://www.bagley.org/~doug/shootout/
// STL spell checker using mmap() from Bill Lear

#include <iostream>
#include <utility>
#include <fstream>
#include <hash_map>
#include <algorithm>
#include <iomanip>
#include <string>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/mman.h>
#include <errno.h>

using namespace std;

class mem_map {
public:
    mem_map(const char* file_name,
            int flags = O_RDONLY,
            int prot = PROT_READ,
            int share = MAP_SHARED,
            mode_t mode = 0,
            void* addr = 0,
            size_t length = 0,
            off_t offset = 0)
    : file_handle(0),
      buffer_size(length),
      input_buffer(0),
      ok(false)
    {
        this->file_handle = open(file_name, flags, mode);

        if (this->file_handle < 0) {
            this->sys_error = "mem_map Error: ";
            this->sys_error += string("Could not open file ");
            this->sys_error += string(file_name);
            this->sys_error += string(": ") + string(strerror(errno));
            return;
        }

        if (this->buffer_size == 0) {
            struct stat s;

            if (fstat(this->file_handle, &s) < 0) {
                this->sys_error = "mem_map Error: ";
                this->sys_error += string("Could not stat file ");
                this->sys_error += string(file_name);
                this->sys_error += string(": ") + string(strerror(errno));
                return;
            }

            this->buffer_size = s.st_size;
        }

        this->input_buffer = (char*) mmap((caddr_t)addr,
                                          this->buffer_size,
                                          prot,
                                          share,
                                          this->file_handle,
                                          offset);

        if (!this->input_buffer) {
            this->sys_error = "mem_map Error: ";
            this->sys_error += string("Could not mmap file ");
            this->sys_error += string(file_name);
            this->sys_error += string(": ") + string(strerror(errno));
            return;
        }

        ok = true;
    }

    ~mem_map() {
        munmap(this->input_buffer, this->buffer_size);
        close(this->file_handle);
    }

    char* buffer() const { return this->input_buffer; }
    size_t size() const { return this->buffer_size; }

    char* begin() const { return this->input_buffer; }
    char* end() const { return this->input_buffer + this->buffer_size; }

    int operator!() const { return !this->ok; }

    string error() const { return this->sys_error; }

private:
    int file_handle;
    size_t buffer_size;
    char* input_buffer;
    bool ok;
    string sys_error;

    mem_map(const mem_map&) {}
    mem_map& operator = (const mem_map&) { return *this; }
};

typedef std::pair<const char*, const char*> span;

template<> struct hash<span> {
    inline size_t operator()(const span& s) const {
        size_t h = 0;
        const char* end = s.second;
        for (const char* begin = s.first; begin != end; ++begin) {
            h = 5 * h + *begin;
        }
        return h;
    }
};

template<> struct equal_to<span> {
    inline bool operator()(const span& s1, const span& s2) const {
        return (s1.second - s1.first) == (s2.second - s2.first) &&
            std::equal(s1.first, s1.second, s2.first);
    }
};

class spell_checker {
public:
    spell_checker() 
        : in("Usr.Dict.Words") {
        if (!in) {
            cerr << "Could not open " << "Usr.Dict.Words\n";
            exit(1);
        }
        const char* end = in.end();
        const char* line_begin = in.begin();
        const char* line_end = line_begin;
        while (true) {
            while (line_end != end && *line_end != '\n') {
                ++line_end;
            }
            if (line_end == end) {
                break;
            }
            if (dict.end() == dict.find(span(line_begin, line_end))) {
                ++dict[span(line_begin, line_end)];
            }
            line_begin = ++line_end;
         }
    }

    void process(const char* begin, const char* end) {
        const char* line_begin = begin;
        const char* line_end = line_begin;
        while (true) {
            while (line_end != end && *line_end != '\n') {
                ++line_end;
            }
            if (line_end == end) {
                break;
            }
            if (dict.end() == dict.find(span(line_begin, line_end))) {
                copy(line_begin, line_end, ostream_iterator<char>(cout));
                cout << '\n';
            }
            line_begin = ++line_end;
        }
    }

private:
    std::hash_map<span, int> dict;
    mem_map in;
};

int main(int argc, char* argv[]) {
    if (argc < 1) {
        cerr << "Usage: " << argv[0] << " <file>\n";
        return 1;
    }
    mem_map in(argv[1]);
    if (!in) {
        cerr << "Could not open " << argv[1] << '\n';
        return 1;
    }
    spell_checker spell;
    spell.process(in.begin(), in.end());
}
