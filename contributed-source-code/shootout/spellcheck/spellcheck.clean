/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/ 
   contributed by John van Groningen (Clean Guru!)
*/

module spellcheck
import StdEnv, StdStrictLists

Start world 
	# dictionary = htNew 40000
	# (dictionary,world) = readUsrDictWords world dictionary
	= checkInputWords world dictionary 

readUsrDictWords world ht
	# (openok, file, world) = fopen "Usr.Dict.Words" FReadText world
	| not openok = abort ("Cannot open Usr.Dict.Words\n")
	# ht = readWords file ht
	= (ht,world)

	where
    readWords f ht
		# (line, f) = freadline f
        | size line == 0
			= ht
			= readWords f (htAdd line 1 ht)	

checkInputWords world ht 
   # (console, world) = stdio world
	= missingWords console ht []	

missingWords f ht missing	
	#! (line,f) = freadline f
	# n = size line
    | n == 0
		= map withNewline missing
		| (htHasKey line ht) 
			= missingWords f ht missing
			= missingWords f ht [line:missing]	
	where
	withNewline s
		= if (s.[size s - 1] == '\n') s (s+++"\n")

primes =: [
   53,         97,         193,       389,       769,
   1543,       3079,       6151,      12289,     24593,
   49157,      98317,      196613,    93241,     786433,
   1572869,    3145739,    6291469,   12582917,  25165843,
   50331653,   100663319,  201326611, 402653189, 805306457
   ]

:: Item a = { key::!String
            , val::!a
            }

:: HashTable a = { nBuckets::!Int
                 , table::!.{!.[!Item a!]}
                 }

hash :: !{#.Char} !Int -> Int
hash key nBuckets
   = (abs (loop key (size key - 1) 0)) rem nBuckets  
   where
   loop k n h
      | n>=0
          = loop k (n-1) (5*h + toInt k.[n])        
          = h


htNew n = { nBuckets = nprime
        , table = {[|] \\ i <- [0..nprime-1]}
        }
   where   
   nprime = hd (dropWhile (\x = x < n) primes)        


htHasKey :: !{#.Char} !.(HashTable a) -> .Bool
htHasKey k ht=:{table,nBuckets}= findIn k table.[hash k nBuckets]
where
    findIn k [|item:ls] = item.key == k || findIn k ls
    findIn k [|] = False

htAdd :: !{#.Char} !a !*(HashTable a) -> *HashTable a
htAdd k v ht=:{table,nBuckets}
    #! i = hash k nBuckets
    #! (b,table) = replace table i [|]
    # b = addItem k v b
    = {ht & table = {table & [i] = b}}
where
    addItem :: !{#.Char} .a !*[!u:(Item .a)!] -> *[!v:(Item .a)!],[u<=v]
    addItem k v [|item:ls]
       | item.key <> k
               = [|item : addItem k v ls]
               = [|{item & val=v}:ls]
    addItem k v [|]
        = [|{key=k,val=v}]
        