-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- contributed by David Sauvage 2005/04/07
with Dictionnary_Mgr;

procedure Spellcheck is
begin
   Dictionnary_Mgr.Load ("Usr.Dict.Words");
   Dictionnary_Mgr.Word_Analysis;
end Spellcheck;
-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- contributed by David Sauvage 2005/04/07
with GNAT.Spitbol;

package Dictionnary_Mgr is

   package Dictionnary is new GNAT.Spitbol.Table (Boolean, False, Boolean'Image);

   Map : Dictionnary.Table (40_000);

   -- ------------------------------------------------
   procedure Load (File_Name : String);
   -- ------------------------------------------------
   procedure Word_analysis;

end Dictionnary_Mgr;
-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- contributed by David Sauvage 2005/04/07
with Ada.Streams, Ada.Streams.Stream_IO, Ada.Text_IO, GNAT.Spitbol;
use  Ada.Streams, Ada.Streams.Stream_IO;

package body Dictionnary_Mgr is

   Tmp_Word : String (1 ..128);
   Index    : Natural range 0 .. Tmp_Word'Last := 0;

   -- ------------------------------------------------
   procedure Load (File_Name : String) is
      Dictionnary_File : File_Type;
      Buffer           : Stream_Element_Array (1 .. 4_096);
      Last             : Stream_Element_Offset;

      -- ------------------------------------------------
      procedure Process (Buffer : Stream_Element_Array) is
      begin
           for I in Buffer'Range loop
            if Character'Val(Buffer (I)) = ASCII.LF then
               if Index > 1 then
                  Dictionnary.Set (Map, Tmp_Word (1 .. Index),True);
               end if;
               Index := 0;
            else
               Index := Index + 1;
               Tmp_Word(Index) := Character'Val(Buffer (I));

            end if;
         end loop;
      end Process;

   begin
      Open (Dictionnary_File, In_File, File_Name);

      loop
         Read (Dictionnary_File, Buffer, Last);
         Process (Buffer (1 .. Last));
         exit when Last < Buffer'Length;
      end loop ;

      Close (Dictionnary_File);
   end Load;

   -- ------------------------------------------------
   procedure Word_analysis is
      Word : String (1 .. 128);
      Last : Natural;
      use Ada.Text_IO;
   begin

      loop
         Get_Line (Word, Last);
         if not Dictionnary.Present (Map, Word (1 .. Last)) then
            Put_Line (Standard_Output, Word (1 .. Last));
         end if;
      end loop;

   exception
      when Ada.Text_IO.End_Error =>
         null;
   end Word_analysis;

end Dictionnary_Mgr;
