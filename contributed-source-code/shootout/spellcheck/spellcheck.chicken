;; ---------------------------------------------------------------------
;; The Great Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Based on existing Shootout submission [Scheme Guile]. However hashing
;; tasks performed using only SRFI-69-compliant facilities. Use of
;; default hash function and predicate provides significantly better
;; performance than explicitly passing native implementations; thus, do
;; this:
;;
;;    ... (ht (make-hash-table)) ...
;;
;; not this:
;;
;;    ... (ht (make-hash-table string-ci=? string-ci-hash)) ...
;;
;; Contributed by Anthony Borla
;; ---------------------------------------------------------------------

(declare (fixnum) (disable-interrupts) (unsafe) (block) (lambda-lift))

; -------------------------------

(define (main args)
  (let ((ht (make-hash-table)))

    (with-input-from-file "Usr.Dict.Words"
      (lambda ()
        (let loop ((word (read-line)))
          (if (eof-object? word) '()
            (begin
              (hash-table-set! ht word #t)
              (loop (read-line)))))))

    (with-input-from-port (current-input-port)
      (lambda ()
        (let loop ((word (read-line)))
          (if (eof-object? word) '()
            (begin
              (if (not (hash-table-exists? ht word))
                (print word))
              (loop (read-line)))))))))

; -------------------------------

(main (command-line-arguments))

