(* from: Benedikt Rosenau
 * Computation of Fibonacci numbers as presented by Pettorossi and
 * Proietti. Adapted to arbitrary precision arithmetic from code 
 * provided by Markus Mottl.
 *
 * Compile it with ocamlopt nums.cmxa fibo.ml
 *)

open Num

let zero = num_of_int 0
let one = num_of_int 1
let two = num_of_int 2

let rec fibo_aux n =
  if n =/ zero then one, zero
  else if n =/ one then zero, one
  else
    let k = quo_num n two in
    let a, b = fibo_aux k in
    let aa = a */ a
    and bb = b */ b
    and ab2 = two */a */ b in
    let ab2bb = ab2 +/ bb in
    if two */ k =/ n then aa +/ bb, ab2bb
    else ab2bb, ab2bb +/ aa +/ bb

let fibo n =
  if n <=/ one then one
  else
    let k = quo_num n two in
    let a, b = fibo_aux k in
    let ab = a +/ b in
    if two */ k =/ n then ab */ ab +/ b */ b
    else ab */ ab +/ two */ b */ ab;;

let n =
  try int_of_string Sys.argv.(1)
  with Invalid_argument _ -> 1000 in
let n = num_of_int n in
print_endline (string_of_num (fibo n))
