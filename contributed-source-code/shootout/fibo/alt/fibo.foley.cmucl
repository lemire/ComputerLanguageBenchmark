From Paul Foley:

For the "Alternatives" section: a couple of very much faster solutions
for "Fibonacci Numbers" using iteration, and SERIES:

1
  (defun fib (n &aux (a 0) (b 1))
    (declare (fixnum n a b))
    (loop repeat n fixnum do (psetq a b b (+ a b)) finally (return b)))

2
  (defun scan-fib ()
    (declare (optimizable-series-function 1))
    (producing (fib) ((a 0) (b 1))
      (declare (fixnum a b))      ; attn
      (loop
        (tagbody
            (psetq a b b (+ a b))
            (next-out fib a)))))

SCAN-FIB produces an infinite series; use (collect-nth n (scan-fib))
in the MAIN function to get the Nth Fibonacci number.  Of course, the
fixnum declaration in the PRODUCING form is a flat-out lie; they're
only fixnums if you don't compute more than

 (collect-length (until-if (complement #'fixnump) (scan-fib)))

values (which value is 43 on CMUCL), after which, if you compile with
high optimization settings, you'll start getting negative fixnums...
[Oh yeah: you'll have to use #'minusp instead of (complement #'fixnump)
if you've already compiled with high optimization...]
