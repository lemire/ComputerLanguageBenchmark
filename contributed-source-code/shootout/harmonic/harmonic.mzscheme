#!/usr/bin/mzscheme -r
;; $d: harmonic.mzscheme,v 1.1 2005/04/24 03:55:57 bfulgham Exp $
;; The Great Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Based on the Chicken implementation by Felix
;; Contributed by Brent Fulgham
(require (lib "13.ss" "srfi"))

(define (sum-harmonic4 n)
  (do ([i 1 (+ i 1)]
       [sum 1.0 (+ sum (/ ifloat))]
       [ifloat 2.0 (+ ifloat 1)] )
      ((>= i n) sum) ) )

;;; Round a floating point value
(define (roundto digits n)
  (let* ([e (expt 10 digits)]
         [num (round (abs (* e (inexact->exact n))))]
         [str (number->string (remainder num e))])
    (format "~a~a.~a~a" 
            (if (negative? n) "-" "")
            (quotient num e) 
            (make-string (- digits (string-length str)) #\0)
            str)))

(define (main args)
  (if (< (vector-length args) 1)
      (begin
        (display "An argument is required")
        (newline))
      (let ((n (string->number (vector-ref args 0))))
        (if (not n)
            (begin
              (display "An integer is required") (newline))
            (printf "~a~%" (roundto 9 (sum-harmonic4 n)))))))
;;; "~,9f\n"

(main (current-command-line-arguments))