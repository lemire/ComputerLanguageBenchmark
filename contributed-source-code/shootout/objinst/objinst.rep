#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id$
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system rep.data.objects)

  (define (print-bool b)
    (format standard-output (if b "true\n" "false\n")))
  
  (define toggle
    (object nil
	    ((new obj state)
	     (put obj 'state state)
	     obj)
	    ((value tog) (get tog 'state))
	    ((activate tog)
	     (put tog 'state (not (get tog 'state)))
	     tog)))

  (define nth-toggle
    (object toggle
	    ((new obj state max)
	     (toggle 'new obj state)
	     (put obj 'count-max max)
	     (put obj 'counter 0)
	     obj)
	    ((activate obj)
	     (let ((c (get obj 'counter)))
	       (if (= (+ c 1) (get obj 'count-max))
		   (progn
		     (put obj 'state (not (get obj 'state)))
		     (put obj 'counter 0))
		 (put obj 'counter (+ c 1)))
	       obj))))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (let ((tog (toggle 'new 'my-tog 't)))
      (do ((i 0 (+ i 1)))
	  ((= i 5))
	(print-bool (toggle 'value (toggle 'activate tog))))
      (do ((i 0 (+ i 1)))
	  ((= i n))
	(setq tog (toggle 'new 'my-tog 't))))

    (format standard-output "\n")

    (let ((ntog (nth-toggle 'new 'my-ntog 't 3)))
      (do ((i 0 (+ i 1)))
	  ((= i 8))
	(print-bool (nth-toggle 'value (nth-toggle 'activate ntog))))
      (do ((i 0 (+ i 1)))
	  ((= i n))
	(setq ntog (nth-toggle 'new 'my-ntog 't 3))))))
