/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
 
   contributed by Isaac Gouy (Clean novice)

   Clean is a functional programming language. 
   Existential type variable have some vague similarity
   so NToggle delegates function calls to Toggle.

   NOTE The compiler seems to optimize away creation 
        of identical toggle records... 
*/

module objinst
import StdEnv, LanguageShootout

Start
   # toggle = makeToggleLoop argi (makeToggle True)
   # lines = printLoop 5 toggle []
   # lines = ["\n":lines]	
   # ntoggle = makeNToggleLoop argi (makeNToggle True 3)
   # lines = printLoop 8 ntoggle lines
   = reverse lines

   where 
   makeToggleLoop n t
      | n == 0 = t
      = makeToggleLoop (n-1) (makeToggle True)

   makeNToggleLoop n t
      | n == 0 = t
      = makeNToggleLoop (n-1) (makeNToggle True 3)

   printLoop n t ls
      | n == 0 = ls
      # t = activate t
      = printLoop (n-1) t [toLString (value t) :ls]

      where 
      toLString b
         | b = "true\n"
         = "false\n"

:: Toggler = E.a: 
   { state :: a
   , activate_ :: a -> a
   , value_ :: a -> Bool
   }

value o=:{state,value_} = value_ state
activate o=:{state,activate_} = {o & state = activate_ state}

makeToggle b =
   { state = b
   , activate_ = \ state -> not state
   , value_ = \ state -> state
   }

makeNToggle b max =
   { state = (makeToggle(b), max, 0)
   , activate_ = \ (t, max, count) -> 
      if (count+1 >= max)
         (activate t, max, 0) (t, max, count+1)	
   , value_ = \ (t,_,_) -> value t
   }
