-- $Id$
-- http://shootout.alioth.debian.org/
-- Author: Einar Karttunen 
-- compile with: ghc -O2 -o objinst objinst.hs

import Control.Monad
import Data.IORef
import System

class Toggle a where
    activate :: a -> IO ()
    value :: a -> IO Bool

newtype ToggleC    = ToggleC (IORef Bool)
newtype NthToggleC = NthToggleC (IORef (Bool, Int, Int))

newToggle s = newIORef s >>= return . ToggleC
newNthToggle s m = newIORef (s,0,m) >>= return . NthToggleC

instance Toggle ToggleC where 
    activate (ToggleC t) = modifyIORef t not
    value (ToggleC t)    = readIORef t

instance Toggle NthToggleC where
    activate (NthToggleC t) = modifyIORef t (\(s,v,m) -> if v+1 == m then (not s,0,m) else (s,v+1,m))
    value    (NthToggleC t) = readIORef t >>= \(s,_,_) -> return s

out b = putStrLn $ if b then "true" else "false"

main = do [num] <- getArgs
	  toggle<- newToggle True
	  replicateM_ 5 (activate toggle >> value toggle >>= out)
	  replicateM_ (read num) (newToggle True)
	  putStrLn ""
	  ntoggle <- newNthToggle True 3
	  replicateM_ 8 (activate ntoggle>> value ntoggle>>= out)
	  replicateM_ (read num) (newNthToggle True 3)
