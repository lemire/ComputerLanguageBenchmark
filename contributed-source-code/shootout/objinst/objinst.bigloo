;;; -*- mode: scheme -*-
;;; $Id$
;;; http://www.bagley.org/~doug/shootout/
;;; based on code from Manuel Serrano

(module method
	(main main)
	(static (class toggle
		       (state::bool (default #t)))
		(class nthtoggle::toggle
		       (count-max::int (default 0))
		       (counter::int (default 0)))))

(define-generic (value o::toggle))

(define (print-bool b)
  (display (if b #"true\n" #"false\n")))

(define-method (value o::toggle)
  (with-access::toggle o (state)
		       state))

(define-generic (activate o::toggle))

(define-method (activate o::toggle)
  (with-access::toggle o (state)
		       (set! state (not state))
		       o))

(define-method (activate o::nthtoggle)
  (with-access::nthtoggle o (counter count-max state)
			  (set! counter (+fx 1 counter))
			  (if (>=fx counter count-max)
			      (begin
				(set! state (not state))
				(set! counter 0)))
			  o))

(define (main args)
  (let ((n (or (and (= (length args) 2) (string->number (cadr args))) 1)))
    (let ((tog (instantiate::toggle (state #t))))
      (do ((i 0 (+ i 1))) ((= i 5))
	(print-bool (value (activate tog)))))
    (do ((i 0 (+ i 1))) ((= i n))
      (instantiate::toggle (state #t)))
    (newline)
    (let ((ntog (instantiate::nthtoggle (state #t) (count-max 3))))
      (do ((i 0 (+ i 1))) ((= i 8))
	(print-bool (value (activate ntog)))))
    (do ((i 0 (+ i 1))) ((= i n))
      (instantiate::nthtoggle (state #t) (count-max 3)))))
