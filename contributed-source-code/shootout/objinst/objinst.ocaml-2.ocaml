(* objinst.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Christophe TROESTLER
 * This version is similar to languages without object features
 * (e.g. objinst.gcc, objinst.mlton).
 *)

type toggle = { mutable r : bool; a : toggle -> unit }
let new_toggle b = { r = b; a = (fun o -> o.r <- not(o.r)) }
let toggle_value o = o.r
let toggle_activate o = o.a o; o

type nth_toggle = { mutable r : bool; count_max : int; mutable counter : int;
		    a : nth_toggle -> unit }
let new_nth_toggle b m =
  let act o =
    o.counter <- o.counter + 1;
    if o.counter >= o.count_max then (o.r <- not o.r; o.counter <- 0) in
  { r = b; count_max = m; counter = 0; a = act }
let nth_toggle_value o = o.r
let nth_toggle_activate o = o.a o; o


let () =
  let n = try int_of_string(Array.get Sys.argv 1) with _ -> 1 in
  let tog = new_toggle true in
  for i = 1 to 5 do
    Printf.printf "%b\n" (toggle_value(toggle_activate tog))
  done;
  for i = 1 to n do ignore(new_toggle true) done;
  print_newline();
  let ntog = new_nth_toggle true 3 in
  for i = 1 to 8 do
    Printf.printf "%b\n" (nth_toggle_value(nth_toggle_activate ntog))
  done;
  for i = 1 to n do ignore(new_nth_toggle true 3) done

