%%% -*- mode: erlang -*-
%%% $Id$
%%% http://shootout.alioth.debian.org/
%%%
%%% Provided by Bengt Kleberg (Erlang Guru!)
%%% Slightly modified by Brent Fulgham to match expected output.
%%% fixed by Isaac Gouy

-module(objinst).  
-export([main/0, main/1]).

-record( toggle_base, {state, value = fun value/1, activate = fun activate/1} ).
-record( toggle, {toggle_base} ).
-record( nth_toggle, { toggle_base, counter = 0, max_count } ).

main() -> main(["1"]).
main([Arg]) ->
	Number_of_Times = list_to_integer(Arg),
	activate_toggle( 5, toggle_new( true ) ),
	create_toggle( Number_of_Times ),
	io:fwrite("\n"),
	activate_toggle( 8, nth_toggle_new( true, 3 ) ),
	create_nth_toggle( Number_of_Times ),
	erlang:halt().

atom_to_integer( Atom ) ->
	erlang:list_to_integer(erlang:atom_to_list(Atom)).

activate_toggle( 0, _Toggle ) -> ok;
activate_toggle( N, Toggle ) ->
	Activated_Toggle = ((Toggle#toggle.toggle_base)#toggle_base.activate)(Toggle),
	Value = ((Activated_Toggle#toggle.toggle_base)#toggle_base.value)(Activated_Toggle),
	io:fwrite("~w\n", [Value]),
	activate_toggle( N - 1, Activated_Toggle).

create_toggle( 0 ) -> ok;
create_toggle( N ) ->
	_Toggle = toggle_new( true ),
	create_toggle( N-1 ).

create_nth_toggle( 0 ) -> ok;
create_nth_toggle( N ) ->
	_Toggle = nth_toggle_new( true, 3 ),
	create_nth_toggle( N-1 ).

toggle_base_new( State ) ->
	#toggle_base{state = State}.

toggle_new( State ) ->
	Toggle = toggle_base_new( State ),
	#toggle{toggle_base = Toggle}.

nth_toggle_new( State, Max_Count ) ->
	Toggle = toggle_base_new( State ),
	#nth_toggle{toggle_base = Toggle, max_count = Max_Count - 1}.


activate( #toggle_base{state = true} = Toggle_Base ) ->
	Toggle_Base#toggle_base{state = false};
activate( #toggle_base{state = false} = Toggle_Base ) ->
	Toggle_Base#toggle_base{state = true};
activate( #toggle{toggle_base = Toggle_Base} = Toggle ) ->
	Toggle#toggle{toggle_base = activate( Toggle_Base )};
activate( #nth_toggle{counter = Max_Count, max_count = Max_Count, toggle_base = Toggle_Base} = Nth_Toggle ) ->
	Nth_Toggle#nth_toggle{toggle_base = activate( Toggle_Base ), counter = 0};
activate( #nth_toggle{counter = Count} = Nth_Toggle ) ->
	Nth_Toggle#nth_toggle{counter = Count + 1}.

value( #toggle_base{state = State} ) ->
	State;
value( #toggle{toggle_base = Toggle_Base} ) ->
	value( Toggle_Base );
value( #nth_toggle{toggle_base = Toggle_Base} ) ->
	value( Toggle_Base ).
