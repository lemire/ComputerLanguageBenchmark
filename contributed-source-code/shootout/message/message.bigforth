\ The Computer Language Shootout
\ http://shootout.alioth.debian.org/
\
\ contributed by Ian Osgood
\ modified by Bernd Paysan

\ read NUM from last command line argument
0. argc @ 1- arg >number 2drop drop constant NUM

variable receiver  \ task being poked
variable data      \ data being poked
variable finished
variable sums

: poke ( task data -- )
  begin receiver @ while pause repeat
  data ! dup receiver ! wake ;

: peek? ( task -- data T | F )
  receiver @ = dup if receiver off  data @ swap then ;

Variable xtasks

: sum-task ( -- new-task )
  1 xtasks +!
  640 640 NewTask dup dup 0 2 rot pass
  ( this-task sum -- )
  begin
    begin pause over peek? until
    1+ +
  finished @ until
  sums ! drop -1 xtasks +! ;

: xtask ( next-task -- new-task )
  1 xtasks +!
  64 dup NewTask tuck 2 over pass
  ( next-task this-task -- )
  begin
    over begin pause over peek? until
    1+ poke
  finished @ until 2drop -1 xtasks +! ;

: main   receiver off
  sum-task
  500 1 do xtask loop
  NUM 0 do dup 0 poke loop drop
  \ wait for all tasks to finish
  finished on
  begin pause xtasks @ 0= until
  sums @ 1 u.r cr ;

main bye  \ done!
