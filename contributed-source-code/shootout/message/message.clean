/* The Computer Language Shootout
   http://shootout.alioth.debian.org/
 
   contributed by Tim Hochberg
*/

module message

import StdEnv, StdLib, LanguageShootout


Start world = toString (sum values) +++ "\n"
where
	values = fst (maplSt call (repeatn argi 0) state)


:: *Thread = IncrementAndPass .Thread
		   | Increment

state :: Thread
state = foldl (\l _ -> IncrementAndPass l) 
		Increment 
		[2..500]

call :: !Int !Thread -> (!Int, !Thread)
call i t=:Increment 		
	= (i+1, t)
call i (IncrementAndPass next)
	# (i, next) = call (i + 1) next
	= (i, IncrementAndPass next)




