(* message.sml
 *
 *   Build chain of 3000 threads that relay an int value,
 *   send N messages up the chain.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 *)
structure Test:sig val main:string*string list->OS.Process.status end = struct

    val N = 500		(* default length of chain *)

    (* build the chain *)
    fun build (0, c) = c
      | build (n, s) = let val p = CML.channel ()
			   fun sp () = (CML.send (s, CML.recv p + 1); sp ())
		       in ignore (CML.spawn sp); build (n-1, p) end

    (* Last thread, this is really the N+1st thread -- contrary to
     * the prose of the problem description, but in accordance with the
     * supposedly correct output: *)
    fun mklast r =
	let val p = CML.channel ()
	    fun sp n = let val n = n + CML.recv p in CML.send (r, n); sp n end
	in ignore (CML.spawn (fn () => sp 0)); p end

    (* the driver *)
    fun doit (n, N) () =
	let val r = CML.channel ()
	    val c = build (N, mklast r)
	    fun l (0, k) = TextIO.output (TextIO.stdOut, Int.toString k ^ "\n")
	      | l (n, _) = (CML.send (c, 0); l (n-1, CML.recv r))
	in l (n, 0) end
    fun main' (n, N) = (RunCML.doit (doit (n, N), NONE); OS.Process.success)
    fun len [] = N | len (arg :: _) = getOpt (Int.fromString arg, N)
    fun main (_, []) = main' (1, N)
      | main (_, x :: xs) = main' (getOpt (Int.fromString x, 1), len xs)
end
