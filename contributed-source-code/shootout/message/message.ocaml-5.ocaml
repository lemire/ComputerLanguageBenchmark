(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   Contributed by David Teller 
*)

(** Extremely light-weight threads, aka purely functional coroutines*)
type 'a coroutine =  'a * (unit -> 'a coroutine)  (**Intermediate result and continuation*)

(** Initialise the chain of coroutines, then start feeding 0s*)
let create_coroutine ~depth = 
  let rec aux = function                                             (*Main creation loop*)
    | 0 ->                       (*I'm the last one, I'll feed 0s, but only so many times*)
	let rec loop () = 
	  (0, fun () -> loop ())
	in
	  loop ()
    | n ->  
	let rec loop (r,co) =
	  ( (r + 1), fun () -> loop (co ()) ) 
	in loop (aux (n - 1))
  in
    aux depth

(** Listen for a given number of messages*)
let sum channel_end ~iterations =
  let rec aux total (r, co) = function
    | 0 -> total
    | n -> aux (total + r) ( co () ) (n - 1)
  in
    aux 0 channel_end  iterations

let () =
  let n  = try int_of_string(Array.get Sys.argv 1) with _ -> 10
  in
    print_int(sum ~iterations:n (create_coroutine ~depth:500));
    print_newline()
