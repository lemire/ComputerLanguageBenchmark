-- $Id$
-- http://shootout.alioth.debian.org/
-- Contributed by Einar Karttunen

import Control.Concurrent
import Control.Monad
import System

thread :: MVar Int -> MVar Int -> IO ()
thread inp out = takeMVar inp >>= putMVar out . (+1)

spawn cur _ = do next <- newEmptyMVar
		 forkIO $ thread cur next
		 return next

main = do n <- getArgs >>= readIO.head :: IO Int
	  s <- newEmptyMVar
	  e <- foldM spawn s [1..n]
	  f <- newEmptyMVar 
	  forkIO $ takeMVar e >>= putMVar f
	  putMVar s 0
	  takeMVar f >>= print
