;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/

;; Derived by Michael D. Adams from the MzScheme varient


(import (rnrs))

;;; Stupid boiler-plate for formatting floating point values
(define (roundto digits n)
  (let* ([e (expt 10 digits)]
         [num (round (abs (* e (exact n))))]
         [str (number->string (mod num e))])
    (string-append
     (if (negative? n) "-" "")
     (number->string (div num e))
     "."
     (make-string (- digits (string-length str)) #\0)
     str)))

;; TODO: ikarus doesn't have string-upcase yet
(define (upcase str) (list->string (map char-upcase (string->list str))))

;; TODO: This function is where the time is spent
;; TODO: could be improved by using string-hash and avoiding string->symbol
(define (all-counts len dna)
  (let ([table (make-eq-hashtable)]) ;; use string-hash??
    (let loop ([s (- (string-length dna) len)])
      (let* ([seq (substring dna s (+ s len))]
             [key (string->symbol seq)] ;; slow??
             [cnt (hashtable-ref table key 0)])
        (hashtable-set! table key (fx+ 1 cnt)))
      (unless (zero? s)
              (loop (fx- s 1))))
    table))

(define (write-freqs table)
  (let-values ([(keys values) (hashtable-entries table)])
    (let ([total (inexact (apply + (vector->list values)))])
      (vector-for-each
       (lambda (a)
         (display (car a)) (display " ")
         (display (roundto 3 (* 100 (/ (cdr a) total)))) (newline))
       (vector-sort (lambda (a b) (> (cdr a) (cdr b)))
                    (vector-map (lambda (a b) (cons a b))
                                keys values))))))

(define (write-one-freq table key)
  (let ([cnt (hashtable-ref table key 0)])
    (display cnt) (display "\t")
    (display key) (display "\n")))

(define dna
  (let ([port (current-input-port)]
        [start ">THREE Homo sapiens frequency"])
    (let skip ((x (get-line port)))
      (unless (string=? x start)
              (skip (get-line port))))
    (let loop ((x (get-line port))
               (s '()))
      (if (eof-object? x)
          (upcase (apply string-append (reverse s)))
          (loop (get-line port)
                (cons x s))))))

;; 1-nucleotide counts:
(write-freqs (all-counts 1 dna))
(newline)

;; 2-nucleotide counts:
(write-freqs (all-counts 2 dna))
(newline)

;; Specific sequences:
(for-each (lambda (seq)
            (write-one-freq (all-counts (string-length seq) dna)
                            (string->symbol seq)))
          '("GGT" "GGTA" "GGTATT" "GGTATTTTAATT" "GGTATTTTAATTTATAGT"))
