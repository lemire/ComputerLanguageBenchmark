% ----------------------------------------------------------------------
% The Computer Language Benchmarks Game
% http://shootout.alioth.debian.org/
%
% contributed by Anthony Borla
% fixed by Glendon Holst
% ----------------------------------------------------------------------

main :-
  init_knucleotide,

  FragmentLengths = [1, 2],
  forall(member(E, FragmentLengths), (print_frequencies(E), nl)),

  Fragments = ["GGT", "GGTA", "GGTATT", "GGTATTTTAATT", "GGTATTTTAATTTATAGT"],
  forall(member(E, Fragments), print_count(E)),

  drop_knucleotide.

% ------------------------------- %

init_knucleotide :-
  set_stream(current_input, buffer(full)),
  prompt(Old, ''), setvar(prompt, Old),
  dropvar(loaded).

% ------------- %

drop_knucleotide :-
  getvar(prompt, Old), prompt(_, Old),
  dropvar(prompt), dropvar(loaded).

% ------------------------------- %

print_frequencies(KeyLen) :-
  generate_counts(KeyLen, CountTable),
  sum_counts_(CountTable, 0, SumCounts),
  make_freq_table_(CountTable, SumCounts, [], FTable),
  keysort(FTable, SFTable), reverse(SFTable, FreqTable),
  print_freq_table_(FreqTable).

% ------------- %

sum_counts_([], Acc, Acc) :- !.

sum_counts_([_-C|T], Acc, Sum) :- Acc1 is Acc + C, !, sum_counts_(T, Acc1, Sum).

% ------------- %

make_freq_table_([], _, FTA, FTA) :- !.

make_freq_table_([K-C|T], SumCounts, FTA, FreqTable) :-
  F is C / SumCounts * 100.0, append([F-K], FTA, FTA1),
  !, make_freq_table_(T, SumCounts, FTA1, FreqTable).

% ------------- %

print_freq_table_([]) :- !.

print_freq_table_([F-K|T]) :-
  format('~w ~3f\n', [K, F]),
  !, print_freq_table_(T).

% ------------------------------- %

print_count(Fragment) :-
	string_length(Fragment, FragLen), 
	generate_counts(FragLen, CountTable),
	string_to_atom(Fragment, FragKey), 
	(
		select(FragKey-Count, CountTable, _)
	;
		Count = 0
	), !,
	format('~d\t~s\n', [Count, Fragment]).

% ------------- %

generate_counts(Length, CountTable) :-
  catch(getvar(loaded, Seq), _, load_sequence(current_input, Seq)),
  string_length(Seq, SeqLen), Last is SeqLen - Length + 1,
  make_count_table(Length, Last, Seq, CountTable).

% ------------------------------- %

make_count_table(Length, Last, Seq, CountTable) :-
  empty_assoc(A),
  mct_i_loop_(0, Length, Last, Seq, A, ACT),
  assoc_to_list(ACT, CountTable).

% ------------- %

mct_i_loop_(Length, Length, _, _, CTA, CTA) :- !.

mct_i_loop_(I, Length, Last, Seq, CTA, CountTable) :-
  mct_j_loop_(I, Last, Length, Seq, CTA, CTA1),
  I1 is I + 1, !, mct_i_loop_(I1, Length, Last, Seq, CTA1, CountTable).

% ------------- %

mct_j_loop_(J, Last, _, _, CTA, CTA) :- J >= Last, !.

mct_j_loop_(J, Last, Length, Seq, CTA, CountTable) :-
  sub_string(Seq, J, Length, _, KeyString), string_to_atom(KeyString, Key),
  (get_assoc(Key, CTA, Value) ->
    V1 is Value + 1, put_assoc(Key, CTA, V1, CTA1)
  ;
    put_assoc(Key, CTA, 1, CTA1)),
  J1 is J + Length, !, mct_j_loop_(J1, Last, Length, Seq, CTA1, CountTable).

% ------------------------------- %

load_sequence(S, Seq) :- load_sequence_(S, fail, '', Seq), linkvar(loaded, Seq).

% ------------- %

load_sequence_(eof, _, Seq, Seq) :- !.

load_sequence_(S, Loading, Seq, RetSeq) :-
  read_line_to_codes(S, L),
  (at_end_of_stream(S) ->
    process_sequence(L, eof, Seq, RetSeq)
  ;
    (Loading ->
      process_sequence(L, S, Seq, RetSeq)
    ;
      ignore_sequence(L, S, Seq, RetSeq))).

% ------------- %

ignore_sequence([62,84,72,82,69,69|_], S, Seq, RetSeq) :- !, 
	load_sequence_(S, true, Seq, RetSeq).
ignore_sequence(_, S, Seq, RetSeq) :- !, load_sequence_(S, fail, Seq, RetSeq).

process_sequence([62|_], _, Seq, Seq) :- !.
process_sequence([59|_], S, Seq, RetSeq) :- !, load_sequence_(S, true, Seq, RetSeq).

process_sequence(L, eof, Seq, RetSeq) :-
  to_upper(L, UL), string_to_list(LS, UL), string_concat(Seq, LS, NewSeq),
  !, load_sequence_(eof, _, NewSeq, RetSeq).

process_sequence(L, S, Seq, RetSeq) :-
  to_upper(L, UL), string_to_list(LS, UL), string_concat(Seq, LS, NewSeq),
  !, load_sequence_(S, true, NewSeq, RetSeq).

% ------------------------------- %

to_upper(L, U) :- to_upper_(L, [], U).

% ------------- %

to_upper_([], UA, U) :- reverse(UA, U), !.

to_upper_([C|T], UA, U) :-
  is_lower(C), C1 is C - 32,
  !, to_upper_(T, [C1|UA], U).

to_upper_([C|T], UA, U) :-
  !, to_upper_(T, [C|UA], U).

% ------------- %

is_lower(C) :- C >= 97, C =< 122.

% ------------------------------- %

getvar(Id, Value) :- nb_getval(Id, Value).
setvar(Id, Value) :- nb_setval(Id, Value).
linkvar(Id, Value) :- nb_linkval(Id, Value).
dropvar(Id) :- nb_delete(Id).
