/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Dennis Decker Jensen
*/

segment = ""
do until segment = ">THREE"
	parse upper linein =1 segment +6
end

sequence = ""
parse upper linein line
do while line \= ""
	if verify(line, ">;", "Match") then leave
	sequence = sequence || line 
	parse upper linein line
end

call kfrequency sequence, 1
call kfrequency sequence, 2

say countdna("GGT", sequence)
say countdna("GGTA", sequence)
say countdna("GGTATT", sequence)
say countdna("GGTATTTTAATT", sequence)
say countdna("GGTATTTTAATTTATAGT", sequence)

exit 0

countdna: procedure
parse arg nucleotide, sequence
return countstr(nucleotide, sequence) || d2c(9) || nucleotide

kfrequency: procedure
parse arg sequence, sublen .

len = length(sequence) - sublen
table. = 0
table.subs = ""
do i = 1 for sublen
	do j = i to len by sublen
		sub = substr(sequence, j, sublen)
		table.sub = table.sub + 1
		if pos(sub, table.subs) = 0 then
			table.subs = table.subs sub
	end
end
table.0 = words(table.subs)

do i = 1 for table.0
	sub = word(table.subs, i)
	seqs.i = sub
	counts.i = table.sub
end
call qsort 1, table.0

do i = 1 for table.0
	say seqs.i format(counts.i*100/len, , 3)
end
say
return

qsort: procedure expose seqs. counts.
arg l, r
if r - l <= 1 then return      /* nothing to do */
i = random(l, r)               /* pick a random pivot */
parse value seqs.l seqs.i with seqs.i seqs.l /* swap pivot to start */
parse value counts.l counts.i with counts.i counts.l
last = l
do i = l+1 to r                /* partition */
	if counts.i > counts.l | ,
	   counts.i = counts.l & seqs.i < seqs.l then do
		last = last + 1
		parse value seqs.last seqs.i ,
		       with seqs.i seqs.last
		parse value counts.last counts.i ,
		       with counts.i counts.last
	end
end
parse value seqs.l seqs.last , /* restore pivot */
       with seqs.last seqs.l
parse value counts.l counts.last ,
       with counts.last counts.l
call qsort l, last             /* recurse */
call qsort last+1, r
return

