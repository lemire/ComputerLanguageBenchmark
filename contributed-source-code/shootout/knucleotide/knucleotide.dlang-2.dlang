// The Computer Language Benchmarks Game
// http://shootout.alioth.debian.org/

// Adapted by bearophile from my Python version


import std.stdio, std.string;


int[char[]] gen_freq(char[] seq, int frame) {
    int[char[]] freqs;
    auto ns = seq.length + 1 - frame;

    for (size_t ii; ii < ns; ++ii)
        freqs[ seq[ii .. ii + frame] ]++;
    return freqs;
}

void sort_seq(char[] seq, int length) {
    auto n = seq.length + 1 - length;
    auto freqs = gen_freq(seq, length);

    struct Pair {
        char[] k;
        int v;
        int opCmp(Pair otherPair) {
            return (v > otherPair.v) ? -1 : 1;
        }
    }

    auto pairs = new Pair[freqs.length];
    uint i = 0;
    foreach(k, v; freqs) {
        pairs[i] = Pair(k, v);
        i++;
    }

    foreach(p; pairs.sort)
        writefln("%s %.3f", p.k, 100.0*p.v/n);
    writefln();
}

void find_seq(char[] seq, char[] s) {
    auto t = gen_freq(seq, s.length);
    writefln((s in t) ? t[s] : 0, '\t', s);
}

char[] inplaceUpper(char[] s) {
    foreach(ref c; s)
        if ('a' <= c && c <= 'z')
            c -= 'a' - 'A';
    return s;
}

void main() {
    char[1000] line;
    while(fgets(line.ptr, line.length, stdin))
        if (line[0 .. 3] == ">TH")
            break;

    char[][] seq;
    while(fgets(line.ptr, line.length, stdin)) {
        if ((line[0] == '>') || (line[0] == ';'))
            break;
        char[] line2 = toString(line.ptr);
        if (line2[$-1] == '\n')
            seq ~= line2[0 .. $-1].dup;
        else
            seq ~= line2[0 .. $].dup;
    }

    auto sequence = seq.join("").inplaceUpper();

    sort_seq(sequence, 1);
    sort_seq(sequence, 2);

    foreach(se; split("GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT"))
        find_seq(sequence, se);
}