/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy, following James McIlree's Java program
*/

import java.io.*;
import Include;

void main(String[] args){
   let r = new BufferedReader(new InputStreamReader(System.in));
   let buffer = new StringBuffer();
   var ?String line; 

   while ((line = r.readLine()) != null){
      if (line.startsWith(">THREE")) break;
   }

   while ((line = r.readLine()) != null){
      let c = line[0];
      if (c == '>')
         break; 
      else if (c != ';')
         buffer.append(line.toUpperCase());
   }
   r.close;

   let kn = new KNucleotide(sequence: buffer.toString());
   kn.writeFrequencies(1);
   kn.writeFrequencies(2);

   kn.writeCount("GGT");
   kn.writeCount("GGTA");
   kn.writeCount("GGTATT");
   kn.writeCount("GGTATTTTAATT");
   kn.writeCount("GGTATTTTAATTTATAGT");
}


class KNucleotide {
   String sequence;
   int count = 1;


   void writeFrequencies(int k) {
      let frequencies = this.generateFrequencies(k);

      let list = new ArrayList(frequencies.values);
      sort(list, 
            (KNucleotide k1, KNucleotide k2) => {
               let i = k2.count - k1.count; 
               return i != 0 ? i : k2.sequence.compareTo(k1.sequence);
               }
            );

      let sum = sequence.length - k + 1.0;
      for (kn : list)
         println(kn.sequence + " " + (kn.count/sum * 100.0).toStringWith(3));

      println();
   }


   void writeCount(String nucleotideFragment) {
      let frequencies = this.generateFrequencies(nucleotideFragment.length);
      var count = 0;
      let item = frequencies[nucleotideFragment];
      if (item != null) count = item.count;
      println(count + "\t" + nucleotideFragment);
   }

   Map<String,KNucleotide> generateFrequencies(int length) {
      let HashMap<String,KNucleotide> frequencies = new HashMap();

      void kFrequency(int offset, int k) {
         let n = sequence.length - k + 1;
         for(int i=offset; i<n; i+=k) {
            let fragment = sequence.substring(i,i+k);
            let item = frequencies[fragment];
            if (item != null)
               item.count++;
            else
               frequencies[fragment] = new KNucleotide(sequence: fragment);
         }
      }

      for(int offset=0; offset<length; offset++) kFrequency(offset,length);
      return frequencies;
   }
}
