/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
   compile with
     gcc -pipe -Wall -O3 -fomit-frame-pointer -funroll-loops -lobjc
     
     (i.e., the same as C, but adding -lobjc and taking out -static)
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <objc/Object.h>

@interface Genepairlist : Object {
    @public
    char* genelist;
    double* iubprobs;
    int mysize;
}
-init: (char*) in_iub : (double*) in_iubprobs;
-makeCumulative;
@end

@interface FastaWriter : Object {
    Genepairlist* iubpairs;
    char* alu;
    int alulen;
    int mark;
    char* dst;
    int needed;
}
-writeFasta : (SEL) generator : (char*) header : (long) n;
-randomFasta;
-repeatFasta;
-setAlu : (char*) aluin;
-setGenePairlist : (Genepairlist*) gpin;
@end

@implementation Genepairlist
-init: (char*) in_iub : (double*) in_iubprobs {
    mysize = strlen(in_iub);
    genelist = in_iub;
    iubprobs = in_iubprobs;
    return self;
}
-makeCumulative {
    int i;
    double cp = 0;
    for (i = 0; i < mysize; i++) {
        cp += iubprobs[i];
        iubprobs[i] = cp;
    }
    return self;
}
@end

@implementation FastaWriter
-writeFasta : (SEL) generator : (char*) header : (long) n {
   long todo = n;
   char pick[61];
   dst = pick;
      printf (">%s\n", header);
   for (; todo > 0; todo -= 60) {
       needed = (todo < 60) ? todo : 60;
       [self perform: generator];
       pick[needed] = '\0';
       puts (pick);
   }
   return self;
}

-randomFasta {
    static long last = 42;
    int ii, i, lo, hi;
    double r;
    for (ii = 0; ii < needed; ii++) {
        r = ((double) (last = (last * 3877 + 29573) % 139968)) / 139968;
        if (r >= iubpairs->iubprobs[0]) {
            lo = 0;
            hi = iubpairs->mysize-1;
            while (hi > lo+1) {
                i = (hi + lo) / 2;
                if (r < iubpairs->iubprobs[i]) hi = i; else lo = i;
            }
            dst[ii] = iubpairs->genelist[hi];   
        } else {
            dst[ii] = iubpairs->genelist[0];
        }  
    }
    return self;
}

-repeatFasta {
    int copylen, dstmark;
    dstmark = 0;
    while (dstmark < needed) {
        copylen = alulen - mark;
        if (copylen > needed) copylen = needed;
        if (! mark && (copylen + dstmark > 60)) copylen = 60 - dstmark;
        memcpy(dst + dstmark, alu + mark, copylen);
        mark += copylen;
        dstmark += copylen;
        if (mark >= alulen) mark = 0;
    }
    return self;
}

-setAlu : (char*) aluin {
    alu = aluin;
    alulen = strlen(alu);
    mark = 0;
    return self;
}

-setGenePairlist : (Genepairlist*) gpin {
    iubpairs = gpin;
    return self;
}
@end

int main (int argc, char * argv[]) {
    int n = (argc>1) ? atoi(argv[1]) : 1000;
    char * alu1 =
       "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCA" \
       "CCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT" \
       "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCA" \
       "GGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC" \
       "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";
    double a1[] = {0.27, 0.12, 0.12, 0.27, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,
       0.02, 0.02, 0.02, 0.02, 0.02};
    double a2[] = {0.3029549426680, 0.1979883004921, 0.1975473066391,
       0.3015094502008};
       
    Genepairlist* iub = [[[Genepairlist alloc] init : "acgtBDHKMNRSVWY" : a1]
       makeCumulative];
    Genepairlist* homosapiens = [[[Genepairlist alloc] init : "acgt" : a2]
       makeCumulative];

    [[[FastaWriter alloc] setAlu : alu1] writeFasta : @selector(repeatFasta) :
       "ONE Homo sapiens alu" : n * 2];
    [[[FastaWriter alloc] setGenePairlist : iub] writeFasta :
       @selector(randomFasta) : "TWO IUB ambiguity codes" : n * 3];
    [[[FastaWriter alloc] setGenePairlist : homosapiens] writeFasta :
       @selector(randomFasta) : "THREE Homo sapiens frequency" : n * 5];

    return 0;
}

