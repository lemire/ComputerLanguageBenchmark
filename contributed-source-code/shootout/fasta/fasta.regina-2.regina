/* ------------------------------------------------------------------ */
/* The Great Computer Language Shootout                               */
/* http://shootout.alioth.debian.org/                                 */
/*                                                                    */
/* Contributed by Anthony Borla                                       */
/* ------------------------------------------------------------------ */

numeric digits 11 ; NULL = "" ; LAST = 42 ; LINELENGTH = 60

ALU = "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"||,
      "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"||,
      "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"||,
      "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"||,
      "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"||,
      "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"||,
      "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA "


IUB = "a 0.27 c 0.12 g 0.12 t 0.27",
      "B 0.02 D 0.02 H 0.02 K 0.02",
      "M 0.02 N 0.02 R 0.02 S 0.02",
      "V 0.02 W 0.02 Y 0.02"

HOMOSAPIENS = "a 0.3029549426680",
              "c 0.1979883004921",
              "g 0.1975473066391",
              "t 0.3015094502008"

N = ARG(1) ; if DATATYPE(N) \= 'NUM' | N < 1 then ; N = 1000

call repeat_fasta "ONE", "Homo sapiens alu", N * 2
call random_fasta "TWO", "IUB ambiguity codes", N * 3, make_cumulative(IUB) 
call random_fasta "THREE", "Homo sapiens frequency", N * 5, make_cumulative(HOMOSAPIENS) 

exit 0

/* ----------------------------- */

gen_random :
  LAST = (LAST * 3877 + 29573) // 139968
  return ARG(1) * LAST / 139968

/* ----------------------------- */

select_random :
  ctbl_ = ARG(1) ; rvalue_ = gen_random(1.0)

  if rvalue_ \< 1.0 then ; return WORD(ctbl_, 1)

  do while ctbl_ <> NULL
    parse var ctbl_ key_ value_ ctbl_
    if rvalue_ < value_ then ; return key_
  end

/* ----------------------------- */

make_cumulative : procedure expose NULL
  ptbl = ARG(1) ; cp = 0.0 ; ctbl = NULL

  do while ptbl <> NULL
    parse var ptbl key value ptbl
    cp = cp + value ; ctbl = ctbl key cp
  end

  return STRIP(ctbl)

/* ----------------------------- */

repeat_fasta : procedure expose LINELENGTH ALU
  id = ARG(1) ; desc = ARG(2) ; n = ARG(3)

  say ">"||id desc

  q = 1 ; linelen = LINELENGTH ; ALULEN = LENGTH(ALU)

  do while n > 0

    if n < linelen then ; linelen = n

    if linelen + q < ALULEN then do

      say SUBSTR(ALU, q, linelen)
      q = linelen + q

    end ; else do

      prefix = SUBSTR(ALU, q, ALULEN - q)
      q = 1 + linelen - LENGTH(prefix)
      say prefix || SUBSTR(ALU, 1, q - 1)

    end

    n = n - linelen
  end

  return

/* ----------------------------- */

random_fasta :
  id = ARG(1) ; desc = ARG(2) ; n_ = ARG(3) ; ctbl = ARG(4)

  say ">"||id desc

  linelen = LINELENGTH ; lineout = NULL

  do while n_ > 0
    if n_ < linelen then ; linelen = n_

    do j = 1 for linelen
      lineout = lineout || select_random(ctbl)
    end

    say lineout ; lineout = NULL ; n_ = n_ - linelen
  end

  return

