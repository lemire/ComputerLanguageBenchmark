/* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Xavier Oswald
*/

// SPLITFILE=fasta.li
Section Header

  + name := FASTA;

Section Inherit

  - parent_any:OBJECT := OBJECT;

Section Private

  - im           :INTEGER := 139968;

  - ia           :INTEGER := 3877;

  - ic           :INTEGER := 29573;

  - last         :INTEGER := 42;

  - line_length  :INTEGER := 60;

  - buffer_size  :INTEGER := 1024;

  - index        :INTEGER;

  - iub          :FAST_ARRAY[FREQUENCY];

  - homo_sapiens :FAST_ARRAY[FREQUENCY];

  - alu :STRING_CONSTANT :=
            "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\
            \GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\
            \CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\
            \ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\
            \GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\
            \AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\
            \AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";

  - alub    :FAST_ARRAY[CHARACTER] := FAST_ARRAY[CHARACTER].create (alu.count);

  - bbuffer :FAST_ARRAY[CHARACTER] := FAST_ARRAY[CHARACTER].create buffer_size;

  - rand (max:REAL_64) :REAL_64 <-
  (
    last := (last * ia + ic) % im;
    max * last / im
  );

  - create_iub <-
  (
    iub := FAST_ARRAY[FREQUENCY].create_with_capacity 15;
    iub.add_last(FREQUENCY.create('a', 0.27));
    iub.add_last(FREQUENCY.create('c', 0.12));
    iub.add_last(FREQUENCY.create('g', 0.12));
    iub.add_last(FREQUENCY.create('t', 0.27));
    iub.add_last(FREQUENCY.create('B', 0.02));
    iub.add_last(FREQUENCY.create('D', 0.02));
    iub.add_last(FREQUENCY.create('H', 0.02));
    iub.add_last(FREQUENCY.create('K', 0.02));
    iub.add_last(FREQUENCY.create('M', 0.02));
    iub.add_last(FREQUENCY.create('N', 0.02));
    iub.add_last(FREQUENCY.create('R', 0.02));
    iub.add_last(FREQUENCY.create('S', 0.02));
    iub.add_last(FREQUENCY.create('V', 0.02));
    iub.add_last(FREQUENCY.create('W', 0.02));
    iub.add_last(FREQUENCY.create('Y', 0.02));
  );

  - create_homo_sapiens <-
  (
    homo_sapiens := FAST_ARRAY[FREQUENCY].create_with_capacity 4;
    homo_sapiens.add_last(FREQUENCY.create('a', 0.3029549426680));
    homo_sapiens.add_last(FREQUENCY.create('c', 0.1979883004921));
    homo_sapiens.add_last(FREQUENCY.create('g', 0.1975473066391));
    homo_sapiens.add_last(FREQUENCY.create('t', 0.3015094502008));
  );

  - make_cumulative (a:FAST_ARRAY[FREQUENCY]) <-
  ( + cp :REAL_64;
    0.to (a.upper) do { i:INTEGER;
      cp := cp + (a.item i).p;
      (a.item i).put_p cp;
    };
  );

  - select_random a:FAST_ARRAY[FREQUENCY] :CHARACTER <-
  ( + return_char :CHARACTER;
    + random :REAL_64;
    + i,up:INTEGER;

    up := a.upper;
    random := rand (1.0);

    i := a.lower;
    {(i <= up) && {random >= a.item i.p}}.while_do {
      i := i + 1;
    };
    (i <= up).if {
      return_char := a.item i.c;
    } else {
      return_char := a.last.c;
    };

    return_char
  );

  - puts tab:NATIVE_ARRAY[CHARACTER] <- `puts(@tab)`;

  - pick:NATIVE_ARRAY[CHARACTER] := NATIVE_ARRAY[CHARACTER].create (line_length + 1);

  - make_random_fasta(id, desc:STRING_CONSTANT, a :FAST_ARRAY[FREQUENCY], n:INTEGER) <-
  ( + m :INTEGER;
    + n_temp :INTEGER;

    index  := 0;
    n_temp := n;

    '>'.print;
    id.print;
    ' '.print;
    desc.print;
    '\n'.print;

    {n_temp > 0}.while_do {
      m := n_temp.min line_length;
      0.to (m-1) do { i:INTEGER;
        pick.put (select_random a) to i;
      };
      pick.put '\0' to m;
      puts pick;
      n_temp := n_temp - line_length;
    };
  );

  - make_repeat_fasta(id, desc:STRING_CONSTANT, alu:STRING_CONSTANT, n:INTEGER ) <-
  ( + k, kn,j,i,idx :INTEGER;

    '>'.print;
    id.print;
    ' '.print;
    desc.print;
    '\n'.print;

    kn := alu.count;
    k := 1;
    i := n;
    {i >= 1}.while_do {
      j := i.min line_length;
      idx := 0;
      {j >= 1}.while_do {
        (k > kn).if {
           k := 1;
        };
        pick.put (alu.item k) to idx;
        k := k + 1;
        j := j - 1;
        idx := idx + 1;
      };
      pick.put '\0' to idx;
      puts pick;
      i := i - line_length;
    };
  );

Section Public

  - main <-
  ( + n :INTEGER;

    n := COMMAND_LINE.item 1.to_integer;

    create_iub;
    create_homo_sapiens;
    make_cumulative iub;
    make_cumulative(homo_sapiens);

    make_repeat_fasta("ONE", "Homo sapiens alu", alu, n * 2);
    make_random_fasta("TWO", "IUB ambiguity codes", iub, n * 3);
    make_random_fasta("THREE", "Homo sapiens frequency", homo_sapiens, n * 5);
  );
// class FASTA

// SPLITFILE=frequency.li
Section Header

  + name := FREQUENCY;

Section Inherit

  - parent_any:OBJECT := OBJECT;

Section Public

  + c :CHARACTER;

  + p :REAL_64;

  - create (p_c:CHARACTER, p_p:REAL_64) :SELF <-
  ( + result :SELF;

    result := clone;
    result.make(p_c,p_p);
    result
  );

  - make (p_c:CHARACTER, p_p:REAL_64) <-
  (
    c := p_c;
    p := p_p;
  );

  - put_p r:REAL_64  <-
  (
    p := r;
  );
// class FREQUENCY

