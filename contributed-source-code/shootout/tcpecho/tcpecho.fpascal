{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org 

  contributed by Ales Katona
}

program tcpecho;

{$mode objfpc}{$H+}

uses
  SysUtils, Sockets, BaseUnix, UnixType;

const
  M            = 6400;
  REPLY_SIZE   =   64;
  REQUEST_SIZE =   64;
  PORT         = 6747;
  
var
  Reply   : array[0..REPLY_SIZE   - 1] of Byte;
  Request : array[0..REQUEST_SIZE - 1] of Byte;
  
procedure DoServer;
var
  Server : Longint;
  Client : Longint;
  Addr   : TSockAddr;
  len    : Cardinal = SizeOf(Addr);
begin
  Addr.sin_addr:=StrToNetAddr('0.0.0.0');
  Addr.sin_port:=htons(PORT);
  Addr.sin_family:=AF_INET;

  Server:=fpSocket(AF_INET, SOCK_STREAM, 0);
  SetSocketOptions(Server, SOL_SOCKET, SO_REUSEADDR, 'TRUE', Length('TRUE'));
  fpBind(Server, @addr, len);
  fpListen(Server, 1);
  
  Client:=fpAccept(Server, @addr, @len);

  while fpRecv(Client, @Request[0], REQUEST_SIZE, 0) > 0 do
    fpSend(Client, @Reply[0], REPLY_SIZE, 0);
    
  CloseSocket(Client);
  CloseSocket(Server);
end;

procedure DoClient(const msg_count, msg_mult: Integer);
var
  Client  : Longint;
  Addr    : TSockAddr;
  len     : Cardinal = SizeOf(Addr);
  n       : Cardinal;
  Replies : Cardinal = 0;
  Bytes   : Cardinal = 0;
begin
  n:=msg_count * msg_mult;
  Addr.sin_addr:=StrToNetAddr('127.0.0.1');
  Addr.sin_port:=htons(PORT);
  Addr.sin_family:=AF_INET;

  Client:=fpSocket(AF_INET, SOCK_STREAM, 0);
  
  while fpConnect(Client, @Addr, len) < 0 do Sleep(1); // just in case
  len:=0;
  
  while n > 0 do begin
    fpSend(Client, @Request[0], REQUEST_SIZE, 0);
    len:=fpRecv(Client, @Reply[0], REPLY_SIZE, 0);
    Inc(Replies);
    Inc(Bytes, len);
    Dec(n);
  end;

  CloseSocket(Client);
  Writeln('replies: ', Replies, #9, 'bytes: ', Bytes);
end;

var
  N: Integer = 10;
  PID: TPid;
begin
  if ParamCount > 0 then N:=StrToInt(ParamStr(1));
  PID:=fpFork;
  if PID <> 0 then begin
    DoServer;
    FpWait(PID);
  end else DoClient(M, N);
end.

