/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
 
   contributed by Isaac Gouy (Clean novice)
*/

module matrix
import StdEnv, LanguageShootout

SIZE :== 30

Start = resultString (mmultLoop argi SIZE SIZE a b c)
   where
      a = initm (mkm SIZE SIZE) 0 1 SIZE SIZE
      b = initm (mkm SIZE SIZE) 0 1 SIZE SIZE      
      c = mkm SIZE SIZE

      mkm :: Int Int -> {#.{#Int}}   
      mkm nrows ncols = {createArray ncols 0 \\ i<-[0..nrows-1]} 

      initm m i count nrows ncols
         | i<nrows = initm {m&[i,j]=count+j \\ j<-[0..ncols-1]} 
            (i+1) (count+ncols) nrows ncols 
         = m

      resultString a =
         toString(a.[0,0]) +++ " " +++
         toString(a.[2,3]) +++ " " +++
         toString(a.[3,2]) +++ " " +++
         toString(a.[4,4]) +++ "\n"

mmultLoop n nrows ncols a b c
   | n==0 = c
   = mmultLoop (n-1) nrows ncols a b 
      (mmult nrows ncols a (transpose ncols nrows b) c)

mmult nrows ncols a bt c
   = {c&[i,j]= rmult 0 ncols 0 a.[i] bt.[j] \\ i<-[0..nrows-1], j<-[0..nrows-1]}
   where
      rmult :: !Int !.Int !Int !{#Int} !{#Int} -> Int
      rmult k n v a b
         | k<n = rmult (k+1) n (v + a.[k]*b.[k]) a b
         = v

transpose :: !Int !Int !{#.{#Int}} -> {#.{#Int}}
transpose nrows ncols m = { {m.[i,j] \\ i<-[0..nrows-1]} \\ j<-[0..ncols-1]} 

