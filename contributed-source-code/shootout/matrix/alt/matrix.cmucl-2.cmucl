;;; -*- mode: lisp -*-
;;; $Id$
;;; http://shootout.alioth.debian.org/
;;; from Paul Foley
;;; Multi-lisp modifications by Brent Fulgham

(defun matmul (a b c n m k)
  (declare (type (simple-array (unsigned-byte 32) (* *)) a b c)
           (fixnum n m k))
  (let ((sum 0)
        (i1 (- m))
        (k2 0))
    (declare (type (unsigned-byte 32) sum) (type fixnum i1 k2))
    (dotimes (i n c)
      (declare (fixnum i))
      (incf i1 m) ;; i1=3Di*m
      (dotimes (j k)
        (declare (fixnum j))
        (setf sum 0)
        (setf k2 (- k))
        (dotimes (l m)
          (declare (fixnum l))
          (incf k2 k) ;; k2=3D l*k
          (incf sum (the (unsigned-byte 32)
                      (+ (the (unsigned-byte 32)
                           (* (row-major-aref a (+ i1 l))
                              (row-major-aref b (+ k2 j))))))))
        (setf (row-major-aref c (+ i1 j)) sum)))))

(defun make-matrix (rows cols)
  (declare (type fixnum rows cols))   ; array dimensions can't be > fixnum
  (let ((matrix (make-array (list rows cols) :element-type '(unsigned-byte 32))))
    (loop for i of-type fixnum below (array-total-size matrix)
          do (setf (row-major-aref matrix i) (1+ i)))
    matrix))

(defun main ()
  (let ((n (parse-integer (or (car (last #+sbcl sb-ext:*posix-argv*
                                         #+cmu  ext:*command-line-strings*)) "1"))))
    (declare (fixnum n))
    (let* ((m1 (make-matrix 30 30))
           (m2 (make-matrix 30 30))
           (m3 (make-matrix 30 30)))
      (loop repeat n do (matmul m1 m2 m3 30 30 30))
      (format t "~A ~A ~A ~A~%"
              (aref m3 0 0) (aref m3 2 3) (aref m3 3 2) (aref m3 4 4)))))
