-- $Id$
-- http://www.bagley.org/~doug/shootout/
-- from Brian Gregor

module Main where

import System

type Vector = [Integer]
type Matrix = [Vector]

main = do 
         ~[n] <- getArgs
         putStrLn (calcMat (read n::Int) [[]])

-- dotProd, columns, and matMult taken from
-- "Haskell: The Craft of Functional Programming"
-- by Simon Thompson
dotProd :: Vector -> Vector -> Integer
dotProd xs ys = sum [x*y | (x,y) <- zip xs ys]

columns :: Matrix -> Matrix
columns y = [[ z!!j | z <-y] | j <- [0..s]]
          where s = length (head y) - 1

matMult :: Matrix -> Matrix -> Matrix
matMult m p = [[dotProd r c | c <-columns p] | r <- m]

calcMat :: Int -> Matrix -> String
calcMat n mat 
     | n > 0 = calcMat (n-1) (matMult m1 m2) 
     | otherwise = (show (m3 !! 0 !! 0)) ++ " " ++ (show (m3 !! 2 !! 3))
                   ++ " " ++ (show (m3 !! 3 !! 2)) ++ " " ++
                   (show (m3 !! 4 !! 4))
     where m3 = matMult m1 m2
           m1 = [[ i*30+j+1 | j <- [0..29]] | i <- [0..29]]
           m2 = [[ i*30+j+1 | j <- [0..29]] | i <- [0..29]]
