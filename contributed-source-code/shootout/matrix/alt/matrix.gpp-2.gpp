// -*- mode: c++ -*-
// $Id$
// http://www.bagley.org/~doug/shootout/
// from katsuo2

#include <iostream> 
#include <vector> 
#include <stdlib.h> 

using namespace std; 

class CMatrix 
{ 
private: 
    vector<vector<int> > m; 
    int m_Rows, m_Cols; 
public: 
    CMatrix(int rows, int cols); 
    void Clear(); 
    friend CMatrix operator*(const CMatrix &m1, const CMatrix &m2); 
    friend ostream& operator<<(ostream &o, const CMatrix &m); 
}; 

int main(int argc, char *argv[]) { 
    int n = ((argc == 2) ? atoi(argv[1]) : 1); 
    const int size = 30; 
    
    CMatrix m1(size, size), m2(size, size), mm(size, size); 
    for (int i = 0; i < n; i++) { 
	mm = m1 * m2; 
    } 
    cout << mm << endl; 
    return EXIT_SUCCESS; 
} 

CMatrix::CMatrix(int rows, int cols) 
    : m_Rows(rows), m_Cols(cols), m(rows) 
{ 
    int count(1); 
    for (int i = 0; i < rows; i++){ 
	m[i].resize(cols); 
	for (int j = 0; j < cols; j++) { 
	    m[i][j] = count++; 
	} 
    } 
} 

void CMatrix::Clear() 
{ 
    for (int i = 0; i < m_Rows; i++) 
	for (int j = 0; j < m_Cols; j++) 
	    m[i][j] = 0; 
} 

CMatrix operator*(const CMatrix &m1, const CMatrix &m2) 
{ 
    //assert(m1.m_Rows==m2.m_Rows && m1.m_Cols==m2.m_Cols); 
    CMatrix result(m1.m_Rows, m1.m_Cols); 
    for (int i = 0; i < m1.m_Rows; i++) { 
	for (int j = 0; j < m1.m_Cols; j++) { 
	    int val(0); 
	    for (int k = 0; k < m1.m_Cols; k++) { 
		val += m1.m[i][k] * m2.m[k][j]; 
	    } 
	    result.m[i][j] = val; 
	} 
    } 
    return result; 
} 

ostream& operator<<(ostream &o, const CMatrix &mm) 
{ 
    return o << mm.m[0][0] << " " << mm.m[2][3] << " " << mm.m[3][2] << " " << mm.m[4][4]; 
} 
