#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id$
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (define size 30)

  (define (mkmatrix rows cols)
    (let ((mx (make-vector rows 0))
	  (count 1))
      (do ((i 0 (1+ i)))
	  ((= i rows))
	(let ((row (make-vector cols 0)))
	  (do ((j 0 (1+ j)))
	      ((= j cols))
	    (aset row j count)
	    (setq count (+ count 1)))
	  (aset mx i row)))
      mx))

  (define (num-cols mx)
    (let ((row (aref mx 0)))
      (length row)))

  (define (num-rows mx)
    (length mx))

  (define (mmult rows cols m1 m2)
    (let ((m3 (make-vector rows 0)))
      (do ((i 0 (1+ i)))
	  ((= i rows))
	(let ((m1i (aref m1 i))
	      (row (make-vector cols 0)))
	  (do ((j 0 (1+ j)))
	      ((= j cols))
	    (let ((val 0))
	      (do ((k 0 (1+ k)))
		  ((= k cols))
		(setq val (+ val (* (aref m1i k)
				    (aref (aref m2 k) j)))))
	      (aset row j val)))
	  (aset m3 i row)))
      m3))

  (define (matrix-print m)
    (do ((i 0 (1+ i)))
	((= i (num-rows m)))
      (let ((row (aref m i)))
	(do ((j 0 (1+ j)))
	    ((= j (num-cols m)))
	  (princ (aref row j))
	  (if (< j (num-cols m))
	      (princ " ")))
	(princ "\n"))))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (let ((mm 0)
	  (m1 (mkmatrix size size))
	  (m2 (mkmatrix size size)))
      (let loop ((iter n))
	(cond ((> iter 0)
	       (setq mm (mmult size size m1 m2))
	       (loop (- iter 1)))))
      (let ((r0 (aref mm 0))
	    (r2 (aref mm 2))
	    (r3 (aref mm 3))
	    (r4 (aref mm 4)))
	(princ (aref r0 0))
	(princ " ")
	(princ (aref r2 3))
	(princ " ")
	(princ (aref r3 2))
	(princ " ")
	(princ (aref r4 4))
	(princ "\n")))))
