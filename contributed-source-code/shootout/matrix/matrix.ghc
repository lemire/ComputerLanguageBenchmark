-- $Id$
-- http://shootout.alioth.debian.org/
-- originally from Julian Assange, but
-- rewritten by Malcolm Wallace

module Main(main) where
import System(getArgs, exitWith, ExitCode(..))
import Numeric(readDec)
import List(transpose)

main = do
       arg <- getArgs
       let n = case arg of [n] -> (fst.head.readDec) n; _ -> 1
           m1 = mkmat size
           m2 = m1
           mm = strictlast (zipWith mmult (replicate n m1) (replicate n m2))
       putStrLn (disp mm 0 0 ++ " " ++
		  disp mm 3 2 ++ " " ++
		  disp mm 2 3 ++ " " ++
		  disp mm 4 4)
    where
	  disp m row col  = show (m!!row!!col)

strictlast [x] = x
strictlast (x:xs) | force x = strictlast xs
force [] = True
force (x:xs) | inner x = force xs
inner [] = True
inner (x:xs) = x `seq` inner xs

size = 30
mkmat x    = [[(y-1)*x+1..y*x]| y <- [1..x]]
mmult a b  = [[dot row col 0 | col <- a]| row <- transpose b]
       where
	       dot :: [Int] -> [Int] -> Int -> Int
	       dot (x:xs) (y:ys) z = dot xs ys (z + x*y)
	       dot  _      _     z = z

-- slightly slower transposing mmult in one line:
--  mmult a b  = [[sum$zipWith (*) row col 0 | col <- transpose a]| row <-b]

