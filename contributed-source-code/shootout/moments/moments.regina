/* ------------------------------------------------------------------ */
/* The Great Computer Language Shootout                               */
/* http://shootout.alioth.debian.org/                                 */
/*                                                                    */
/* Contributed by Dennis Decker Jensen                                */
/*                                                                    */
/* Modified by Anthony Borla. Changes include:                        */
/*                                                                    */
/* * Iterative version of 'qsort' replacing slower recursive version  */
/* * Use of C library sqrt', replacing native code implementation     */
/* * Altered code style to conform with my other REXX contributions   */
/* ------------------------------------------------------------------ */

numeric digits 11

/* ----------------------------- */

call initSqrt

/* ----------------------------- */

sum = 0

do n = 1 by 1 while LINES() > 0
  line = LINEIN() ; if line == "" then ; leave
  sum = sum + line
  nums.n = line
end

n = n - 1 ; nums.0 = n ; mean = sum / n

parse value 0 0 0 0 with average_deviation variance skew kurtosis

do i = 1 for n
  deviation = nums.i - mean
  average_deviation = average_deviation + abs(deviation)
  variance = variance + deviation ** 2
  skew = skew + deviation ** 3
  kurtosis = kurtosis + deviation ** 4
end

average_deviation = average_deviation / n
variance = variance / (n - 1)
standard_deviation = sqrt(variance)

if variance > 0 then do
  skew = skew / (n * variance * standard_deviation)
  kurtosis = kurtosis / (n * variance * variance) - 3.0
end

call qsort 1, nums.0
mid = TRUNC(n / 2) ; k = mid + 1

if n // 2 = 1 then
  median = nums.k
else
  median = (nums.mid + nums.k) / 2

say "n:                 " n
say "median:            " FORMAT(median,, 6)
say "mean:              " FORMAT(mean,, 6)
say "average_deviation: " FORMAT(average_deviation,, 6)
say "standard_deviation:" FORMAT(standard_deviation,, 6)
say "variance:          " FORMAT(variance,, 6)
say "skew:              " FORMAT(skew,, 6)
say "kurtosis:          " FORMAT(kurtosis,, 6)

exit 0

/* ----------------------------- */

initSqrt : procedure
  sqrt.calltype = 'cdecl as function with parameters'
  sqrt.return.type = 'float64'
  sqrt.return.name = 'return value'

  sqrt.0 = 1

  sqrt.1.type = 'float64'
  sqrt.1.name = 'number'

  err = rxFuncDefine('sqrt', 'libm.so.6', 'sqrt', 'sqrt.')

  if err \= 0 then
    say "Error registering function 'sqrt'"

  return

/* ----------------------------- */

qsort : procedure expose nums. 
  push ARG(1) ARG(2) 

  do while QUEUED() > 0 
    parse pull l r 

    if l < r then do

      i = RANDOM(l, r)
      parse value nums.l nums.i with nums.i nums.l
      last = l
      do i = l + 1 to r
        if nums.i < nums.l then do
          last = last + 1
          parse value nums.last nums.i with nums.i nums.last
        end
      end
      parse value nums.l nums.last with nums.last nums.l

      push l last ; push (last + 1) r
    end 
  end 

  return 
