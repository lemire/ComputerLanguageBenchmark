/* The Great Computer Language Shootout 
   contributed by John van Groningen (Clean Guru!)
 
   http://shootout.alioth.debian.org/
*/

module moments
import StdEnv, StdOverloadedList, LanguageShootout, Heapsort

Start world  
   # (console, world) = stdio world
   # (a,suma) = sumNumbers console 0.0 [#!]
   # (median,n,a) = median a   
   # mean = suma / toReal n      
   # (adev,var,skew,kurt) = loop a mean 0.0 0.0 0.0 0.0 (n-1)
   = resultstring (toReal n) mean median adev var skew kurt    

   where         
   sumNumbers :: !*File !Real .[#Real!] -> *(*{#Real},Real)   
   sumNumbers f suma a
      #! (ok,r,f) = freadr f
      | not ok = (toArray a, suma)
      = sumNumbers f (suma+r) [# r:a !]

   toArray :: [#Real!] -> *{#Real}
   toArray a = {x \\ x <|- a}           

   // Use modified Quicksort rather than Wirth's k select       
   median a
      # a = find_medians a  
      # (n,a) = usize a
      # m = middle a ((n/2)-1) (n/2) n
      = (m,n,a)

      where 
      middle a=:{[m0]=am0,[m]=am} m0 m n
         | isOdd n = am
                   = (am0 + am) / 2.0

   loop :: !.{#Real} !Real Real Real Real Real Int -> . (!Real,!Real,!Real,!Real) 
   loop a mean adev var skew kurt i
      | i<0
          = (adev,var,skew,kurt)
	  #! ai=a.[i]
	  # dev = ai - mean
	  # dev2 = dev*dev
	  # dev3 = dev2*dev
	  = loop a mean (adev + abs dev)(var + dev2)(skew + dev3)(kurt + dev3*dev)(i-1)

find_medians :: *{#Real} -> .{#Real}
find_medians a0
    # (n_elements,a) = usize a0
    # k = (n_elements>>1) + (n_elements bitand 1)
    = quick_sort1 0 (n_elements-1) k a
    where
        quick_sort0 :: !Int !Int !Int !*{#Real} -> *{#Real}
        quick_sort0 b e k a
            | k>=b && k<=e+1
                = quick_sort1 b e k a
                = a

        quick_sort1 b e k a
            | b>=e
                = a
        quick_sort1 b e k a=:{[b]=ab}
            # m=(b+e)>>1
            # (am,a) = a![m]
            = find_large am (b+1) e e b k {a & [m]=ab}
        where
            find_large am l e r b k a
                | l<=e && a.[l]<=am
                    = find_large am (l+1) e r b k a
                    = find_small_or_equal am r b l e k a

            find_small_or_equal am r b l e k a
                | r>b && a.[r]>am
                    = find_small_or_equal am (r-1) b l e k a
                | l<r
                    # (al,a)=a![l]
                      (ar,a)=a![r]
                    = find_large am (l+1) e (r-1) b k {a & [l]=ar,[r]=al}
           	| b==r
                    = quick_sort2 (r-1) (r+1) b e k {a & [b]=am}
                    # (ar,a)=a![r]
                    = quick_sort2 (r-1) (r+1) b e k {a & [r]=am,[b]=ar}

            quick_sort2 l r b e k a
                | l-b>=e-r
                    = quick_sort0 b l k (quick_sort0 r e k a)
                    = quick_sort0 r e k (quick_sort0 b l k a)   

   resultstring n mean median ad v s k = 
      "n:                  " +++ (toString n) +++ "\n" +++ 
      "median:             " +++ (toStringWith 6 median) +++ "\n" +++ 
      "mean:               " +++ (toStringWith 6 mean) +++ "\n" +++            
      "average_deviation:  " +++ (toStringWith 6 adev) +++ "\n" +++ 
      "standard_deviation: " +++ (toStringWith 6 sdev) +++ "\n" +++
      "variance:           " +++ (toStringWith 6 var) +++ "\n" +++
      "skew:               " +++ (toStringWith 6 skew) +++ "\n" +++
      "kurtosis:           " +++ (toStringWith 6 kurt) +++ "\n"

      where                                         
      adev = ad / n
      var = v / (n-1.0)
      sdev = sqrt var
      skew = s / (n*var*sdev)
      kurt = k / (n*var*var)-3.0

