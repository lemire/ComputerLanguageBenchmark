module:    moments
synopsis:  implementation of "Statistical Moments" benchmark
author:    Peter Hinely
           Anthony Borla [added kludge to correct output format] 
copyright: public domain
use-libraries: common-dylan, io, transcendental
use-modules: common-dylan, standard-io, streams, format-out, transcendental


define constant <vector-of-doubles> = limited(<simple-vector>, of: <double-float>);


define function kth-smallest (a :: <vector-of-doubles>, k :: <integer>) => kth-smallest :: <double-float>;
  let L = 0;
  let R = A.size - 1;
  while (L < R)
     let X = A[K];
     let I = L;
     let J = R;
     until ((J < K) | (K < I))
       while (A[I] < X) I := I + 1; end;
       while (X < A[J]) J := J - 1; end;
       let W = A[I]; A[I] := A[J]; A[J] := W;
       I := I + 1; J := J - 1;
     end;
     if (J < K) L := I; end;
     if (K < I) R := J; end;
  end;
  a[k];
end;


define function maximum (vec :: <vector-of-doubles>, limit :: <integer>) => res :: <double-float>;
  let current-max = vec[0];
  for (i from 1 below limit)
    if (vec[i] > current-max)
       current-max := vec[i];
    end;
  end;
  current-max;
end;


define function main () => ();
  let lines = make(<stretchy-vector>);

  let line = #f;
  while (line := read-line(*standard-input*, on-end-of-stream: #f))
    add!(lines, line);
  end;

  let nums = make(<vector-of-doubles>, size: lines.size, fill: 0.0);
  map-into(nums, string-to-float, lines);

  let sum = 0.0;

  // use a for loop instead of "reduce1" so "+" can be resolved.
  // To-do: test that this is really necessary after we fix all the other gf_calls
  for (num in nums)
    sum := sum + num;
  end;

  let n = nums.size;
  let mean = sum / n;
  let average-deviation = 0.0;
  let variance = 0.0;
  let skew = 0.0;
  let kurtosis = 0.0;

  for (num in nums)
    let deviation = num - mean;
    average-deviation := average-deviation + abs(deviation);
    variance := variance + (deviation ^ 2);
    skew := skew + (deviation ^ 3);
    kurtosis := kurtosis + (deviation ^ 4);
  end;

  average-deviation := average-deviation / n;
  variance := variance / (n - 1);
  let standard-deviation = sqrt(variance);

  if (variance > 0.0)
    skew := skew / (n * variance * standard-deviation);
    kurtosis := (kurtosis / (n * variance * variance)) - 3.0;
  end;

  let mid = floor/(n, 2);

  kth-smallest(nums, mid);

  let median = if (even?(n))
                 floor/(nums[mid] + maximum(nums, mid), 2);
               else
                 nums[mid];
               end;


  local method padr(s :: <string>, padlen :: <integer>, c :: <character>) => (<string>);
    let reqlen = size(s) - padlen;
    if (reqlen < 0)
      s := concatenate(s, make(<string>, size: abs(reqlen), fill: c));
    end if;
    s;
  end method padr;


  format-out("n:                  %d\n", n);
  format-out("median:             %s\n", padr(format-to-string("%.6f", median), 6, '0'));
  format-out("mean:               %s\n", padr(format-to-string("%.6f", mean), 6, '0'));
  format-out("average_deviation:  %s\n", padr(format-to-string("%.6f", average-deviation), 6, '0'));
  format-out("standard_deviation: %s\n", padr(format-to-string("%.6f", standard-deviation), 6, '0'));
  format-out("variance:           %s\n", padr(format-to-string("%.6f", variance), 6, '0'));
  format-out("skew:               %s\n", padr(format-to-string("%.6f", skew), 6, '0'));
  format-out("kurtosis:           %s\n", padr(format-to-string("%.6f", kurtosis), 6, '0'));
end function;


main();

