;;; -*- mode: scheme -*-
;;; $Id$
;;; http://shootout.alioth.debian.org
;;;
;;; Improved version by Sven Hartrumpf

(module moments
        (extern (macro printf::int (string double) "printf"))
        (main main))

(define vector-for-each (lambda (pred v)
  (do ((i 0 (+ i 1))
       (v-length (vector-length v)))
      ((>= i v-length))
    (pred (vector-ref v i)))))


; algorithm from C.A.R. Hoare:

(define vector-kmedian! (lambda (a n k)
  (let ((a-offset 0))
    (define (a-ref i)
      (vector-ref a (+ i a-offset)))
    (define (a-set! i value)
      (vector-set! a (+ i a-offset) value))
    (let loop ()
      (let ((b (a-ref (random n)))
            (i 0)
            (j (- n 1)))
        (let loop-for-swap ()
          (let iter () (cond ((< (a-ref i) b)
                              (set! i (+ i 1))
                              (iter))))
          (let iter () (cond ((> (a-ref j) b)
                              (set! j (- j 1))
                              (iter))))
          (cond ((< i j)
                 (let ((tmp (a-ref i)))
                   (a-set! i (a-ref j))
                   (a-set! j tmp)
                   (set! i (+ i 1))
                   (set! j (- j 1))
                   (loop-for-swap)))
                (else
                  (cond ((< (a-ref j) b)
                         (set! j (+ j 1))))
                  (cond ((> (a-ref i) b)
                         (set! i (- i 1)))))))
        (cond ((< i k)
               (let ((i1 (+ i 1)))
                 (set! k (- k i1))
                 (set! n (- n i1))
                 (set! a-offset (+ a-offset i1))
                 (loop)))
              ((> j k)
               (set! n j)
               (loop))))))))


;

(define vector-max (lambda (v start end)
  (let ((m (vector-ref v start)))
    (do ((i (+ start 1) (+ i 1)))
      ((>= i end) m)
      (let ((x (vector-ref v i)))
        (cond ((> x m)
               (set! m x))))))))


(define (main args)
  (let* ((sum 0.0)
         (nums (list->vector
                 (let loop ((num (read))
                            (l '()))
                   (cond ((eof-object? num)
                          l)
                         (else
                           (set! sum (+ sum num))
                           (loop (read) (cons num l)))))))
         (n (vector-length nums))
         (mean (/ sum n))
         (average_deviation 0.0)
         (standard_deviation 0.0)
         (variance 0.0)
         (skew 0.0)
         (kurtosis 0.0)
         (median 0.0))
        (vector-for-each
          (lambda (num)
            (let* ((deviation (- num mean))
                   (deviation2 (* deviation deviation)))
              (set! average_deviation (+ average_deviation (abs deviation)))
              (set! variance (+ variance deviation2))
              (set! deviation2 (* deviation2 deviation))
              (set! skew (+ skew deviation2))
              (set! kurtosis (+ kurtosis (* deviation2 deviation)))))
          nums)

        (set! average_deviation (/ average_deviation n))
        (set! variance (/ variance (- n 1)))
        (set! standard_deviation (sqrt variance))

        (cond ((> variance 0.0)
               (set! skew (/ skew (* n variance standard_deviation)))
               (set! kurtosis (- (/ kurtosis (* n variance variance))
                                 3.0))))

        (let ((mid (quotient n 2)))
          (vector-kmedian! nums n mid)
          (set! median (if (zero? (modulo n 2))
                         (/ (+ (vector-ref nums mid) (vector-max nums 0 mid))
                            2.0)
                         (vector-ref nums mid))))

        (print "n:                  " n)
        (printf #"median:             %f\n" median)
        (printf #"mean:               %f\n" mean)
        (printf #"average_deviation:  %f\n" average_deviation)
        (printf #"standard_deviation: %f\n" standard_deviation)
        (printf #"variance:           %f\n" variance)
        (printf #"skew:               %f\n" skew)
        (printf #"kurtosis:           %f\n" kurtosis)))

