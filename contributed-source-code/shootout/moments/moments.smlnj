(* moments.sml
 *
 *   Calculate some statistics for univariate data samples.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 *)
structure Test:sig val main:string*string list->OS.Process.status end = struct

    infix 8 $  val op $ = Unsafe.Array.sub
    infix 3 <- fun (a, i) <- x = Unsafe.Array.update (a, i, x)

    (* min array size in sample: *)
    val SZ = 4096
    (* empty sample: *)
    val empty = (Array.array (SZ, 0.0), SZ, 0, 0.0, 0.0, 0.0, 0.0)

    (* add a point to the sample:
     *   a sample is a tuple of:
     *      - the array of points
     *      - currently allocated size of the array
     *      - current number of points
     *      - sum of points^4
     *      - sum of points^3
     *      - sum of points^2
     *      - sum of points *)
    fun point (x:real, (a, sz, n, sx4, sx3, sx2, sx1)) =
	let val x2 = x*x val (x3, x4) = (x2*x, x2*x2)
	    val (a, sz) =
		if n<sz then (a, sz)
		else let val sz=sz+sz
			 val b=Array.tabulate(sz,fn i=>if i<n then a$i else 0.0)
		     in (b, sz) end
	in (a,n) <- x; (a, sz, n+1, sx4+x4, sx3+x3, sx2+x2, sx1+x) end

    (* calculate moments etc. of the sample *)
    fun moments (a, sz, ni, sx4, sx3, sx2, sx1) =
	let val n = real ni         val n' = n - 1.0
	    val m = sx1/n           val m2 = m*m         val m3 = m2*m
	    val sd2 = (sx2 + m*(n*m-2.0*sx1))/n'
	    val sd = Math.sqrt sd2  val (sd3, sd4) = (sd*sd2, sd2*sd2)
	    val sk = (sx3-m*(3.0*(sx2-sx1*m)+n*m2))/(n*sd3)
	    val k = ((sx4+m*(6.0*sx2*m-4.0*(sx3+sx1*m2)+n*m3))/(n*sd4))-3.0
	in (a, sz, ni, n, m, sd2, sd, sk, k) end

    (* initialize random number generator *)
    val rand = Random.rand (123, 73256)

    (* select i-th order statistic from unsorted array: *)
    fun select (a: real array, n, i) =
	let fun x + y = Word.toIntX (Word.+ (Word.fromInt x, Word.fromInt y))
	    fun x - y = Word.toIntX (Word.- (Word.fromInt x, Word.fromInt y))
	    (* random partition: *)
	    fun rp (p, r) =
		let fun sw(i,j) = let val t=a$i in (a,i)<-a$j; (a,j)<-t end
		    val q = Random.randRange (p, r) rand
		    val qv = a$q
		    val _ = if q<>p then ((a,q)<-a$p; (a,p)<-qv) else ()
		    fun up i = if i>r orelse a$i>=qv then i else up(i+1)
		    fun dn i = if i<p orelse a$i<=qv then i else dn(i-1)
		    fun lp (i, j) =
			let val (i, j) = (up i, dn j)
			in if i>j then let val q' = i-1 in sw(p,q'); (q',qv) end
			   else (sw(i,j); lp (i+1, j-1))
			end
		in lp (p+1, r) end
	    (* random select: *)
	    fun rs (p, r) =
		if p=r then a$r
		else let val (q, qv) = rp (p, r)
		     in if i=q then qv else if i<q then rs(p,q-1) else rs(q+1,r)
		     end
	in rs (0, n-1) end

    (* select maximum element with index < n *)
    fun getmax (a, n) =
	let fun l (i, m) = if i >= n then m else l (i+1, Real.max (m, a$i))
	in l (1, a$0) end

    fun main _ =
	let fun gather data =
		case TextIO.inputLine TextIO.stdIn of
		    NONE => data
		  | SOME l => (case Real.fromString l of
				   SOME x => gather (point (x, data))
				 | NONE => gather data)

	    val (a, sz, n, nr, m, sd2, sd, sk, k) = moments (gather empty)
	    fun ad (i, ds) = if i>=n then ds/nr else ad (i+1, ds + abs(a$i-m))

	    val mid = n div 2 val m0 = select (a, n, mid)
	    val med = if n mod 2 <> 0 then m0 else (m0 + getmax (a, mid)) / 2.0

	    open Format
	in formatf "n:                  %d\nmedian:             %f\n\
		   \mean:               %f\naverage_deviation:  %f\n\
		   \standard_deviation: %f\nvariance:           %f\n\
		   \skew:               %f\nkurtosis:           %f\n"
           print [INT n,   REAL med, REAL m,  REAL (ad (0, 0.0)),
		  REAL sd, REAL sd2, REAL sk, REAL k];
	   OS.Process.success
	end
end
