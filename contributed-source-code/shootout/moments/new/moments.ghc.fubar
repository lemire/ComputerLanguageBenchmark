-- $Id$
-- http://www.bagley.org/~doug/shootout/
-- from Brian Gregor

module Main where

import IO 
import System

-- read standard input
main = do
        input <- getContents
	putAns (lines input)         

-- print out the answers
putAns :: [String] -> IO ()
putAns st_nums = do
	           putStrLn ("n:                  " ++ (show n))
                   putStrLn ("median:             " ++ (show (median nums n)))
		   putStrLn ("mean:               " ++ (show mean))
		   putStrLn ("average_deviation:  " ++ (show avg_dev))
		   putStrLn ("standard_deviation: " ++ (show std_dev))
		   putStrLn ("variance:           " ++ (show var))
		   putStrLn ("skew:               " ++ (show skew))
		   putStrLn ("kurtosis:           " ++ (show kurt))
                 where
	  	   n = fromIntegral (length nums)
		   nums = strToDoub st_nums
		   sum_l = sum nums
		   mean = sum_l / n
		   deviation = [ x - mean | x <- nums]
		   avg_dev = (sum [abs x | x <- deviation])/ n
		   var = (sum [x**2 | x <- deviation]) / (n-1)
		   std_dev = sqrt var
		   skew = (sum [x**3 | x <- deviation]) / (n*var*std_dev)
		   kurt = (sum [x**4 | x <- deviation]) / (n*var*var)-3.0

-- convert the strings to doubles
strToDoub :: [String] -> [Double]
strToDoub nums = [read x::Double | x <- nums]

-- calculate the median
median :: [Double] -> Double -> Double
median nums n = mid (qSort nums)
       where 
         mid x 
           | odd (length x) = x!! midpt
           | otherwise       = ((x!!(midpt-1)) + (x!!midpt)) / 2.0
         midpt :: Int
         midpt = floor (n/2) 

-- Sorting: the various languages use various algorithms
-- here's  a tail-recursive optimized quicksort from 
-- "Algorithms - a Functional Approach" by
-- Fethi Rabhe & Guy Lapalme
qSort :: [Double] -> [Double]
qSort l = qs l []
     where qs [] s = s
           qs [x] s = (x:s)
           qs (pivot:rest) s = split pivot rest [] [] s
           split pivot [] lower upper s 
                 = qs lower (pivot : (qs upper s))
           split pivot (x:xs) lower upper s
                 = if x < pivot
                   then split pivot xs (x:lower) upper s
                   else split pivot xs lower (x:upper) s
