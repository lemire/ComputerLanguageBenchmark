;;; -*- mode: scheme -*-
;;; $Id$
;;; http://www.bagley.org/~doug/shootout/

(define (main args)
  (let* ((sum 0.0)
	 (numlist (let loop ((line (read-line)) (numlist '()))
		    (cond ((eof-object? line) numlist)
			  (else
			   (let ((num (string->real line)))
			     (set! sum (+ num sum))
			     (loop (read-line) (cons num numlist))))))))
    (let ((n (length numlist)))
      (let ((mean (/ sum n))
	    (average_deviation 0.0)
	    (standard_deviation 0.0)
	    (variance 0.0)
	    (skew 0.0)
	    (kurtosis 0.0)
	    (median 0.0)
	    (deviation 0.0))
	(let loop ((nums numlist))
	     (if (not (null? nums))
		 (begin
		   (set! deviation (- (car nums) mean))
		   (set! average_deviation (+ average_deviation (abs deviation)))
		   (set! variance (+ variance (expt deviation 2.0)))
		   (set! skew (+ skew (expt deviation 3.0)))
		   (set! kurtosis (+ kurtosis (expt deviation 4)))
		   (loop (cdr nums)))))

	(set! average_deviation (/ average_deviation (fixnum->flonum n)))
	(set! variance (/ variance (- n 1)))
	(set! standard_deviation (sqrt variance))

	(cond ((> variance 0.0)
	       (set! skew (/ skew (* n variance standard_deviation)))
	       (set! kurtosis (- (/ kurtosis (* n variance variance))
				 3.0))))

	(set! numlist (sort numlist (lambda (x y) (<fl x y))))

	(let ((mid (/ n 2)))
	  (if (zero? (modulo n 2))
	      (set! median (/ (+ (car (list-tail numlist mid))
				 (car (list-tail numlist (- mid 1))))
			      2.0))
	    (set! median (car (list-tail numlist mid)))))
      
	
	(set! standard_deviation (/ (round (* standard_deviation 1000000)) 1000000))

        (display "n:                  ~D~n" n)
	(display "median:             ~,6F~n" median)
	(display "mean:               ~,6F~n" mean)
	(display "average_deviation:  ~,6F~n" average_deviation)
	(display "standard_deviation: ~,6F~n" standard_deviation)
	(display "variance:           ~,6F~n" variance)
	(display "skew:               ~,6F~n" skew)
	(display "kurtosis:           ~,6F~n" kurtosis)))))

(main (vector->list argv))
