//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
include "stl";
// adapted from C solution

/* kmedian permutes elements of a to get
   a[i]<=a[k] for i<k
   a[i]>=a[k] for i>k
        See. N. Wirth, Algorithms+data structures = Programs
*/

open Stl;
open Stl::Vector;

proc printf: double = 'printf("%f",$1);';

proc kmedian(v: stl_vector[double], mid:int)
{
  var a = begin v;
  var k = mid;
  var n = len v;
  whilst true do
    var j = Cstdlib::rand() % n;
    b := a.[j];
    var i = 0;
    j = n-1;
    var flag = true;
    whilst flag do
      whilst  a.[i] < b do i++; done;
      whilst  a.[j] > b do j--; done;
      if i<j do
        a.[i] <-> a.[j];
        i++;
        j--;
      else
        if a.[j] < b do j++; done;
        if a.[i] > b do i--; done;
        flag = false;
      done;
    done;

    if i<k do
      k -= i+1;
      n -= i+1;
      a += i+1;
    elif j>k do
      n=j;
    else return;
    done;
  done;
}

fun max(a:stl_vector[double], n:int):double =
{
  var temp=a.[0];
  var j = n-1;
  until j == 0 do
    if a.[j]>temp do temp=a.[j]; done;
    --j;
  done;
  return temp;
}


var sum = 0.0;
var average_deviation = 0.0;
var standard_deviation = 0.0;
var variance = 0.0;
var skew = 0.0;
var kurtosis = 0.0;
var median = 0.0;
var deviation = 0.0;

var nums:stl_vector[double];

var line = Text_file::readln Text_file::stdin;
until line == "" do
  v := String::atof line;
  sum += v;
  push_back (nums,v);
  line = Text_file::readln Text_file::stdin;
done;

m := len nums;
mean := sum/double_of m;
var i = 0; until i == m do
  dev := nums.[i] - mean;
  dev2 := dev*dev;
  dev3 := dev2*dev;
  dev4 := dev3*dev;
  average_deviation += fabs dev;
  variance += dev2 /*pow(deviation,2)*/;
  skew += dev3 /* pow(deviation,3) */;
  kurtosis += dev4 /* pow(deviation,4) */;
  ++i;
done;

average_deviation /= double_of m;
variance /= double_of (m - 1);
standard_deviation = sqrt variance;
if variance != 0.0 do
  skew /= double_of m * variance * standard_deviation;
  kurtosis = kurtosis/(double_of m * variance * variance) - 3.0;
done;

mid := m / 2;
kmedian(nums, mid);
median =
  if m % 2 == 1 then nums.[mid]          // odd
  else (nums.[mid] + max (nums,mid))/2.0 // even
  endif
;

print "n:                  "; print m; endl;
print "median:             "; printf median; endl;
print "mean:               "; printf mean; endl;
print "average_deviation:  "; printf average_deviation; endl;
print "standard_deviation: "; printf standard_deviation; endl;
print "variance:           "; printf variance; endl;
print "skew:               "; printf skew; endl;
print "kurtosis:           "; printf kurtosis; endl;

