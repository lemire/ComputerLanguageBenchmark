(* -*- mode: sml -*-
 * $Id$
 * http://shootout.alioth.debian.org/
 *)

structure Test : sig
    val main : (string * string list) -> {}
end = struct

fun ack(0,n) = n+1
  | ack(m,0) = ack(m-1,1)
  | ack(m,n) = ack(m-1,ack(m,(n-1)));

fun atoi s = case Int.fromString s of SOME num => num | NONE => 0;
fun printl [] = print "\n" | printl(h::t) = ( print h ; printl t );

fun main(name, args) = 
  let
    val arg = hd(args @ ["1"]);
    val num = atoi arg;
    val ack = ack(3, num);
    val result = Int.toString ack;
  in
      print "Ack(3,"; print arg; print "): "; print result; print "\n";
      PolyML.quit()
  end;
end

val _ = PolyML.print_depth 0;
val _ = PolyML.error_depth 0;
val _ = PolyML.onEntry(fn() => Test.main("ackermann", CommandLine.arguments()));
val _ = PolyML.commit();

