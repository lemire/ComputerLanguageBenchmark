/* ------------------------------------------------------------------ */
/* The Great Computer Language Shootout                               */
/* http://shootout.alioth.debian.org/                                 */
/*                                                                    */
/* Contributed by Anthony Borla                                       */
/* ------------------------------------------------------------------ */

NULL = ""

TBLIN = "!""#$%&`'()*+,-./0123456789:;<=>?@"||,
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_{|}~"

TBLOUT = "                                 "||,
         "abcdefghijklmnopqrstuvwxyz         "

N = ARG(1) ; if DATATYPE(N) \= 'NUM' | N < 1 then ; N = 1

/* Build table of word frequencies from file data */
D.0 = 0

do while LINES() > 0
  line = TRANSLATE(LINEIN(), TBLOUT, TBLIN)

  do while line <> NULL
    parse var line token line

    /* Update entry if it exists */
    if SYMBOL('N.token') == 'VAR' then do 
      i = N.token ; D.i.!v = D.i.!v + 1
      iterate
    end

    /* otherwise add a new entry */
    D.0 = D.0 + 1 ; i = D.0 ; D.i.!k = token ; D.i.!v = 1
    N.token = i
  end

end

drop N. ; WF.0 = 0

/* Build count -> word mapping table */
do i = 1 for D.0
  v = D.i.!v ; if v > WF.0 then ; WF.0 = v
  if SYMBOL('WF.v') == 'VAR' then
    WF.v = insertWordDescending(D.i.!k, WF.v)
  else
    WF.v = D.i.!k
end

/* Print word count [descending] -> word [descending] */
do i = WF.0 to 1 by -1
  if SYMBOL('WF.i') \= 'VAR' then ; iterate
  nwords = WORDS(WF.i)
  do j = 1 for nwords ; say FORMAT(i, 7, 0) WORD(WF.i, j) ; end
end

drop WF. D. ; exit 0

/* ----------------------------- */

insertWordDescending : procedure
  V = ARG(1) ; S = STRIP(ARG(2))
  R = WORDS(S) ; if R < 1 then ; return V

  L = 1

  do while L <= R 
    M = (L + R) % 2 ; W = WORD(S, M)
    if V = W then ; return S
    if V > W then ; R = M - 1 ; else L = M + 1 
  end

  /* insert [after] item here */
  select
    when R < 1 then ; insertAfter = 0
    when L > WORDS(S) then ; insertAfter = LENGTH(S) + 1
    otherwise 
      if M = R then ; insertAfter = WORDINDEX(S, M + 1) - 1
      else ; insertAfter = WORDINDEX(S, M) - 1
  end

  return INSERT(V, S, insertAfter, LENGTH(V) + 1)
