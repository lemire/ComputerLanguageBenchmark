{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org 

  contributed by Ian Osgood
}
{$mode objfpc}

program wordFrequency;
uses Classes, StrUtils, SysUtils;

const WhiteSpace = [#0..#255] - ['a'..'z','A'..'Z'];

type TCount = class
  count : integer;
  constructor Create;
  procedure Increment;
end;
constructor TCount.Create;  begin count := 1 end;
procedure TCount.Increment; begin count := count + 1 end;

var words : TStringList;
    line,word : string;
    pos,i : integer;

function CountCompare(w: TStringList; i1,i2: integer) : integer;
var diff : integer;
begin
  diff := (w.Objects[i2] as TCount).count - (w.Objects[i1] as TCount).count;
  if diff = 0 then diff := CompareStr(w[i2],w[i1]);
  CountCompare := diff;
end;

begin
  words := TStringList.Create;

  while not Eof do
  begin
    readln(line);
    pos := 1;
    repeat
      word := lowercase(ExtractSubstr(line,pos,WhiteSpace));
      if length(word) = 0 then continue;
      if words.Find(word,i) then
        (words.Objects[i] as TCount).Increment
      else
        words.InsertObject(i, word, TCount.Create);
    until pos > length(line);
  end;

  words.CustomSort( @CountCompare );

  for i := 0 to words.Count-1 do
    writeln( (words.Objects[i] as TCount).count:7,' ',words[i]);
end.
