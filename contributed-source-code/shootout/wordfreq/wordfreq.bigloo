;;; -*- mode: scheme -*-
;;; $Id$
;;; http://shootout.alioth.debian.org/
;;; with help from Sven Hartrumpf

(module hash
	(main main)
	(extern (macro printf::int (string int string) "printf")))


(define (main args)
  (let* ((max (do ((max 1 (* max 2))) ((> max 75000) max)))
	 (count (make-hash-table max
				  (lambda (o) (string->0..2^x-1 o 16))
				  (lambda (c) (car c))
				  string=?
				  max)))

    (read/rp (regular-grammar ((word (+ (in ("azAZ"))))
			       (not-word (+ (out ("azAZ")))))
			      ((: word)
			       (let* ((key (string-downcase! (the-string)))
				      (old-cell (get-hash key count)))
                                 (cond (old-cell
					(set-cdr! old-cell (+ (cdr old-cell) 1)))
                                       (else
			          	(put-hash! (cons key 1) count))))
			       (ignore))
			      ((: not-word)
			       (ignore))
			      (else
			       (the-failure)))
	     (current-input-port))

    (let ((alist '()))
      (for-each-hash (lambda (cell)
		       (let ((key (car cell))
			     (val (cdr cell)))
			 (set! alist (cons (cons key val) alist))))
		     count)
      
      (for-each (lambda (cell)
		  (printf #"%7d %s\n" (cdr cell) (car cell)))
		(sort alist (lambda (x y)
			      (let ((xval (cdr x))
				    (yval (cdr y)))
			      (if (= xval yval)
				  (string<? (car y) (car x))
				  (< yval xval)))))))))
