//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
include "stl";
open Stl;
open Stl::HashMap;
open Stl::Set;
open Text_file;
open Lexer;

body lt_cmp[t] """
  namespace std {
    template<>
    bool less<?1> :: operator()(?1 const &a, ?1 const &b)const {
     return a.mem_0 == b.mem_0 ?? a.mem_1 < b.mem_1 : a.mem_0 > b.mem_0;
    }
  }
""";

proc tolower : lvalue[string] = "tol($1);" requires
  body """
    void tol(std::string &x) {
      std::string::iterator e = x.end();
      for(std::string::iterator i = x.begin(); i != e; ++i)
        *i = tolower (*i);
    }
  """,
  cctype_hxx
;

requires ext_string_hash;
requires lt_cmp[int * string];

regexp upper = ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"];
regexp lower = ["abcdefghijklmnopqrstuvwxyz"];
regexp wrd = ( upper | lower) +;

fun lexit (start:iterator, finish:iterator): iterator * bool =>
  reglex start to finish with
  | wrd => true
  | _ => false
  endmatch
;

var dict = HashMap::create[string,int]();
proc add_word(s:iterator, e:iterator)
{
  var word = string_between(s,e);
  tolower word;
  p := find (dict,word);
  if p == end dict do
    insert (dict,word,1);
  else
    k,j := deref p;
    (deref p).(1) ++;
  done;
};

{
  var data = readln stdin;
  until data == "" do
    first := start_iterator data;
    last := end_iterator data;

    var current = first;
    var next = first;
    var isword : bool;
    until current == last do
      next, isword = lexit(current, last);
      if isword do
        add_word(current,next);
        current = next;
      else
        ++current;
      done;
    done;
    data = readln stdin;
  done;
};

var wmap = Set::create[int * string] ();
{
  var cur = begin dict;
  dlast := end dict;
  until cur == dlast do
    word, count := deref cur;
    insert (wmap,(count,word));
    ++cur;
  done;
};

{
  var cur = begin wmap;
  last := end wmap;
  until cur == last do
    count, word := deref cur;
    print ("       " + str count).[-7 to]; print " "; print word; endl;
    ++cur;
  done;
};

