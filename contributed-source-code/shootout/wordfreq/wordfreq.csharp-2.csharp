/* The Great Computer Language Shootout
 *    http://shootout.alioth.debian.org/
 *
 * contributed by Isaac Gouy 
 * modified by Joshua Tauberer */

using System;
using System.Globalization;
using System.IO;
using System.Collections;

class WordFreq
{
   static void Main()
   {
      const int size = 4096;
      Hashtable wordCounts = new Hashtable(4000);
      CultureInfo culture = CultureInfo.InvariantCulture;

      using (StreamReader r = new StreamReader(Console.OpenStandardInput(size)))
      {
         char[] buffer = new char[size];
         int charsRead;

         bool insideWord = false;
         string prefix = null;

         while ((charsRead = r.Read(buffer,0,size)) > 0) {
            int i = 0;
            for (int j=0; j<charsRead; j++){
               if (Char.IsLetter(buffer[j])){
                  if (!insideWord){
                     insideWord = true;
                     i = j;
                  }
               }
               else if (insideWord){
                  insideWord = false;
                  string w = (new String(buffer,i,j-i));

                  if (prefix != null){
                     w = string.Concat(prefix,w);
                     prefix = null;
                  }
                  w = w.ToLower(culture);

                  object item;
                  if ((item = wordCounts[w]) != null)
                     ((KeyValue)item).v++;
                  else
                     wordCounts[w] = new KeyValue(w,1);
               }
            }
            if (insideWord) prefix = (new String(buffer,i,charsRead-i));
         }
      }

      KeyValue[] items = new KeyValue[wordCounts.Count];
      wordCounts.Values.CopyTo(items, 0);

      Array.Sort(items, new SortByFrequencyAndWord() );

      foreach (KeyValue each in items) {
         string frequency = each.v.ToString().PadLeft(7);
         Console.WriteLine("{0} {1}", frequency, each.k);
      }
   }


   private class KeyValue
   {
      internal String k;
      internal int v;

      internal KeyValue(String k, int v) {
         this.k = k;
         this.v = v;
      }
   }


   private class SortByFrequencyAndWord : IComparer
   {
      CompareInfo comparer = CultureInfo.InvariantCulture.CompareInfo;
	   
      public SortByFrequencyAndWord() {}

      // sort DictionaryEntry by Frequency, then by Word
      int IComparer.Compare(object o1, object o2) {
         KeyValue item1 = (KeyValue)o1;
         KeyValue item2 = (KeyValue)o2;

         int comparison = item2.v.CompareTo(item1.v);
         if (comparison == 0) return comparer.Compare(item2.k, item1.k, CompareOptions.Ordinal);
         else return comparison;
      }
   }
}

