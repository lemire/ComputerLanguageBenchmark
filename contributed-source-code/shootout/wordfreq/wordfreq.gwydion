module:    wordfreq
author:    unknown
           Anthony Borla [modified stream reading, regexp-based conversion, output format]
synopsis:  "word frequency" benchmark
           The Great Computer Language Shootout
           http://shootout.alioth.debian.org/
copyright: public domain
use-libraries: dylan, io, table-extensions, string-extensions, regular-expressions
use-modules: dylan, standard-io, streams, format, table-extensions, string-conversions, regular-expressions

// --------------------------------

define constant $exclude-chars = "\042!#$%&`'()*+,-./0123456789:;<=>?@[\\]^_{|}~";
define constant $delimiter-pattern = "\\s";
define constant $blank-char = " ";

// --------------

define function main() => ();
  let words = make(<string-table>); let line = "";

  local method add-to-tbl(word)
    let count = element(words, word, default: 0);
    words[word] := count + 1;
  end method;

  while ((line := read-line(*standard-input*, on-end-of-stream: #f)))
    let (#rest words) = split($delimiter-pattern, as-lowercase(translate(line, $exclude-chars, $blank-char)));
    do(add-to-tbl, words); 
  end while;

  let results = make(<stretchy-vector>);

  for(w keyed-by k in words)
    add!(results, pair(k, w));
  end for;

  do(method(x)
       format(*standard-output*, "%7d %s\n", x.tail, x.head)
     end method,
     sort(results, test: method(x, y)
                           if (x.tail == y.tail)
                             x.head > y.head
                           else
                             x.tail > y.tail
                           end if;
                         end method));
end function main;

// --------------------------------

main();

