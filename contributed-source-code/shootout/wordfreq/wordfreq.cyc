/*
 * http://shootout.alioth.debian.org/
 */

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include "cyc-simple_hash_cyc.h"

int cmp_hash(struct ht_node *`H const @`H a, struct ht_node *`H const @`H b) {
    int val = (*b)->val - (*a)->val;
    return((val == 0) ? strcmp((*b)->key, (*a)->key) : val);
}

int main() {
    int readbufsize = 4096;
    int wordbufsize=16;
    char ?readbuf;
    char ?wordbuf;
    int i = 0;
    struct ht_ht @ht;
    struct ht_node *?sort_array, *?sort_tmp, *node;
    /*new code*/
    int nread =0;
    int wordlen=0;
    readbuf = malloc(readbufsize + 1);
    wordbuf = malloc(wordbufsize + 1);
    ht = ht_create(2048);
    readbuf[0]=0;
    while (readbuf[i] > 0||(nread = fread(readbuf, sizeof(char), readbufsize, stdin),readbuf[nread] = '\0',i=0,nread > 0) ) {
	if (isalpha(readbuf[i])){
	    wordbuf[wordlen++] = tolower(readbuf[i]);
	    if (wordlen == wordbufsize) {
		wordbufsize *= 2;
		wordbuf = realloc_str(wordbuf, wordbufsize + 1);
	    }
	}
	else{
	    if (wordlen > 0) {
		wordbuf[wordlen] = '\0';
		++(ht_find_new(ht, wordbuf)->val);
		wordlen = 0;
	    } 
	}
	i++;
    }
    free(readbuf);
    free(wordbuf);
    sort_array = sort_tmp =
	malloc(sizeof(struct ht_node *) * ht_count(ht));

    for (node=ht_first(ht); (*sort_tmp++ = node) != 0; node=ht_next(ht)) ;

    qsort(sort_array, ht_count(ht), sizeof(struct ht_node *),
	  cmp_hash);

    for (i=0; i<ht_count(ht); i++)
	printf("%7d %s\n", ht_val(sort_array[i]), ht_key(sort_array[i])); 

    ht_destroy(ht);
    return(0);
}
