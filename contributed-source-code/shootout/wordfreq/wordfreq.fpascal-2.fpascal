{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Daniel Mantione 
}

program wordfreq;

type    Ptree=^Ttree;
        Ttree=record
          left,right:Ptree;
          count:cardinal;
          word:string[32];
        end;

var s,w:string;
    i:byte;
    t:Ptree=nil;
    t2:Ptree=nil;
    lr:boolean=false;

procedure add_word(const w:string;var t:Ptree);
begin
  if t=nil then
    begin
      new(t);
      t^.left:=nil;
      t^.right:=nil;
      t^.count:=1;
      t^.word:=w;
    end
  else if w<t^.word then add_word(w,t^.left)
  else if w>t^.word then add_word(w,t^.right)
  else inc(t^.count);
end;

procedure add_word_second(count:cardinal;const w:string;var t:Ptree);
var on_left:boolean;
begin
  if t=nil then
    begin
      new(t);
      t^.left:=nil;
      t^.right:=nil;
      t^.count:=count;
      t^.word:=w;
    end
  else
    begin
      on_left:=count>t^.count;
      if t^.count=count then
        on_left:=w>t^.word;
      if on_left then add_word_second(count,w,t^.left)
      else add_word_second(count,w,t^.right);
    end;
end;

procedure build_second_tree(tree:Ptree);
begin
  lr:=not lr;
  if tree<>nil then
    begin
      add_word_second(tree^.count,tree^.word,t2);
      if lr then
        begin
          build_second_tree(tree^.left);
          build_second_tree(tree^.right);
        end
      else
        begin
          build_second_tree(tree^.right);
          build_second_tree(tree^.left);
        end;
    end;
end;

procedure write_second_tree(tree:Ptree);
begin
  if tree<>nil then
    begin
      write_second_tree(tree^.left);
      writeln(tree^.count:7,' ',tree^.word);
      write_second_tree(tree^.right);
    end;
end;

begin
  while not eof do
    begin
      readln(s);
      s:=lowercase(s);
      w:='';
      for i:=1 to length(s) do
        if not(s[i] in ['a'..'z']) then
          begin
            if length(w)<>0 then add_word(w,t);
            w:='';
          end
        else w:=w+s[i];
      if length(w)<>0 then add_word(w,t);
    end;
  build_second_tree(t);
  write_second_tree(t2);
end.
