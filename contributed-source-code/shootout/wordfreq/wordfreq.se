-- -*- mode: eiffel -*- 
-- $Id$
-- http://shootout.alioth.debian.org/
--
-- By Brent Fulgham

class WORDFREQ

insert
	ARGUMENTS
	
creation {ANY}
	make

feature {ANY}
    make is
        local
	    count, highlevel: INTEGER;
	    c: CHARACTER;
	    dictionary: DICTIONARY[INTEGER, STRING];
	    outcol: ARRAY[STRING];
	    sorter: REVERSE_COLLECTION_SORTER[STRING];
	    word, temp: STRING;
	    iter: ITERATOR[STRING];
	do
	    count := 0
	    from
	        !!dictionary.with_capacity(60000)
		!!word.make(40)
	        io.read_character
	    until
	        io.end_of_input
	    loop
	        c := io.last_character.to_lower
		if not c.is_letter then
		    -- insert word into dictionary
		    if not word.is_empty then
		        if not dictionary.has(word) then
			    dictionary.add(1, clone(word))
			else
			    count := dictionary.at(word);
			    count := count + 1;
			    dictionary.put(count,word)
			    if highlevel < count then
			    	highlevel := count
			    end
			end
		    end
		    word.clear
		else
		    -- append to constructing word
		    word.add_last(c)
		end
		io.read_character
	    end;

	    !!outcol.with_capacity(dictionary.count, 0)

	    from
	        iter := dictionary.get_new_iterator_on_keys
		iter.start
	    until
	        iter.is_off
	    loop
	        temp := dictionary.at(iter.item).to_string
		temp.precede_to_count(' ', 7)
		temp.extend(' ')
		temp.append(iter.item)

		outcol.add_first(temp)
		iter.next
	    end

	    sorter.sort(outcol)

	    from
	        iter := outcol.get_new_iterator
		iter.start
	    until
	        iter.is_off
	    loop
	        std_output.put_string(iter.item + "%N")
		iter.next
	    end
	end
    end

