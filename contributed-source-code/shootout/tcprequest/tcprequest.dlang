/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Dave Fladebo

   compile: dmd -O -inline -release tcprequest.d
*/

import std.stdio, std.string, std.socket, std.socketstream, std.c.time;
extern (C) int fork();

const int MULTIPLIER = 100, REPLY_SIZE = 4096, REQUEST_SIZE = 64, BUFFER_SIZE = 1024, PORT = 11000;

char[REQUEST_SIZE]  REQUEST;
char[REPLY_SIZE]    REPLY;

int main(char[][] args)
{
    int n = (args.length > 1 ? atoi(args[1]) : 1) * MULTIPLIER;

    int pid = fork();
    if(!pid) Client(n);
    if(pid > 0) Server();

    return pid < 0 ? 1 : 0;
}

void Server()
{
    SocketStream ss = new SocketStream(serverSocket.accept);

    char[BUFFER_SIZE] buffer;
    while(ss.readBlock(buffer,REQUEST_SIZE) > 0)
    {
        ss.writeBlock(REPLY,REPLY_SIZE);
    }

    ss.close();
}

void Client(int n)
{
    int bytes, replies;

    usleep(1);  // Let server start

    TcpSocket ts = new TcpSocket(new InternetAddress("127.0.0.1",PORT));

    char[BUFFER_SIZE] buffer;
    while(n--)
    {
        int recvd;
        ts.send(REQUEST);
        while(recvd < REPLY_SIZE)
        {
            recvd += ts.receive(buffer);
        }
        bytes += recvd;
        replies++;
    }

    ts.close();

    writefln("replies: ",replies,"\tbytes: ",bytes);
}

TcpSocket serverSocket()
{
    TcpSocket ts = new TcpSocket();
    ts.bind(new InternetAddress(PORT));
    ts.listen(0);
    return ts;
}
