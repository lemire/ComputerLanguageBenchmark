(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module nbody;
import 
   JovianBodies as B,
   System.Math as M,
   System.Console as C, 
   BenchmarksGame;

type {ref} NBodySystem = object
   var b: array 5 of B.Body;

   procedure {public} OffsetMomentum();
   var
      px, py, pz: real;
      i: integer;
   begin
      for i := 0 to len(b)-1 do
         px := px + (b[i].vx * b[i].mass);
         py := py + (b[i].vy * b[i].mass);
         pz := pz + (b[i].vz * b[i].mass);
      end;
      b[0].OffsetMomentum(px,py,pz);
   end OffsetMomentum;

   procedure {public} Advance(dt: real);
   var
      dx, dy, dz, distance, mag: real;
      i, j, n: integer;
   begin
      n := len(b) - 1;
      for i := 0 to n do
         for j := i+1 to n do
            dx := b[i].x - b[j].x;
            dy := b[i].y - b[j].y;
            dz := b[i].z - b[j].z;

            distance := M.Sqrt(dx*dx + dy*dy + dz*dz);
            mag := dt / (distance * distance * distance);

            b[i].vx := b[i].vx - (dx * b[j].mass * mag);
            b[i].vy := b[i].vy - (dy * b[j].mass * mag);
            b[i].vz := b[i].vz - (dz * b[j].mass * mag);

            b[j].vx := b[j].vx + (dx * b[i].mass * mag);
            b[j].vy := b[j].vy + (dy * b[i].mass * mag);
            b[j].vz := b[j].vz + (dz * b[i].mass * mag);
         end;
      end;

      for i := 0 to n do
         b[i].x := b[i].x + (dt * b[i].vx);
         b[i].y := b[i].y + (dt * b[i].vy);
         b[i].z := b[i].z + (dt * b[i].vz);
      end;
   end Advance;

   procedure {public} Energy(): real;
   var
      e, dx, dy, dz, distance: real;
      i, j, n: integer;
   begin
      e := 0.0;
      n := len(b) - 1;
      for i := 0 to n do
         e := e + (0.5 * b[i].mass *
            ( b[i].vx * b[i].vx
            + b[i].vy * b[i].vy
            + b[i].vz * b[i].vz ));
	 	 	
         for j := i+1 to n do
            dx := b[i].x - b[j].x;
            dy := b[i].y - b[j].y;
            dz := b[i].z - b[j].z;

            distance := M.Sqrt(dx*dx + dy*dy + dz*dz);	
            e := e - (b[i].mass * b[j].mass / distance);	
         end;
      end;
      return e;
   end Energy;

begin
   b[0] := B.Sun;
   b[1] := B.Jupiter; 
   b[2] := B.Saturn;
   b[3] := B.Uranus; 
   b[4] := B.Neptune;
end NBodySystem;


var 
   bodies: NBodySystem;
   i,n: integer;
begin
   bodies := new NBodySystem();
   bodies.OffsetMomentum();
   n := BenchmarksGame.argi();

   C.WriteLine("{0:f9}", bodies.Energy()); 
   for i := 1 to n do bodies.Advance(0.01); end;
   C.WriteLine("{0:f9}", bodies.Energy()); 

end nbody.


module JovianBodies;

const PI = 3.141592653589793;	
const SOLAR_MASS = 4 * PI * PI;
const DAYS_PER_YEAR = 365.24;

type {public,ref} Body = object
   var {public} x, y, z, vx, vy, vz, mass: real;

   procedure {public} OffsetMomentum(px, py, pz: real);
      begin
         vx := -1.0 * px / SOLAR_MASS;
         vy := -1.0 * py / SOLAR_MASS;
         vz := -1.0 * pz / SOLAR_MASS;	      
      end OffsetMomentum;
end Body;


var {public} Jupiter, Saturn, Uranus, Neptune, Sun: Body;		

begin
   Jupiter := new Body();
   Jupiter.x := 4.84143144246472090E+00;
   Jupiter.y := -1.16032004402742839E+00;
   Jupiter.z := -1.03622044471123109E-01;
   Jupiter.vx := 1.66007664274403694E-03 * DAYS_PER_YEAR;
   Jupiter.vy := 7.69901118419740425E-03 * DAYS_PER_YEAR;
   Jupiter.vz := -6.90460016972063023E-05 * DAYS_PER_YEAR;
   Jupiter.mass := 9.54791938424326609E-04 * SOLAR_MASS;

   Saturn := new Body();
   Saturn.x := 8.34336671824457987E+00;
   Saturn.y := 4.12479856412430479E+00;
   Saturn.z := -4.03523417114321381E-01;
   Saturn.vx := -2.76742510726862411E-03 * DAYS_PER_YEAR;
   Saturn.vy := 4.99852801234917238E-03 * DAYS_PER_YEAR;
   Saturn.vz := 2.30417297573763929E-05 * DAYS_PER_YEAR;
   Saturn.mass := 2.85885980666130812E-04 * SOLAR_MASS;

   Uranus := new Body();
   Uranus.x := 1.28943695621391310E+01;
   Uranus.y := -1.51111514016986312E+01;
   Uranus.z := -2.23307578892655734E-01;
   Uranus.vx := 2.96460137564761618E-03 * DAYS_PER_YEAR;
   Uranus.vy := 2.37847173959480950E-03 * DAYS_PER_YEAR;
   Uranus.vz := -2.96589568540237556E-05 * DAYS_PER_YEAR;
   Uranus.mass := 4.36624404335156298E-05 * SOLAR_MASS;

   Neptune := new Body();
   Neptune.x := 1.53796971148509165E+01;
   Neptune.y := -2.59193146099879641E+01;
   Neptune.z := 1.79258772950371181E-01;
   Neptune.vx := 2.68067772490389322E-03 * DAYS_PER_YEAR;
   Neptune.vy := 1.62824170038242295E-03 * DAYS_PER_YEAR;
   Neptune.vz := -9.51592254519715870E-05 * DAYS_PER_YEAR;
   Neptune.mass := 5.15138902046611451E-05 * SOLAR_MASS;	

   Sun := new Body();
   Sun.mass := SOLAR_MASS;

end JovianBodies.
