"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

"* SPLITFILE=Body.st *"!

Object subclass:#Body
	instanceVariableNames:'x y z vx vy vz mass'
	classVariableNames:''
	poolDictionaries:''
	category:'benchmarks-game'
!

!Body class methodsFor:'constants'!

daysPerYear
   ^365.24
!

jupiter
   ^self new
      x: 4.84143144246472090
      y: -1.16032004402742839
      z: -0.103622044471123109
      vx: 0.00166007664274403694 * self daysPerYear
      vy: 0.00769901118419740425 * self daysPerYear
      vz: -0.0000690460016972063023 * self daysPerYear
      mass: 0.000954791938424326609 * self solarMass
!

neptune
   ^self new
      x: 1.53796971148509165e1
      y: -2.59193146099879641e1
      z: 0.179258772950371181
      vx: 0.00268067772490389322 * self daysPerYear
      vy: 0.00162824170038242295 * self daysPerYear
      vz: -0.0000951592254519715870 * self daysPerYear
      mass: 0.0000515138902046611451 * self solarMass
!

pi
   ^3.141592653589793
!

saturn
   ^self new
      x: 8.34336671824457987
      y: 4.12479856412430479
      z: -0.403523417114321381
      vx: -0.00276742510726862411 * self daysPerYear
      vy: 0.00499852801234917238 * self daysPerYear
      vz: 0.0000230417297573763929 * self daysPerYear
      mass: 0.000285885980666130812 * self solarMass
!

solarMass
   ^4.0 * self pi * self pi
!

sun
   ^self new
      x: 0.0
      y: 0.0
      z: 0.0
      vx: 0.0
      vy: 0.0
      vz: 0.0
      mass: self solarMass
!

uranus
   ^self new
      x: 1.28943695621391310e1
      y: -1.51111514016986312e1
      z: -0.223307578892655734
      vx: 0.00296460137564761618 * self daysPerYear
      vy: 0.00237847173959480950 * self daysPerYear
      vz: -0.0000296589568540237556 * self daysPerYear
      mass: 0.0000436624404335156298 * self solarMass
! !

!Body methodsFor:'accessing'!

mass
   ^mass
!

x
   ^x
!

x: d1 y: d2 z: d3 vx: d4 vy: d5 vz: d6 mass: d7
   x := d1.
   y := d2. 
   z := d3. 
   vx := d4.
   vy := d5.
   vz := d6.
   mass := d7
!

y
   ^y
!

z
   ^z
! !

!Body methodsFor:'benchmarks-game'!

addMomentumTo: anArray
   anArray at: 1 put: (anArray at: 1) + (vx * mass).
   anArray at: 2 put: (anArray at: 2) + (vy * mass).
   anArray at: 3 put: (anArray at: 3) + (vz * mass).
   ^anArray
!

and: aBody velocityAfter: dt        
   | dx dy dz distance mag |
   dx := x - aBody x.
   dy := y - aBody y.
   dz := z - aBody z.
   
   distance := ((dx*dx) + (dy*dy) + (dz*dz)) sqrt.
   mag := dt / (distance * distance * distance).

   self decreaseVelocity: dx y: dy z: dz m: aBody mass * mag.   
   aBody increaseVelocity: dx y: dy z: dz m: mass * mag
!

decreaseVelocity: dx y: dy z: dz m: m
   vx := vx - (dx * m).
   vy := vy - (dy * m).
   vz := vz - (dz * m)
!

increaseVelocity: dx y: dy z: dz m: m
   vx := vx + (dx * m).
   vy := vy + (dy * m).
   vz := vz + (dz * m)
!

kineticEnergy
   ^0.5 * mass * ((vx * vx) + (vy * vy) + (vz * vz))
!

offsetMomentum: anArray 
   | m |
   m := self class solarMass.
   vx := (anArray at: 1) negated / m.
   vy := (anArray at: 2) negated / m.
   vz := (anArray at: 3) negated / m
!

positionAfter: dt
   x := x + (dt * vx).
   y := y + (dt * vy).
   z := z + (dt * vz)
!

potentialEnergy: aBody
   | dx dy dz distance |
   dx := x - aBody x.
   dy := y - aBody y.
   dz := z - aBody z.

   distance := ((dx*dx) + (dy*dy) + (dz*dz)) sqrt.
   ^mass * aBody mass / distance
! !

"* SPLITFILE=NBodySystem.st *"!

Object subclass:#NBodySystem
	instanceVariableNames:'bodies'
	classVariableNames:''
	poolDictionaries:''
	category:'benchmarks-game'
!

!NBodySystem class methodsFor:'benchmarks-game'!

main
   | bodies |
   bodies := NBodySystem new initialize.
   Stdout nextPutAll: (bodies energy printfPrintString:'%0.9f'); cr.
   Smalltalk commandLineArguments last asNumber 
      timesRepeat: [bodies after: 0.01].
   Stdout nextPutAll: (bodies energy printfPrintString:'%0.9f'); cr.
! !

!NBodySystem methodsFor:'benchmarks-game'!

after: dt
   1 to: bodies size do: [:i|
      i+1 to: bodies size do: [:j|                            
         (bodies at: i) and: (bodies at: j) velocityAfter: dt].
   ].   
   bodies do: [:each| each positionAfter: dt]
!

energy
   | e |
   e := 0.0.
   1 to: bodies size do: [:i|       
      e := e + (bodies at: i) kineticEnergy.

      i+1 to: bodies size do: [:j| 
         e := e - ((bodies at: i) potentialEnergy: (bodies at: j))].
   ].
   ^e
! !

!NBodySystem methodsFor:'initialize-release'!

initialize
   bodies := OrderedCollection new
      add: Body sun; add: Body jupiter; add: Body saturn;
      add: Body uranus; add: Body neptune; yourself.

   bodies first offsetMomentum:
      (bodies inject: (Array with: 0.0 with: 0.0 with: 0.0)
         into: [:m :each | each addMomentumTo: m])
! !



