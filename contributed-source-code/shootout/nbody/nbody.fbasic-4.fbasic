' The Computer Language Shootout
' http://shootout.alioth.debian.org/
' contributed by Josh Goldfoot
' modified by Antoni Gual
'-used printf from the c-runtime lib to avoid PRINT USING
' variations from version to version
'-changed the sub advance from indexes to pointers
' Added some temp variables in critical places

#include "crt.bi"

type planet
   as double x, y, z, vx, vy, vz, mass
end type

common shared as double pi, solar_mass, days_per_year
pi = 3.14159265358979323
solar_mass = 4 * pi * pi
days_per_year = 365.24

sub init_bodies(bodies() as planet)
   rem Sun
   bodies(0).x = 0.0
   bodies(0).y = 0.0
   bodies(0).z = 0.0
   bodies(0).vx = 0.0
   bodies(0).vy = 0.0
   bodies(0).vz = 0.0
   bodies(0).mass = solar_mass

   rem Jupiter
   bodies(1).x = 4.84143144246472090e+00
   bodies(1).y = -1.16032004402742839e+00
   bodies(1).z = -1.03622044471123109e-01
   bodies(1).vx = 1.66007664274403694e-03 * days_per_year
   bodies(1).vy = 7.69901118419740425e-03 * days_per_year
   bodies(1).vz = -6.90460016972063023e-05 * days_per_year
   bodies(1).mass = 9.54791938424326609e-04 * solar_mass

   rem Saturn
   bodies(2).x = 8.34336671824457987e+00
   bodies(2).y = 4.12479856412430479e+00
   bodies(2).z = -4.03523417114321381e-01
   bodies(2).vx = -2.76742510726862411e-03 * days_per_year
   bodies(2).vy = 4.99852801234917238e-03 * days_per_year
   bodies(2).vz = 2.30417297573763929e-05 * days_per_year
   bodies(2).mass = 2.85885980666130812e-04 * solar_mass

   rem Uranus
   bodies(3).x = 1.28943695621391310e+01
   bodies(3).y = -1.51111514016986312e+01
   bodies(3).z = -2.23307578892655734e-01
   bodies(3).vx = 2.96460137564761618e-03 * days_per_year
   bodies(3).vy = 2.37847173959480950e-03 * days_per_year
   bodies(3).vz = -2.96589568540237556e-05 * days_per_year
   bodies(3).mass = 4.36624404335156298e-05 * solar_mass

   rem Neptune
   bodies(4).x = 1.53796971148509165e+01
   bodies(4).y = -2.59193146099879641e+01
   bodies(4).z = 1.79258772950371181e-01
   bodies(4).vx = 2.68067772490389322e-03 * days_per_year
   bodies(4).vy = 1.62824170038242295e-03 * days_per_year
   bodies(4).vz = -9.51592254519715870e-05 * days_per_year
   bodies(4).mass = 5.15138902046611451e-05 * solar_mass
end sub

sub offset_momentum(ByVal nbodies as integer, bodies() as planet)
  dim as double px, py, pz
  dim as integer i
  for i = 0 to nbodies-1
    px += bodies(i).vx * bodies(i).mass
    py += bodies(i).vy * bodies(i).mass
    pz += bodies(i).vz * bodies(i).mass
  next i
  bodies(0).vx = -1 * px / solar_mass
  bodies(0).vy = -1 * py / solar_mass
  bodies(0).vz = -1 * pz / solar_mass
end sub

function energy(ByVal nbodies as integer, b() as planet) as double
  dim as double e, dx, dy, dz, distance
  dim as integer i, j
  for i = 0 to nbodies-1
    e += 0.5*b(i).mass*(b(i).vx*b(i).vx+b(i).vy*b(i).vy+b(i).vz*b(i).vz)
    for j = i + 1 to nbodies - 1
      dx = b(i).x - b(j).x
      dy = b(i).y - b(j).y
      dz = b(i).z - b(j).z
      distance = sqr(dx * dx + dy * dy + dz * dz)
      e -= (b(i).mass * b(j).mass) / distance
    next j
  next i
  return e
end function

'the advance function is the bottleneck
sub advance(byval nbodies as integer, byval bodies as planet ptr,byval dt as double)
  dim as double dx, dy, dz, distance, mag,m,mm
  dim as integer i, j
  dim as planet ptr bi,bj
  for i = 0 to nbodies - 1
    bi=@bodies[i]
    for j = i+1 to nbodies - 1
      bj=@bodies[j]
      dx = bi->x - bj->x
      dy = bi->y - bj->y
      dz = bi->z - bj->z
      distance = sqr(dx * dx + dy * dy + dz * dz)
      mag = dt / (distance * distance * distance)
      mm  =bj->mass * mag
      bi->vx -= dx * mm
      bi->vy -= dy * mm
      bi->vz -= dz * mm
      mm  =bi->mass * mag
      bj->vx += dx * mm
      bj->vy += dy * mm
      bj->vz += dz * mm
    next j
  next i
  for i = 0 to nbodies - 1
    bi=@bodies[i]
    bi->x += dt * bi->vx
    bi->y += dt * bi->vy
    bi->z += dt * bi->vz
  next i
end sub

#define NBODIES 5
sub main()
  dim as integer n, i
  n = val(command$)
  if n < 1 then n = 50000
  dim bodies(NBODIES-1) as planet
  init_bodies(bodies() )
  offset_momentum(NBODIES, bodies() )
  printf ("%.9f%c", energy(NBODIES, bodies()), 10)

  for i = 1 to n
     advance(NBODIES, @bodies(0), 0.01)
  next i
   printf ("%.9f%c", energy(NBODIES, bodies()), 10)
end sub

main()
 
