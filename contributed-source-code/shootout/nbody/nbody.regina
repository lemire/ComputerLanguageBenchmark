/* ------------------------------------------------------------------ */
/* The Great Computer Language Shootout                               */
/* http://shootout.alioth.debian.org/                                 */
/*                                                                    */
/* This version uses the CRT's 'sqrt' function rather than a native   */
/* REXX 'sqrt' subroutine with a consequent performance improvement   */
/* of about 50%.                                                      */
/*                                                                    */
/* Contributed by Anthony Borla                                       */
/* ------------------------------------------------------------------ */

numeric digits 14

NULL = ""
PI = 3.141592653589793 ; SOLAR_MASS = 4 * PI * PI ; DAYS_PER_YEAR = 365.24

constants = "NULL PI SOLAR_MASS DAYS_PER_YEAR"

BODIES.list = "SUN JUPITER SATURN URANUS NEPTUNE"

BODIES.sun.x = 0.0
BODIES.sun.y = 0.0
BODIES.sun.z = 0.0
BODIES.sun.vx = 0.0
BODIES.sun.vy = 0.0
BODIES.sun.vz = 0.0
BODIES.sun.mass = SOLAR_MASS

BODIES.jupiter.x = 4.84143144246472090e+00
BODIES.jupiter.y = -1.16032004402742839e+00
BODIES.jupiter.z = -1.03622044471123109e-01
BODIES.jupiter.vx = 1.66007664274403694e-03 * DAYS_PER_YEAR
BODIES.jupiter.vy = 7.69901118419740425e-03 * DAYS_PER_YEAR
BODIES.jupiter.vz = -6.90460016972063023e-05 * DAYS_PER_YEAR
BODIES.jupiter.mass = 9.54791938424326609e-04 * SOLAR_MASS

BODIES.saturn.x = 8.34336671824457987e+00
BODIES.saturn.y = 4.12479856412430479e+00
BODIES.saturn.z = -4.03523417114321381e-01
BODIES.saturn.vx = -2.76742510726862411e-03 * DAYS_PER_YEAR
BODIES.saturn.vy = 4.99852801234917238e-03 * DAYS_PER_YEAR
BODIES.saturn.vz = 2.30417297573763929e-05 * DAYS_PER_YEAR
BODIES.saturn.mass = 2.85885980666130812e-04 * SOLAR_MASS

BODIES.uranus.x = 1.28943695621391310e+01
BODIES.uranus.y = -1.51111514016986312e+01
BODIES.uranus.z = -2.23307578892655734e-01
BODIES.uranus.vx = 2.96460137564761618e-03 * DAYS_PER_YEAR
BODIES.uranus.vy = 2.37847173959480950e-03 * DAYS_PER_YEAR
BODIES.uranus.vz = -2.96589568540237556e-05 * DAYS_PER_YEAR
BODIES.uranus.mass = 4.36624404335156298e-05 * SOLAR_MASS
  
BODIES.neptune.x = 1.53796971148509165e+01
BODIES.neptune.y = -2.59193146099879641e+01
BODIES.neptune.z = 1.79258772950371181e-01
BODIES.neptune.vx = 2.68067772490389322e-03 * DAYS_PER_YEAR
BODIES.neptune.vy = 1.62824170038242295e-03 * DAYS_PER_YEAR
BODIES.neptune.vz = -9.51592254519715870e-05 * DAYS_PER_YEAR
BODIES.neptune.mass = 5.15138902046611451e-05 * SOLAR_MASS

/* ----------------------------- */

call initSqrt

/* ----------------------------- */

N = ARG(1) ; if DATATYPE(N) \= 'NUM' | N < 1 then ; N = 1000

call offsetMomentum

say FORMAT(energy(),,9)

do N ; call advance 0.01 ; end

say FORMAT(energy(),,9)

exit 0

/* ----------------------------- */

advance : procedure expose (constants) BODIES. 
  bodylist = BODIES.list ; dt = ARG(1)

  do while bodylist <> NULL
    parse var bodylist body bodylist
    nextbodylist = bodylist

    do while nextbodylist <> NULL
      parse var nextbodylist nextbody nextbodylist

      dx = BODIES.body.x - BODIES.nextbody.x
      dy = BODIES.body.y - BODIES.nextbody.y
      dz = BODIES.body.z - BODIES.nextbody.z

      distance = sqrt(dx * dx + dy * dy + dz * dz)
      mag = dt / (distance * distance * distance)

      BODIES.body.vx = BODIES.body.vx - dx * BODIES.nextbody.mass * mag
      BODIES.body.vy = BODIES.body.vy - dy * BODIES.nextbody.mass * mag
      BODIES.body.vz = BODIES.body.vz - dz * BODIES.nextbody.mass * mag

      BODIES.nextbody.vx = BODIES.nextbody.vx + dx * BODIES.body.mass * mag
      BODIES.nextbody.vy = BODIES.nextbody.vy + dy * BODIES.body.mass * mag
      BODIES.nextbody.vz = BODIES.nextbody.vz + dz * BODIES.body.mass * mag
    end
  end

  bodylist = BODIES.list

  do while bodylist <> NULL
    parse var bodylist body bodylist
    BODIES.body.x = BODIES.body.x + dt * BODIES.body.vx
    BODIES.body.y = BODIES.body.y + dt * BODIES.body.vy
    BODIES.body.z = BODIES.body.z + dt * BODIES.body.vz
  end

  return

/* ----------------------------- */

energy : procedure expose (constants) BODIES.
  e = 0.0 ; bodylist = BODIES.list

  do while bodylist <> NULL
    parse var bodylist body bodylist
    e = e + 0.5 * BODIES.body.mass * (BODIES.body.vx * BODIES.body.vx + BODIES.body.vy * BODIES.body.vy + BODIES.body.vz * BODIES.body.vz)
    nextbodylist = bodylist

    do while nextbodylist <> NULL
      parse var nextbodylist nextbody nextbodylist
      dx = BODIES.body.x - BODIES.nextbody.x
      dy = BODIES.body.y - BODIES.nextbody.y
      dz = BODIES.body.z - BODIES.nextbody.z
      distance = sqrt(dx * dx + dy * dy + dz * dz)
      e = e - (BODIES.body.mass * BODIES.nextbody.mass) / distance
    end
  end

  return e

/* ----------------------------- */

offsetMomentum : procedure expose (constants) BODIES.
  px = 0.0 ; py = 0.0 ; pz = 0.0 ; bodylist = BODIES.list

  do while bodylist <> NULL
    parse var bodylist body bodylist
    px = px + BODIES.body.vx * BODIES.body.mass
    py = py + BODIES.body.vy * BODIES.body.mass
    pz = pz + BODIES.body.vz * BODIES.body.mass
  end

  BODIES.sun.vx = -(px / SOLAR_MASS)
  BODIES.sun.vy = -(py / SOLAR_MASS)
  BODIES.sun.vz = -(pz / SOLAR_MASS)

  return

/* ----------------------------- */

initSqrt : procedure
  sqrt.calltype = 'cdecl as function with parameters'
  sqrt.return.type = 'float64'
  sqrt.return.name = 'return value'

  sqrt.0 = 1

  sqrt.1.type = 'float64'
  sqrt.1.name = 'number'

  err = rxFuncDefine('sqrt', 'libm.so.6', 'sqrt', 'sqrt.')

  if err \= 0 then
    say "Error registering function 'sqrt'"

  return
