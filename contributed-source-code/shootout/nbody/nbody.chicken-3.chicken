;;; The Computer Language Benchmarks Game
;;; http://shootout.alioth.debian.org/
;;;
;;; contributed by Anthony Borla
;;
;; Imperative-style implementation based on the SBCL implementation by
;; Patrick Frankenberger and Juho Snellman, but using only native Scheme
;; idioms like 'named let' and 'do' special form.


(require-extension format)

(define-constant +pi+ 3.141592653589793)
(define-constant +days-per-year+ 365.24)
(define +solar-mass+ (* 4 +pi+ +pi+))

(define-record body x y z vx vy vz mass)

(define *sun*
  (make-body 0.0 0.0 0.0 0.0 0.0 0.0 +solar-mass+))

(define *jupiter*
  (make-body 4.84143144246472090
             -1.16032004402742839
             -1.03622044471123109e-1
             (* 1.66007664274403694e-3 +days-per-year+)
             (* 7.69901118419740425e-3 +days-per-year+)
             (* -6.90460016972063023e-5  +days-per-year+)
             (* 9.54791938424326609e-4 +solar-mass+)))

(define *saturn*
  (make-body 8.34336671824457987
             4.12479856412430479
             -4.03523417114321381e-1
             (* -2.76742510726862411e-3 +days-per-year+)
             (* 4.99852801234917238e-3 +days-per-year+)
             (* 2.30417297573763929e-5 +days-per-year+)
             (* 2.85885980666130812e-4 +solar-mass+)))

(define *uranus*
  (make-body 1.28943695621391310e1
             -1.51111514016986312e1
             -2.23307578892655734e-1
             (* 2.96460137564761618e-03 +days-per-year+)
             (* 2.37847173959480950e-03 +days-per-year+)
             (* -2.96589568540237556e-05 +days-per-year+)
             (* 4.36624404335156298e-05 +solar-mass+)))

(define *neptune*
  (make-body 1.53796971148509165e+01
             -2.59193146099879641e+01
             1.79258772950371181e-01
             (* 2.68067772490389322e-03 +days-per-year+)
             (* 1.62824170038242295e-03 +days-per-year+)
             (* -9.51592254519715870e-05 +days-per-year+)
             (* 5.15138902046611451e-05 +solar-mass+)))

(define (offset-momentum system)
  (let ((px 0.0) (py 0.0) (pz 0.0))

    (let loop-i ((i system))
      (if (null? i) '()
        (begin
          (set! px (+ px (* (body-vx (car i)) (body-mass (car i)))))
          (set! py (+ py (* (body-vy (car i)) (body-mass (car i)))))
          (set! pz (+ pz (* (body-vz (car i)) (body-mass (car i)))))
          (loop-i (cdr i)))))

    (body-vx-set! (car system) (/ (- px) +solar-mass+))
    (body-vy-set! (car system) (/ (- py) +solar-mass+))
    (body-vz-set! (car system) (/ (- pz) +solar-mass+))))

(define (energy system)
  (let ((e 0.0))

    (let loop-o ((o system))
      (if (null? o) '()
        (begin
          (set! e (+ e (* 0.5 (body-mass (car o)) 
                          (+ (* (body-vx (car o)) (body-vx (car o)))
                             (* (body-vy (car o)) (body-vy (car o)))
                             (* (body-vz (car o)) (body-vz (car o)))))))

          (let loop-i ((i (cdr o)))
            (if (null? i) '()
              (begin
                (let* ((dx (- (body-x (car o)) (body-x (car i))))
                       (dy (- (body-y (car o)) (body-y (car i))))
                       (dz (- (body-z (car o)) (body-z (car i))))
                       (distance (sqrt (+ (* dx dx) (* dy dy) (* dz dz)))))
                  (set! e (- e (/ (* (body-mass (car o)) (body-mass (car i))) distance))))

                (loop-i (cdr i)))))

          (loop-o (cdr o)))))
  e))

(define (advance system dt)
  (let loop-o ((o system))
    (if (null? o) '()
      (begin
        (let loop-i ((i (cdr o)))
          (if (null? i) '()
            (begin
              (let* ((dx (- (body-x (car o)) (body-x (car i))))
                     (dy (- (body-y (car o)) (body-y (car i))))
                     (dz (- (body-z (car o)) (body-z (car i))))
                     (distance (sqrt (+ (* dx dx) (* dy dy) (* dz dz))))
                     (mag (/ dt (* distance distance distance)))
                     (dxmag (* dx mag))
                     (dymag (* dy mag))
                     (dzmag (* dz mag)))
                (body-vx-set! (car o) (- (body-vx (car o)) (* dxmag (body-mass (car i)))))
                (body-vy-set! (car o) (- (body-vy (car o)) (* dymag (body-mass (car i)))))
                (body-vz-set! (car o) (- (body-vz (car o)) (* dzmag (body-mass (car i)))))
                (body-vx-set! (car i) (+ (body-vx (car i)) (* dxmag (body-mass (car o)))))
                (body-vy-set! (car i) (+ (body-vy (car i)) (* dymag (body-mass (car o)))))
                (body-vz-set! (car i) (+ (body-vz (car i)) (* dzmag (body-mass (car o))))))

              (loop-i (cdr i)))))

        (loop-o (cdr o)))))

  (let loop-o ((o system))
    (if (null? o) '()
      (begin
        (body-x-set! (car o) (+ (body-x (car o)) (* dt (body-vx (car o)))))
        (body-y-set! (car o) (+ (body-y (car o)) (* dt (body-vy (car o)))))
        (body-z-set! (car o) (+ (body-z (car o)) (* dt (body-vz (car o)))))
        (loop-o (cdr o))))))

(define (main args)
  (let ((n (if (null? args)
               1
               (string->number (car args))))

    (system (list *sun* *jupiter* *saturn* *uranus* *neptune*)))

    (offset-momentum system)
    (format #t "~,9F~%" (energy system))

    (do ((i 1 (+ i 1)))
        ((< n i))
      (advance system 0.01))

    (format #t "~,9F~%" (energy system))))

(main (command-line-arguments))

