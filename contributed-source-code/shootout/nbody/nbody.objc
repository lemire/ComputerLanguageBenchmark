/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
   based on the C# by Isaac Guoy
   use -std=gnu99 in gcc's arguments
*/

#include <math.h>
#include <objc/Object.h>
#include <stdio.h>
#include <stdlib.h>

const double PI = 3.141592653589793;
const double SOLAR_MASS = 39.478417604357432; // 4 * PI * PI;
const double DAYS_PER_YEAR = 365.24;

@interface Body : Object {
    @public
    double x, y, z, vx, vy, vz, mass;
}
-offsetMomentum : (double) px : (double) py : (double) pz;
@end
@interface Jupiter : Body {
}
-init;
@end
@interface Saturn : Body {
}
-init;
@end
@interface Uranus : Body {
}
-init;
@end
@interface Neptune : Body {
}
-init;
@end
@interface Sun : Body {
}
-init;
@end
@interface NBodySystem : Object {
    Body** bodies;
}
-init;
-advance : (int) n : (double) dt;
-(double) energy;
@end

@implementation Body
-offsetMomentum : (double) px : (double) py : (double) pz {
    vx = -px / SOLAR_MASS;
    vy = -py / SOLAR_MASS;
    vz = -pz / SOLAR_MASS;
    return self;
}
@end
@implementation Jupiter
-init {
    x = 4.84143144246472090e+00;
    y = -1.16032004402742839e+00;
    z = -1.03622044471123109e-01;
    vx = 1.66007664274403694e-03 * DAYS_PER_YEAR;
    vy = 7.69901118419740425e-03 * DAYS_PER_YEAR;
    vz = -6.90460016972063023e-05 * DAYS_PER_YEAR;
    mass = 9.54791938424326609e-04 * SOLAR_MASS;
    return self;
}
@end
@implementation Saturn
-init {
    x = 8.34336671824457987e+00;
    y = 4.12479856412430479e+00;
    z = -4.03523417114321381e-01;
    vx = -2.76742510726862411e-03 * DAYS_PER_YEAR;
    vy = 4.99852801234917238e-03 * DAYS_PER_YEAR;
    vz = 2.30417297573763929e-05 * DAYS_PER_YEAR;
    mass = 2.85885980666130812e-04 * SOLAR_MASS;
    return self;
}
@end
@implementation Uranus
-init {
    x = 1.28943695621391310e+01;
    y = -1.51111514016986312e+01;
    z = -2.23307578892655734e-01;
    vx = 2.96460137564761618e-03 * DAYS_PER_YEAR;
    vy = 2.37847173959480950e-03 * DAYS_PER_YEAR;
    vz = -2.96589568540237556e-05 * DAYS_PER_YEAR;
    mass = 4.36624404335156298e-05 * SOLAR_MASS;
    return self;
}
@end
@implementation Neptune
-init {
    x = 1.53796971148509165e+01;
    y = -2.59193146099879641e+01;
    z = 1.79258772950371181e-01;
    vx = 2.68067772490389322e-03 * DAYS_PER_YEAR;
    vy = 1.62824170038242295e-03 * DAYS_PER_YEAR;
    vz = -9.51592254519715870e-05 * DAYS_PER_YEAR;
    mass = 5.15138902046611451e-05 * SOLAR_MASS;
    return self;
}
@end
@implementation Sun
-init {
    mass = SOLAR_MASS;
    x = y = z = vx = vy = vz = 0;
    return self;
}
@end
@implementation NBodySystem
-init {
    double px, py, pz;
    bodies = (Body**) malloc(5 * sizeof(Body*));
    bodies[0] = [[Sun alloc] init];
    bodies[1] = [[Jupiter alloc] init];
    bodies[2] = [[Saturn alloc] init];
    bodies[3] = [[Uranus alloc] init];
    bodies[4] = [[Neptune alloc] init];
    px = py = pz = 0;
    for (int i = 0; i < 5; i++) {
        px += bodies[i]->vx * bodies[i]->mass;
        py += bodies[i]->vy * bodies[i]->mass;
        pz += bodies[i]->vz * bodies[i]->mass;
    }
    [bodies[0] offsetMomentum : px : py : pz];
    return self;
}
-advance : (int) n : (double) dt {
    double dx, dy, dz, distance, mag;
    for (int count = 0; count < n; count++) {
        for (int i=0; i < 5; i++) {
            for (int j=i+1; j < 5; j++) {
                dx = bodies[i]->x - bodies[j]->x;
                dy = bodies[i]->y - bodies[j]->y;
                dz = bodies[i]->z - bodies[j]->z;
                
                distance = sqrt(dx*dx + dy*dy + dz*dz);
                mag = dt / (distance * distance * distance);
                
                bodies[i]->vx -= dx * bodies[j]->mass * mag;
                bodies[i]->vy -= dy * bodies[j]->mass * mag;
                bodies[i]->vz -= dz * bodies[j]->mass * mag;
                
                bodies[j]->vx += dx * bodies[i]->mass * mag;
                bodies[j]->vy += dy * bodies[i]->mass * mag;
                bodies[j]->vz += dz * bodies[i]->mass * mag;
            }
        }
        for (int i = 0; i < 5; i++) {
            bodies[i]->x += dt * bodies[i]->vx;
            bodies[i]->y += dt * bodies[i]->vy;
            bodies[i]->z += dt * bodies[i]->vz;
        }
    }
    return self;
}
-(double) energy {
    double dx, dy, dz, distance;
    double e = 0.0;
    
    for (int i=0; i < 5; i++) {
     e += 0.5 * bodies[i]->mass *
        ( bodies[i]->vx * bodies[i]->vx
        + bodies[i]->vy * bodies[i]->vy
        + bodies[i]->vz * bodies[i]->vz );
    
     for (int j=i+1; j < 5; j++) {
        dx = bodies[i]->x - bodies[j]->x;
        dy = bodies[i]->y - bodies[j]->y;
        dz = bodies[i]->z - bodies[j]->z;
    
        distance = sqrt(dx*dx + dy*dy + dz*dz);
        e -= (bodies[i]->mass * bodies[j]->mass) / distance;
     }
    }
    return e;
}
@end

int main (int argc, char * argv[]) {
    int n = (argc>1) ? atoi(argv[1]) : 1000;
    NBodySystem* sys = [[NBodySystem alloc] init];
    printf ("%.9f\n", [sys energy]);
    [sys advance : n : 0.01];
    printf ("%.9f\n", [sys energy]);
}



