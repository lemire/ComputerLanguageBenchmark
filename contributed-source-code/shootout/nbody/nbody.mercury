% The Computer Language Shootout Benchmarks Game
% http://shootout.alioth.debian.org/
%
% Based on work by Anthony Borla (SWI-Prolog) and Troestler Christophe (OCaml)
% Modified for Mercury by Glendon Holst

:- module nbody.
:- interface.
:- import_module io.

:- pred main(io::di, io::uo) is det.

% ----------------------------------------------------------------------

:- implementation.

:- import_module list.
:- import_module bool.
:- import_module int.
:- import_module float.
:- import_module math.
:- import_module string.

% ----------------------------------------------------------------------

:- type planet ---> planet( x :: float, y :: float, z :: float, 
							vx :: float, vy :: float, vz :: float, 
							mass :: float).

% ----------------------------------------------------------------------

main(!IO) :-
	io.command_line_arguments(Args, !IO),
	(
		if
			Args = [AString|_],
			string.to_int(string.strip(AString), Aint)
		then
			N = Aint
		else
			N is 20000000
	),
	
	make_bodies(Bodies0),

	EnergyStart = energy(Bodies0),
	io.format("%.9f\n", [f(EnergyStart)], !IO),
	loop_advance(N, 0.01, Bodies0, Bodies),
	EnergyAfter = energy(Bodies),
	io.format("%.9f\n", [f(EnergyAfter)], !IO).

% ------------------------------- %

:- func energy(list(planet)) = float.
:- func energy_(list(planet), float) = float.
:- func energy_diff_(planet, list(planet), float) = float.

energy(Bodies) = energy_(Bodies, 0.0).

energy_(Bodies, Energy0) = Result :-
(
	Bodies = [B | Bs] ->
	Energy1 = Energy0 + 0.5 * B^mass * 
		(B^vx * B^vx + B^vy * B^vy + B^vz * B^vz),
	Energy2 = energy_diff_(B, Bs, Energy1),
	Result = energy_(Bs, Energy2)
;
	Result = Energy0
).

energy_diff_(Planet, Bodies, Energy0) = Result :-
(
	Bodies = [B | Bs] ->
	Dx = Planet^x - B^x, 
	Dy = Planet^y - B^y, 
	Dz = Planet^z - B^z, 
	Distance = sqrt(Dx * Dx + Dy * Dy + Dz * Dz),
	Energy1 = Energy0 - ((Planet^mass * B^mass) / Distance),
	Result = energy_diff_(Planet, Bs, Energy1)
;
	Result = Energy0
).

% ------------------------------- %

:- pred advance(float::in, list(planet)::in, list(planet)::out) is det.
:- pred advance_(float, planet, planet, list(planet), list(planet)) is det.
:- mode advance_(in, in, out, in, out) is det.

advance(Dt, Bodies0, Bodies) :-
(
	Bodies0 = [B0 | B0s] ->
	advance_(Dt, B0, B1, B0s, B1s),
	advance(Dt, B1s, Bs),
	B2 = (B1^x := B1^x + Dt * B1^vx),
	B3 = (B2^y := B2^y + Dt * B2^vy),
	B = (B3^z := B3^z + Dt * B3^vz),
	Bodies = [ B | Bs]
;
	Bodies = Bodies0
).

advance_(Dt, Planet0, Planet, Bodies0, Bodies) :-
(
	Bodies0 = [B0 | B0s] ->

	Dx = Planet0^x - B0^x, 
	Dy = Planet0^y - B0^y, 
	Dz = Planet0^z - B0^z, 

	Dist2 = Dx * Dx + Dy * Dy + Dz * Dz,
	
	Mag = Dt / (Dist2 * sqrt(Dist2)),

    Planet1 = (Planet0^vx := Planet0^vx - Dx * B0^mass * Mag),
    Planet2 = (Planet1^vy := Planet1^vy - Dy * B0^mass * Mag),
    Planet3 = (Planet2^vz := Planet2^vz - Dz * B0^mass * Mag),

	B1 = (B0^vx := B0^vx + Dx * Planet3^mass * Mag),
	B2 = (B1^vy := B1^vy + Dy * Planet3^mass * Mag),
	B = (B2^vz := B2^vz + Dz * Planet3^mass * Mag),
	
	advance_(Dt, Planet3, Planet, B0s, Bs),
	
	Bodies = [B | Bs]
;
	Planet = Planet0,
	Bodies0 = Bodies
).

% ------------------------------- %

:- pred loop_advance(int, float, list(planet), list(planet)) is det.
:- mode loop_advance(in, in, in, out) is det.

loop_advance(N, Dt, Bodies0, Bodies) :-
(
	N > 0 ->
	advance(Dt, Bodies0, Bodies1),
	loop_advance(N - 1, Dt, Bodies1, Bodies)
;
	Bodies = Bodies0
).

% ------------------------------- %

:- type vector3f == {float, float, float}.

:- pred make_bodies(list(planet)::out) is det.

make_bodies(Bodies) :-
	SolarMass = 3.9478417604357432000e+01,
	DaysPerYear = 365.24,
	Jupiter = planet( 4.84143144246472090e+00, -1.16032004402742839e+00, 
		-1.03622044471123109e-01,
		1.66007664274403694e-03 * DaysPerYear, 
		7.69901118419740425e-03 * DaysPerYear, 
		-6.90460016972063023e-05 * DaysPerYear,
		9.54791938424326609e-04 * SolarMass),

	Saturn = planet( 8.34336671824457987e+00, 4.12479856412430479e+00, 
		-4.03523417114321381e-01,
		-2.76742510726862411e-03 * DaysPerYear, 
		4.99852801234917238e-03 * DaysPerYear, 
		2.30417297573763929e-05 * DaysPerYear,
		2.85885980666130812e-04 * SolarMass),

	Uranus = planet( 1.28943695621391310e+01, -1.51111514016986312e+01, 
		-2.23307578892655734e-01,
		2.96460137564761618e-03 * DaysPerYear, 
		2.37847173959480950e-03 * DaysPerYear, 
		-2.96589568540237556e-05 * DaysPerYear,
		4.36624404335156298e-05 * SolarMass),

	Neptune = planet( 1.53796971148509165e+01, -2.59193146099879641e+01, 
		1.79258772950371181e-01,
		2.68067772490389322e-03 * DaysPerYear, 
		1.62824170038242295e-03 * DaysPerYear, 
		-9.51592254519715870e-05 * DaysPerYear,
		5.15138902046611451e-05 * SolarMass),

	Planets = [Jupiter, Saturn, Uranus, Neptune],
	 
	{Px, Py, Pz} = offset_momentum(Planets),

	Sun = planet( 0.0, 0.0, 0.0, 
		Px / SolarMass, Py / SolarMass, Pz / SolarMass, SolarMass),
  
	Bodies = [Sun | Planets].

% ------------------------------- %

:- func offset_momentum(list(planet)) = vector3f.

offset_momentum(Bodies) = offset_momentum_(Bodies, {0.0, 0.0, 0.0}).

:- func offset_momentum_(list(planet), vector3f) = vector3f.

offset_momentum_(Bodies, Acc) = Result :-
(
	Bodies = [P | Planets] ->
	Acc = {Px, Py, Pz},
	Result = offset_momentum_(Planets, 
		{Px - (P^vx * P^mass), Py - (P^vy * P^mass), Pz - (P^vz * P^mass)})
;
	Result = Acc
).

% ------------------------------- %
