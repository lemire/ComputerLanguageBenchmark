# The Computer Language Shootout Benchmarks
# http://shootout.alioth.debian.org/
# Contributed by Kevin Carson
# Modified by bearophile, Oct 10 2006 (suggestion by Skip)

import sys, psyco
from math import sqrt, pi
from psyco.classes import __metaclass__

solar_mass = 4 * pi * pi


def advance(bodies, dt, nbodies):
    for i in xrange(nbodies):
        b = bodies[i]
        b_mass = b.mass
        b_x = b.x
        b_y = b.y
        b_z = b.z

        for j in xrange(i + 1, nbodies):
            b2 = bodies[j]

            dx = b_x - b2.x
            dy = b_y - b2.y
            dz = b_z - b2.z

            distance = sqrt(dx*dx + dy*dy + dz*dz)
            aux = dt / (distance*distance*distance)
            b_mass_x_mag = b_mass * aux
            b2_mass_x_mag = b2.mass * aux

            b.vx -= dx * b2_mass_x_mag
            b.vy -= dy * b2_mass_x_mag
            b.vz -= dz * b2_mass_x_mag
            b2.vx += dx * b_mass_x_mag
            b2.vy += dy * b_mass_x_mag
            b2.vz += dz * b_mass_x_mag

    for b in bodies:
        b.x += dt * b.vx
        b.y += dt * b.vy
        b.z += dt * b.vz


def energy(bodies):
    e = 0.0
    for i in xrange(len(bodies)):
        b = bodies[i]
        e += 0.5 * b.mass * (b.vx*b.vx + b.vy*b.vy + b.vz*b.vz)

        for j in xrange(i + 1, len(bodies)):
            b2 = bodies[j]

            dx = b.x - b2.x
            dy = b.y - b2.y
            dz = b.z - b2.z
            distance = sqrt(dx*dx + dy*dy + dz*dz)

            e -= (b.mass * b2.mass) / distance
    return e


def offset_momentum(bodies, sun):
    px = py = pz = 0.0

    for b in bodies:
        px += b.vx * b.mass
        py += b.vy * b.mass
        pz += b.vz * b.mass

    sun.vx = - px / solar_mass
    sun.vy = - py / solar_mass
    sun.vz = - pz / solar_mass


def main():
    class Body:
        def __init__(self, **data):
            self.__dict__.update(data)

    days_per_year = 365.24

    sun = Body(x=0, y=0, z=0, vx=0, vy=0, vz=0, mass=solar_mass)

    jupiter = Body(x=4.84143144246472090e+00,
                   y=-1.16032004402742839e+00,
                   z=-1.03622044471123109e-01,
                   vx=1.66007664274403694e-03 * days_per_year,
                   vy=7.69901118419740425e-03 * days_per_year,
                   vz=-6.90460016972063023e-05 * days_per_year,
                   mass=9.54791938424326609e-04 * solar_mass)

    saturn = Body(x=8.34336671824457987e+00,
                  y=4.12479856412430479e+00,
                  z=-4.03523417114321381e-01,
                  vx=-2.76742510726862411e-03 * days_per_year,
                  vy=4.99852801234917238e-03 * days_per_year,
                  vz=2.30417297573763929e-05 * days_per_year,
                  mass=2.85885980666130812e-04 * solar_mass)

    uranus = Body(x=1.28943695621391310e+01,
                  y=-1.51111514016986312e+01,
                  z=-2.23307578892655734e-01,
                  vx=2.96460137564761618e-03 * days_per_year,
                  vy=2.37847173959480950e-03 * days_per_year,
                  vz=-2.96589568540237556e-05 * days_per_year,
                  mass=4.36624404335156298e-05 * solar_mass)

    neptune = Body(x=1.53796971148509165e+01,
                   y=-2.59193146099879641e+01,
                   z=1.79258772950371181e-01,
                   vx=2.68067772490389322e-03 * days_per_year,
                   vy=1.62824170038242295e-03 * days_per_year,
                   vz=-9.51592254519715870e-05 * days_per_year,
                   mass=5.15138902046611451e-05 * solar_mass)

    n = int(sys.argv[1])
    bodies = [sun, jupiter, saturn, uranus, neptune]
    nbodies = len(bodies)
    offset_momentum(bodies, sun)
    print "%.9f" % energy(bodies)

    for i in xrange(n):
        advance(bodies, 0.01, nbodies)
    print "%.9f" % energy(bodies)


psyco.bind(main)
main()