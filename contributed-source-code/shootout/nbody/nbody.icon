# The Computer Language Shootout Benchmarks
# http://shootout.alioth.debian.org/
# by Charles Evans 2005-12-25
# based on nbody.py by Kevin Carson
#
# - - - NOTE: this program uses printf, but 
# both the debian stable and the latest official release are buggy,
# and will cause this program to fail. 
# - - - Please use the June 16, 2003 version, also uploaded to 
# https://alioth.debian.org/tracker/index.php?func=detail&aid=302825&group_id=30402&atid=411005

link printf

$define pi 3.14159265358979323
$define days_per_year  365.24
global solar_mass, t


procedure advance(bodies, dt)
local i,b,j,b2,bdt_mass_x_mag,bdt2_mass_x_mag,dx,dy,dz,dtdistance3
every i:=1 to *bodies do{
        b := bodies[i]

	every j:=i+1 to *bodies do{
            b2 := bodies[j]

            dx := b.x - b2.x
            dy := b.y - b2.y
            dz := b.z - b2.z
            dtdistance3 := dt / (dx*dx + dy*dy + dz*dz)^1.5 # ^(.5*3)
				bdt_mass_x_mag :=  b.mass * dtdistance3
bdt2_mass_x_mag := b2.mass * dtdistance3
# we should save each dt*b.mass while dt is constant
            b.vx -:= dx * bdt2_mass_x_mag
            b.vy -:= dy * bdt2_mass_x_mag
            b.vz -:= dz *bdt2_mass_x_mag
            b2.vx +:= dx *bdt_mass_x_mag
            b2.vy +:= dy *bdt_mass_x_mag
            b2.vz +:= dz *bdt_mass_x_mag
        } # end every j
    } # end every i
    every b:=!bodies do{
        b.x +:= dt * b.vx
        b.y +:= dt * b.vy
        b.z +:= dt * b.vz
}# end every *bodies
end

procedure energy(bodies)
local dx,dy,dz,distance,e
    e := 0.0
    every i:=1 to *bodies do{
        b := bodies[i]

        e +:= 0.5 * b.mass * (b.vx^2 + b.vy^2 + b.vz^2)

	every j:=i+1 to *bodies do{
            b2 := bodies[j]

            dx := b.x - b2.x
            dy := b.y - b2.y
            dz := b.z - b2.z
            distance := (dx*dx + dy*dy + dz*dz)^0.5

            e -:= (b.mass * b2.mass) / distance
	}
    }
    return e
end

global sun, jupiter, saturn, uranus, neptune

procedure offset_momentum(bodies)
local px,py,pz,b
    px := py := pz := 0.0

#    for b in bodies :
    every b:=!bodies do{
        px +:= b.vx * b.mass
        py +:= b.vy * b.mass
        pz +:= b.vz * b.mass
    }
    sun.vx := - px / solar_mass
    sun.vy := - py / solar_mass
    sun.vz := - pz / solar_mass
    
end

record body(x,y,z,vx,vy,vz,mass)

procedure init()
sun := body()
sun.x := sun.y := sun.z := sun.vx := sun.vy := sun.vz := 0.0
sun.mass := solar_mass

jupiter := body()
jupiter.x := 4.84143144246472090e+00
jupiter.y := -1.16032004402742839e+00
jupiter.z := -1.03622044471123109e-01
jupiter.vx := 1.66007664274403694e-03 * days_per_year
jupiter.vy := 7.69901118419740425e-03 * days_per_year
jupiter.vz := -6.90460016972063023e-05 * days_per_year
jupiter.mass := 9.54791938424326609e-04 * solar_mass

saturn := body()
saturn.x := 8.34336671824457987e+00
saturn.y := 4.12479856412430479e+00
saturn.z := -4.03523417114321381e-01
saturn.vx := -2.76742510726862411e-03 * days_per_year
saturn.vy := 4.99852801234917238e-03 * days_per_year
saturn.vz := 2.30417297573763929e-05 * days_per_year
saturn.mass := 2.85885980666130812e-04 * solar_mass

uranus := body()
uranus.x := 1.28943695621391310e+01
uranus.y := -1.51111514016986312e+01
uranus.z := -2.23307578892655734e-01
uranus.vx := 2.96460137564761618e-03 * days_per_year
uranus.vy := 2.37847173959480950e-03 * days_per_year
uranus.vz := -2.96589568540237556e-05 * days_per_year
uranus.mass := 4.36624404335156298e-05 * solar_mass

neptune := body()
neptune.x := 1.53796971148509165e+01
neptune.y := -2.59193146099879641e+01
neptune.z := 1.79258772950371181e-01
neptune.vx := 2.68067772490389322e-03 * days_per_year
neptune.vy := 1.62824170038242295e-03 * days_per_year
neptune.vz := -9.51592254519715870e-05 * days_per_year
neptune.mass := 5.15138902046611451e-05 * solar_mass
end # init

procedure main(argv)
    solar_mass := ( 4 * pi * pi)
    init()
    n := argv[1]| stop("Usage: nbody <N>")

    bodies := [sun, jupiter, saturn, uranus, neptune]
	# ^ must be after init()
    offset_momentum(bodies)
t:=0
    printf( "%11.9r\n", energy(bodies))
every t:= 1 to n do 
	advance(bodies, 0.01)
    printf( "%11.9r\n", energy(bodies))
#write(energy(bodies))
#write(&errout,&time)
end