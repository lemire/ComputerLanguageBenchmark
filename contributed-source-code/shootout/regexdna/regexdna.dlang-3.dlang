/*
** The Computer Language Shootout
** http://shootout.alioth.debian.org/
** contributed by Mike Pall
** converted to D by Dave Fladebo
**
** regex-dna benchmark using PCRE
**
** compile with:
**   dmd -O -inline -release -L-lpcre regexdna3.d
*/

import std.cstream, std.stdio, std.string, std.c.stdlib;

void main(char[][] args)
{
  char[][2] seq;
  size_t idx, ilen, clen, slen;
  int n, flip;

  char[4096] cbuf;
  while((n = din.readBlock(cbuf.ptr, cbuf.length)) > 0)
  {
    seq[0] ~= cbuf[0 .. n];
    ilen += n;
  }

  clen = fb_subst(seq[1], seq[0], ">.*|\n", "");

  foreach (variant; variants)
  {
    writefln("%s %d", variant, fb_countmatches(seq[1], variant));
  }

  for (slen = 0, flip = 1, idx = 0; idx < subst.length; idx += 2, flip = 1 - flip)
  {
    slen = fb_subst(seq[1-flip], seq[flip], subst[idx], subst[idx+1]);
  }

  writefln("\n%d\n%d\n%d", ilen, clen, slen);

  return;
}

/* Substitute pattern p with replacement r, copying from src to dst string. */
size_t fb_subst(inout char[] dst, char[] src, char[] p, char[] r)
{
  pcre*       re;
  pcre_extra* re_ex;
  char*       re_e;
  char*       dp;
  int         re_eo, pos;
  int[3]      m;
  size_t      clen, need, dlen;

  if ((re = pcre_compile(toStringz(p), PCRE_FLAGS, &re_e, &re_eo, null)) is null) exit(1);
  re_ex = pcre_study(re, 0, &re_e);

  while(pcre_exec(re, re_ex, src.ptr, src.length, pos, 0, m.ptr, 3) >= 0)
  {
    clen = m[0] - pos;
    need = dlen + clen + r.length;
    if (dst.length < need) dst.length = need * 2;
    dst[dlen .. dlen + clen] = src[pos .. pos + clen];
    dst[dlen + clen .. dlen + clen + r.length] = r;
    dlen += clen + r.length;
    pos = m[1];
  }
  clen = src.length - pos;
  if(dst.length < dlen + clen) dst.length = dlen + clen;
  dst[dlen .. dlen + clen] = src[pos .. pos + clen];

  return dst.length = dlen + clen;
}

/* Count all matches with pattern p in src string. */
int fb_countmatches(char[] src, char[] p)
{
  pcre* re;
  pcre_extra* re_ex;
  char* re_e;
  int re_eo, pos, count;
  int[3] m;

  if ((re = pcre_compile(toStringz(p), PCRE_FLAGS, &re_e, &re_eo, null)) is null) exit(1);
  re_ex = pcre_study(re, 0, &re_e);

  while(pcre_exec(re, re_ex, src.ptr, src.length, pos, 0, m.ptr, 3) >= 0)
  {
       pos = m[1];
       count++;
  }

  return count;
}

extern (C)
{
    struct pcre;
    pcre* pcre_compile(char*, int, char**, int*, ubyte*);
    pcre_extra* pcre_study(pcre*, int,char**);
    int pcre_exec(pcre*, pcre_extra*, char*, int, int, int, int*, int);
}

const PCRE_FLAGS = 0x00000000;

struct pcre_extra
{
  ulong flags;
  void *study_data;
  ulong match_limit;
  void *callout_data;
  ubyte* tables;
}

const char[][] variants =
[
  "agggtaaa|tttaccct",         "[cgt]gggtaaa|tttaccc[acg]",
  "a[act]ggtaaa|tttacc[agt]t", "ag[act]gtaaa|tttac[agt]ct",
  "agg[act]taaa|ttta[agt]cct", "aggg[acg]aaa|ttt[cgt]ccct",
  "agggt[cgt]aa|tt[acg]accct", "agggta[cgt]a|t[acg]taccct",
  "agggtaa[cgt]|[acg]ttaccct"
];

const char[][] subst =
[
  "B", "(c|g|t)", "D", "(a|g|t)",   "H", "(a|c|t)", "K", "(g|t)",
  "M", "(a|c)",   "N", "(a|c|g|t)", "R", "(a|g)",   "S", "(c|g)",
  "V", "(a|c|g)", "W", "(a|t)",     "Y", "(c|t)"
];
