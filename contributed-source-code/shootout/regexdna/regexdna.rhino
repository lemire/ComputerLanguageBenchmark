/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
   for JavaScript Rhino only
*/

importPackage(java.io);
importPackage(java.lang);

var r = new BufferedReader(
   new InputStreamReader(Packages.java.lang.System['in']));
var sb = new StringBuffer(10240);
var cbuf = java.lang.reflect.Array.newInstance(
   java.lang.Character.TYPE, 10240);
var charsRead;

while ((charsRead = r.read(cbuf, 0, 10240)) != -1)
   sb.append(cbuf, 0, charsRead);
var seq = '' + sb.toString(); 
 // seq is now a JavaScript string, not a Java string.  Keeping it Java
 // might be faster, but wouldn't test JavaScript's speed.
sb = null;
    
var initialLength = seq.length;
seq = seq.replace( />.*\n|\n/g, '');
var codeLength = seq.length;

var variants = [ 'agggtaaa|tttaccct','[cgt]gggtaaa|tttaccc[acg]', 
   'a[act]ggtaaa|tttacc[agt]t', 'ag[act]gtaaa|tttac[agt]ct', 
   'agg[act]taaa|ttta[agt]cct', 'aggg[acg]aaa|ttt[cgt]ccct',
   'agggt[cgt]aa|tt[acg]accct', 'agggta[cgt]a|t[acg]taccct', 
   'agggtaa[cgt]|[acg]ttaccct' ];
for (var i in variants) {
   var matches = seq.match(new RegExp(variants[i],'g'));
   var nummatches = (matches != null) ? matches.length : 0;
   print(variants[i] + ' ' + nummatches);
}

var iubs={'B':'(c|g|t)', 'D':'(a|g|t)', 'H':'(a|c|t)', 'K':'(g|t)', 
   'M':'(a|c)', 'N':'(a|c|g|t)', 'R':'(a|g)', 'S':'(c|g)', 
   'V':'(a|c|g)', 'W':'(a|t)', 'Y':'(c|t)'};
for (var x in iubs) {
   seq = seq.replace(new RegExp(x, 'g'), iubs[x]); 
   // Passing Regexp object is required by benchmark. 
   // Otherwise String.replace matches as a string
}
print();
print(initialLength);
print(codeLength);
print(seq.length);
