# The Computer Language Shootout
# http://shootout.alioth.debian.org/
# Icon  regex-dna
# regex-dna#2.icn
# contributed by Charles Evans 2005/12/24

procedure main()
seq:=""
while seq||:=reads(,500000) 
ilen := *seq

map(seq) ? {seq:=""
		 while seq ||:= (tab(upto('>\n')))
		   do ="\n" | tab(find("\n")+1) 
# \n is more frequent, so check for it alone for speed.
	}
clen := *seq

variants := [
      "agggtaaa|tttaccct",
      "[cgt]gggtaaa|tttaccc[acg]",
      "a[act]ggtaaa|tttacc[agt]t",
      "ag[act]gtaaa|tttac[agt]ct",
      "agg[act]taaa|ttta[agt]cct",
      "aggg[acg]aaa|ttt[cgt]ccct",
      "agggt[cgt]aa|tt[acg]accct",
      "agggta[cgt]a|t[acg]taccct",
      "agggtaa[cgt]|[acg]ttaccct"]
every f:=!variants do 
    write(f, " ", findeach(f, seq))

subst :=[
      "B" , "(c|g|t)", "D" , "(a|g|t)",   "H" , "(a|c|t)", "K" , "(g|t)",
      "M" , "(a|c)",   "N" , "(a|c|g|t)", "R" , "(a|g)",   "S" , "(c|g)",
      "V" , "(a|c|g)", "W" , "(a|t)",     "Y" , "(c|t)"]
seq:=lmap(subst,seq)

every write(""|ilen|clen|*seq)
#write(&errout,&time) # 500k=2.2s,    2.5m=14.5s
end # main



procedure lmap(pairlist,str)
local lt,ss,cs,c,st
lt:=list(*&ascii); ss:=""

while c:=map(pop(pairlist)) do {
  *c=1 | stop("lmap got a search string not of length 1")
  ss||:=c
  lt[ord(c)]:=pop(pairlist)
}
cs:=cset(ss); st:=""
str ? while st||:=tab(upto(cs)) | tab(0) 
	do st||:= lt[ord(move(1))] | return st
end # lmap


procedure findeach(p,s)
local pl, pat, firstc, c, pre, alt, post
pl:=[]; c:=0
p? while put(pl,tab(find("|")|0)) do ="|" | break

every pat:=!pl do {
post:=alt:=&null
pat ? {pre:=tab(find("[")|0)
	 ="[" & alt:=cset(tab(find("]"))) & ="]" & post:=tab(0)	 
	}
# for few chars before '[]' we should find the _tail_ first!

s ? if /alt then every tab(find(pre)) do c+:=1
    else if *pre>=*post then
	 while tab(find(pre)) do
		(=pre, tab(any(alt)), =post, c+:=1) | move(1) | break
    else {  move(prealt:=*pre+1)
		while tab(find(post)) do
		   (((&subject[&pos -:prealt]) ? (=pre, any(alt))
		    ),=post, c+:=1
		   ) | move(1)
    } # end else
} # end every !pl

return c
end # findeach
