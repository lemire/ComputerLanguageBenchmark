;;; The Computer Language Benchmarks Game
;;; http://shootout.alioth.debian.org/
;;;
;;; contributed by Ivan Raikov
;;; based on code by Anthony Borla

(require-extension format regex posix srfi-1)

(define-constant VARIANTS
  (list
    "agggtaaa|tttaccct" "[cgt]gggtaaa|tttaccc[acg]" "a[act]ggtaaa|tttacc[agt]t"
    "ag[act]gtaaa|tttac[agt]ct" "agg[act]taaa|ttta[agt]cct" "aggg[acg]aaa|ttt[cgt]ccct"
    "agggt[cgt]aa|tt[acg]accct" "agggta[cgt]a|t[acg]taccct" "agggtaa[cgt]|[acg]ttaccct"))

(define-constant IUBS
  (list
    (cons "B" "(c|g|t)") (cons "D" "(a|g|t)") (cons "H" "(a|c|t)")
    (cons "K" "(g|t)") (cons "M" "(a|c)") (cons "N" "(a|c|g|t)")
    (cons "R" "(a|g)") (cons "S" "(c|g)") (cons "V" "(a|c|g)")
    (cons "W" "(a|t)") (cons "Y" "(c|t)")))

(define (sequence-length lines)
  (fold (lambda (x ax) (+ ax (string-length x))) 0 lines))

(define (load-sequence)
  (let* ((lines  (read-lines)))
    (cons (sequence-length lines) lines)))

(define (match-count rx sequence)
  (let loop ((sequence sequence) (spos 0) (count 0))
    (cond ((null? sequence) count)
	  ((null? (cdr sequence))  
	   (+ count ((lambda (x) (if x 1 0)) (string-search-positions rx (car sequence) spos))))
	  (else
	   (let ((len (string-length (car sequence)))
		 (pos (string-search-positions rx (string-append (car sequence) (cadr sequence)) spos)))
	     (if (not pos)
		 (loop (cdr sequence) 0 count)
		 ;; determine if the match is in the car or the cadr of sequence
		 (let ((end (cadr (car pos))))
		   (if (fx>= end len)
		       (loop (cdr sequence) (fx- end len) (fx+ 1 count))
		       (loop sequence end (fx+ 1 count))))))))))


(define (match-replace rp sequence)
  (define S 240)
  (define S-half (fx/ S 2))
  (let ((rx     (regexp (car rp) #t))
	(rstr   (cdr rp)))    
    (let loop ((sequence sequence) (new-sequence (list)))
      (cond ((null? sequence)  (reverse new-sequence))
	    ((null? (cdr sequence))  
	     (reverse (cons (string-substitute rx rstr (car sequence) #t) new-sequence)))
	    ((fx< S (string-length (car sequence)))
	     (let-values (((shd stl) (split-at! (string->list (car sequence)) S-half)))
		 (loop (cons (list->string shd) (cons (list->string stl) (cdr sequence)))
		       new-sequence)))
	    (else
	     (let* ((sstr   (string-append (car sequence) (cadr sequence)))
		    (flds   (string-split-fields rx sstr #:infix))
		    (nflds  (length flds)))
	       (loop (cddr sequence) (cons (string-intersperse flds rstr) new-sequence))))))))
	     

(define (main)

  ; Load sequence and record its length
  (let* ((buffer (load-sequence)) 
	 (sequence (cdr buffer))
         (initial-length (car buffer))
	 (code-length 0)
	 (segdiv (regexp ">.*?")))

    ; Remove segment divider line occurrences; record new length
    (set! sequence (filter (lambda (line) (not (string-match segdiv line))) sequence))
    (set! code-length (sequence-length sequence))

    ; Perform regexp counts
    (for-each
     (lambda (i)
       (format #t "~A ~A~%" i (match-count (regexp i) sequence)))
     VARIANTS)

    ; Perform regexp replacements, and record sequence length
    (for-each
     (lambda (i)
       (set! sequence (match-replace i sequence)))
     IUBS)
    ; Print statistics
    (format #t "~%~A~%~A~%~A~%" initial-length code-length (sequence-length sequence))))

(main)

