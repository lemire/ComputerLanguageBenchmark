/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Dave Fladebo

   compile: dmd -O -inline -release regexdna2.d
*/

import std.cstream, std.regexp, std.outbuffer;

void main()
{
    auto seq = din.toString();
    auto initLen = seq.length;

    auto ob = new OutBuffer();
    auto r = new RegExp(">.*\n|\n",null);
    foreach(str; r.split(seq))
    {
        ob.write(str);
    }
    seq = ob.toString();
    int codeLen = seq.length;

    foreach(v; variants)
    {
        int count = 0;
        foreach(m; RegExp(v,null).search(seq)) count++;
        dout.writefln(v," ",count);
    }

    foreach(key, val; subst)
    {
        seq = (new RegExp(key,"g")).replace(seq,val);
    }

    dout.writefln("\n",initLen,"\n",codeLen,"\n",seq.length);
}

static char[][] variants = [
     "agggtaaa|tttaccct","[cgt]gggtaaa|tttaccc[acg]","a[act]ggtaaa|tttacc[agt]t","ag[act]gtaaa|tttac[agt]ct"
    ,"agg[act]taaa|ttta[agt]cct","aggg[acg]aaa|ttt[cgt]ccct","agggt[cgt]aa|tt[acg]accct"
    ,"agggta[cgt]a|t[acg]taccct","agggtaa[cgt]|[acg]ttaccct"
];

char[][char[]] subst;

static this()
{
    subst["B"] = "(c|g|t)"; subst["D"] = "(a|g|t)"; subst["H"] = "(a|c|t)"; subst["K"] = "(g|t)";
    subst["M"] = "(a|c)"; subst["N"] = "(a|c|g|t)"; subst["R"] = "(a|g)"; subst["S"] = "(c|g)";
    subst["V"] = "(a|c|g)"; subst["W"] = "(a|t)"; subst["Y"] = "(c|t)";
}
