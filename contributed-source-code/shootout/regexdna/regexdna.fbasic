' The Computer Language Shootout
' http://shootout.alioth.debian.org/
' gcc program contributed by Mike Pall
' converted to FreeBASIC from gcc by Simon Nash

#include "crt.bi"
#include "pcre/pcre.bi"
'#include "pcre/pcreposix.bi"

Type fbuf_t
  As ZString ptr buf
  As size_t size, len
End Type

Function fb_need(ByVal b As fbuf_t ptr, ByVal need As size_t) As ZString ptr
  need += b->len
  If need > b->size Then
    If b->size = 0 Then 
      b->size = need
    Else 
      While need > b->size
        b->size += b->size
      Wend
    End If
    b->buf = realloc(b->buf, b->size)
    If b->buf = NULL Then End 1
  End If
  Return b->buf+b->len
End Function

#define FB_MINREAD  (3 shl 16)

' Read all of a stdio stream into dst buffer
Function fb_readall(ByVal dst As fbuf_t ptr, ByVal fp As FILE ptr) As size_t
  Dim As ZString ptr dp
  Dim As Integer n
    dp = fb_need(dst, FB_MINREAD)
    Do
      n = fread(dp, 1, dst->size-dst->len, fp)
      If n = 0 Then Exit Do
      dst->len += n
      dp = fb_need(dst, FB_MINREAD)
    Loop
    If ferror(fp) <> 0 Then End 1
    Return dst->len
End Function

' Substitute pattern p with replacement r, copying from src to dst buffer.
Function fb_subst(ByVal dst As fbuf_t ptr, ByVal src As fbuf_t ptr, _
                  ByVal p As ZString ptr, ByVal r As ZString ptr) As size_t
  Dim As pcre ptr re
  Dim As pcre_extra ptr re_ex
  Dim As ZString ptr re_e
  Dim As ZString ptr dp
  Dim As Integer re_eo, m(0 To 2), _pos, rlen, clen
    re = pcre_compile(p, PCRE_CASELESS, @re_e, @re_eo, NULL)
    If re = 0 Then End 1
    re_ex = pcre_study(re, 0, @re_e)
    rlen = strlen(r)
    dst->len = 0
    Do
      If pcre_exec(re, re_ex, src->buf, src->len, _pos, 0, @m(0), 3) < 0 Then Exit Do
      clen = m(0)-_pos
      dp = fb_need(dst, clen+rlen)
      dst->len += clen+rlen
      memcpy(dp, src->buf+_pos, clen)
      memcpy(dp+clen, r, rlen)
      _pos = m(1)
    Loop
    clen = src->len-_pos
    dp = fb_need(dst, clen)
    dst->len += clen
    memcpy(dp, src->buf+_pos, clen)
    Return dst->len
End Function

' Count all matches with pattern p in src buffer.
Function fb_countmatches(ByVal src As fbuf_t ptr, ByVal p As ZString ptr) As Integer
  Dim As pcre ptr re
  Dim As pcre_extra ptr re_ex
  Dim As ZString ptr re_e
  Dim As Integer re_eo, m(0 To 2), _pos, count
    re = pcre_compile(p, PCRE_CASELESS, @re_e, @re_eo, NULL)
    If re = 0 Then End 1
    re_ex = pcre_study(re, 0, @re_e)
    Do
      If pcre_exec(re, re_ex, src->buf, src->len, _pos, 0, @m(0), 3) < 0 Then Exit Do
      count += 1
      _pos = m(1)
    Loop
    Return count
End Function

Dim Shared As ZString ptr variants(0 To 9) = { _
  @"agggtaaa|tttaccct",         @"[cgt]gggtaaa|tttaccc[acg]", _
  @"a[act]ggtaaa|tttacc[agt]t", @"ag[act]gtaaa|tttac[agt]ct", _
  @"agg[act]taaa|ttta[agt]cct", @"aggg[acg]aaa|ttt[cgt]ccct", _
  @"agggt[cgt]aa|tt[acg]accct", @"agggta[cgt]a|t[acg]taccct", _
  @"agggtaa[cgt]|[acg]ttaccct", NULL _
}

Dim Shared As ZString ptr subst(0 To 22) = { _
  @"B", @"(c|g|t)", @"D", @"(a|g|t)",   @"H", @"(a|c|t)", @"K", @"(g|t)", _
  @"M", @"(a|c)",   @"N", @"(a|c|g|t)", @"R", @"(a|g)",   @"S", @"(c|g)", _
  @"V", @"(a|c|g)", @"W", @"(a|t)",     @"Y", @"(c|t)",   NULL _
}


Dim As fbuf_t seq(0 To 1)
Dim As ZString ptr ptr pp
Dim As size_t ilen, clen, slen
Dim As Integer _flip

  ilen = fb_readall(@seq(0), stdin)
  clen = fb_subst(@seq(1), @seq(0), ">.*|" & Chr(10), "")
  
  pp = @variants(0)
  While *pp
    printf("%s %d%c", *pp, fb_countmatches(@seq(1), *pp), 10)
    pp += 1
  Wend
    
  _flip = 1
  pp = @subst(0)
  Do
    If *pp = 0 Then Exit Do
    slen = fb_subst(@seq(1-_flip), @seq(_flip), *pp, pp[1])
    pp += 2
    _flip = 1-_flip
  Loop
  printf("%c%zu%c%zu%c%zu%c", 10, ilen, 10, clen, 10, slen, 10)

