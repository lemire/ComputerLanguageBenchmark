% The Computer Language Benchmarks Game
% http://shootout.alioth.debian.org/
% based on work by Anthony Borla and Christoph Bauer
% contributed by Glendon Holst

:- module recursive.
:- interface.
:- import_module io.

:- pred main(io::di, io::uo) is det.

% ----------------------------------------------------------------------

:- implementation.

:- import_module list.
:- import_module int.
:- import_module float.
:- import_module string.

% ----------------------------------------------------------------------

main(!IO) :-
	io.command_line_arguments(Args, !IO),
	(
		if
			Args = [AString|_],
			string.to_int(string.strip(AString), Aint)
		then
			A = Aint
		else
			A is 11
	),
	
	ack(3, A, Val1), 
	io.format("Ack(3,%d): %d\n",[i(A),i(Val1)], !IO),

	C is 27.0 + float(A),
	Val2 = fib_float(C), 
	io.format("Fib(%.1f): %.1f\n", [f(C), f(Val2)], !IO), 

	B is A-1,
	X is 3*B,
	Y is 2*B,
	Z is B,
	tak(X,Y,Z,Val3),
	io.format("Tak(%d,%d,%d): %d\n", [i(X), i(Y), i(Z), i(Val3)], !IO),
  
	Val4 = fib(3), 
	io.format("Fib(3): %d\n", [i(Val4)], !IO), 
  
	tak_float(3.0,2.0,1.0,Val5),
	io.format("Tak(%.1f,%.1f,%.1f): %.1f\n", [f(3.0), f(2.0), f(1.0), f(Val5)], 
		!IO).

% ------------------------------- %

:- pred ack(int::in, int::in, int::out) is det.

ack(M, N, Val) :-
(
	if M = 0 then 
		Val is N + 1
	else if N = 0 then 
		ack(M - 1, 1, Val)
	else 
		ack(M, N - 1, Val1), ack(M - 1, Val1, Val)
).

% ------------------------------- %

:- func fib(int) = int.

fib(N) = (if N < 2 then 1 else fib(N - 1) + fib(N -2)).	   

% ------------------------------- %

:- func fib_float(float) = float.

fib_float(N) = (if N < 2.0 then 1.0 else fib_float(N - 1.0) + fib_float(N - 2.0)).

% ------------------------------- %

:- pred tak(int::in, int::in, int::in, int::out) is det.

tak(X, Y, Z, Result) :-
(
	if (Y < X,
		tak(X-1, Y, Z, A),
		tak(Y-1, Z, X, B),
		tak(Z-1, X, Y, C),
		tak(A, B, C, R)) 
	then 
		Result = R 
	else 
		Result = Z
).

:- pred tak_float(float::in, float::in, float::in, float::out) is det.

tak_float(X, Y, Z, Result) :-
(
	if (Y < X,
		tak_float(X-1.0, Y, Z, A),
		tak_float(Y-1.0, Z, X, B),
		tak_float(Z-1.0, X, Y, C),
		tak_float(A, B, C, R)) 
	then 
		Result = R
	else 
		Result = Z
).


% ------------------------------- %
