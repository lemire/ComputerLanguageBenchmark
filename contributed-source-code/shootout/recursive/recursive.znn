(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module recursive;
import 
   System.Math as M,
   System.Console as C, 
   BenchmarksGame;

procedure Ack (m, n: integer): integer;
begin
   if m=0 then return n+1; end;
   if n=0 then return Ack(m-1, 1); end;
   return Ack(m-1, Ack(m, n-1));
end Ack;

procedure Fib (n: integer): integer;
begin
   if n<2 then return 1; else return Fib(n-2) + Fib(n-1); end;
end Fib;

procedure Tak (x,y,z: integer) : integer;
begin
   if y<x then return Tak(Tak(x-1,y,z), Tak(y-1,z,x), Tak(z-1,x,y)); 
   else return z; end;	
end Tak;

procedure Fibr (n: real): real;
begin
   if n<2.0 then return 1.0; 
   else return Fibr(n-2.0) + Fibr(n-1.0); end;
end Fibr;

procedure Takr (x,y,z: real) : real;
begin
   if y<x then return 
      Takr( Takr(x-1.0,y,z), Takr(y-1.0,z,x), Takr(z-1.0,x,y) ); 
   else return z; end;	
end Takr;

var
   n: integer; 
begin
   n := BenchmarksGame.argi();
   C.WriteLine("Ack(3,{0}): {1}", n, Ack(3, n));
   C.WriteLine("Fib({0:f1}): {1:f1}", 27.0+n, Fibr(27.0+n));
   dec(n); C.WriteLine("Tak({0},{1},{2}): {3}", 3*n,2*n,n, Tak(3*n,2*n,n)); 

   C.WriteLine("Fib(3): {0}", Fib(3));
   C.WriteLine("Tak(3.0,2.0,1.0): {0:f1}",Takr(3.0,2.0,1.0));
end recursive.
