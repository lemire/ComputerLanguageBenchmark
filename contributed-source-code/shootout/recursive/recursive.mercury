% The Computer Language Benchmarks Game
% http://shootout.alioth.debian.org/
% Contributed by Valentin Kraevskiy
% Should be compiled with: -H
                             
:- module recursive.

:- interface.
:- import_module io.
:- pred main(io::di, io::uo) is det.

:- implementation.
:- import_module int, float, string, list.

main -->
    io.command_line_arguments(Args),	
    {( [NS | _] = Args -> N = det_to_int(NS)
     ; N = 3), 
    M = N - 1, X = 27.0 + float(N)},	
    io.format("Ack(3,%i): %i\n", [i(N), i(ack(3, N))]),
    io.format("Fib(%.1f): %.1f\n", [f(X), f(real_fib(X))]),
    io.format("Tak(%i,%i,%i): %i\n", [i(M * 3), i(M * 2), i(M), i(tak(M * 3, M * 2, M))]),
    io.format("Fib(3): %i\n", [i(fib(3))]),
    io.format("Tak(3.0,2.0,1.0): %.1f\n", [f(real_tak(3.0, 2.0, 1.0))]).

:- func fib(int) = int.
fib(N) = 
    ( N < 2 -> 1
    ; fib(N - 1) + fib(N - 2)
    ).

:- func real_fib(float) = float.
real_fib(N) =
    ( N < 2.0 -> 1.0
    ; real_fib(N - 1.0) + real_fib(N - 2.0)
    ).

:- func ack(int, int) = int.
ack(X, Y) =
    ( X = 0 -> Y + 1
    ; Y = 0 -> ack(X - 1, 1)
    ; ack(X - 1, ack(X, Y - 1))
    ).

:- func tak(int, int, int) = int.
tak(X, Y, Z) =
    ( Y < X -> tak(tak(X - 1, Y, Z),
                   tak(Y - 1, Z, X),
                   tak(Z - 1, X, Y))
    ; Z
    ).

:- func real_tak(float, float, float) = float.
real_tak(X, Y, Z) =
    ( Y < X -> real_tak(real_tak(X - 1.0, Y, Z),
                        real_tak(Y - 1.0, Z, X),
                        real_tak(Z - 1.0, X, Y))
    ; Z
    ).
