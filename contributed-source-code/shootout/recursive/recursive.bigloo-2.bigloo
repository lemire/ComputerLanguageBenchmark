;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/
;;
;; recursive benchmark
;;
;; contributed by Rudolf Olah

(module
 recursive
 (export
  (ack::int x::int y::int)
  (fib::int n::int)
  (fibFP::double n::double)
  (tak::int x::int y::int z::int)
  (takFP::double x::double y::double z::double)
  )
 (main main))

(define (ack x y)
  (cond ((zero? x) (+ y 1))
	((zero? y) (ack (- x 1) 1))
	(else (ack (- x 1) (ack x (- y 1))))))

(define (fib n)
  (if (< n 2)
      1
      (+ (fib (- n 2)) (fib (- n 1)))))

(define (fibFP n)
  (if (< n 2.0)
      1.0
      (+ (fibFP (- n 2.0)) (fibFP (- n 1.0)))))

(define (tak x y z)
  (if (< y x)
      (tak (tak (- x 1) y z)
	   (tak (- y 1) z x)
	   (tak (- z 1) x y))
      z))

(define (takFP x y z)
  (if (< y x)
      (takFP (takFP (- x 1.0) y z)
	     (takFP (- y 1.0) z x)
	     (takFP (- z 1.0) x y))
      z))

(define (main args)
  (let ((n (string->integer (cadr args))))
    (print "Ack(3," (+ n 1) "): " (ack 3 (+ n 1)))
    (print "Fib(" (+ n 28.0) "): " (fibFP (+ n 28.0)))
    (print "Tak(" (* 3 n) "," (* 2 n) "," n "): " (tak (* 3 n) (* 2 n) n))
    (print "Fib(3): " (fib 3))
    (print "Tak(3.0,2.0,1.0): " (takFP 3.0 2.0 1.0))
    ))