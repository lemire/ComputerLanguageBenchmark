/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

   converted to D by Bob W
   modified to use IFTI by Dave Fladebo

   compile: dmd -O -inline -release recursive2.d
*/

import std.stdio, std.string;

void main(char[][] args)
{
    int n = (args.length > 1 ? atoi(args[1]) : 1) - 1;
    writefln("Ack(3,%d): %d",n + 1,Ack(3,n + 1));
    writefln("Fib(%.1f): %.1f",28.0+n,Fib(28.0+n));
    writefln("Tak(%d,%d,%d): %d",3*n,2*n,n,Tak(3*n,2*n,n));
    writefln("Fib(3): %d",Fib(3));
    writefln("Tak(3.0,2.0,1.0): %.1f",Tak(3.0,2.0,1.0));
}

T Ack(T)(T m, T n)
{
    if(m == 0) return n + 1;
    else if(n == 0) return Ack(m-1, 1);
    return Ack(m-1, Ack(m, n-1));
}

T Fib(T)(T n)
{
    if(n < 2) return 1;
    return Fib(n-2) + Fib(n-1);
}

T Tak(T)(T x, T y, T z)
{
    if(y < x) return Tak(Tak(x-1,y,z), Tak(y-1,z,x), Tak(z-1,x,y));
    else return z;
}
