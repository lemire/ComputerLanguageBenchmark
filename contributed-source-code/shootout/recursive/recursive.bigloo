; The Computer Language Shootout
; http://shootout.alioth.debian.org/
; contributed by Sven Hartrumpf

(module recursive
	(main main)
        (option (set! *genericity* #t))
	(extern (macro printf::int (string double) "printf")
                (macro printff::int (string double double) "printf")
                (macro printi::int (string int) "printf")
                (macro printii::int (string int int) "printf")
                (macro printiiii::int (string int int int int) "printf")))

(define ack (lambda (x y)
  (if (zero? x)
    (+ y 1)
    (if (zero? y)
      (ack (- x 1) 1)
      (ack (- x 1) (ack x (- y 1)))))))

(define ack-d (lambda (x y)
  (if (zero? x)
    (+ y 1.0)
    (if (zero? y)
      (ack-d (- x 1.0) 1.0)
      (ack-d (- x 1.0) (ack-d x (- y 1.0)))))))

(define fib (lambda (n)
  (if (< n 2)
    1
    (+ (fib (- n 2)) (fib (- n 1))))))

(define fib-d (lambda (n)
  (if (< n 2.0)
    1.0
    (+ (fib-d (- n 2.0)) (fib-d (- n 1.0))))))

(define tak (lambda (x y z)
  (if (< y x)
    (tak (tak (- x 1) y z) (tak (- y 1) z x) (tak (- z 1) x y))
    z)))

(define tak-d (lambda (x y z)
  (if (< y x)
    (tak-d (tak-d (- x 1.0) y z) (tak-d (- y 1.0) z x) (tak-d (- z 1.0) x y))
    z)))

(define (main args)
  (let ((n (or (and (= (length args) 2) (- (string->number (cadr args)) 1)) 1)))
    (printii #"Ack(3,%d): %d\n" (+ n 1) (ack 3 (+ n 1)))
    (printff #"Fib(%.1f): %.1f\n" (+ 28.0 n) (fib-d (+ 28.0 n)))
    (printiiii #"Tak(%d,%d,%d): %d\n" (* 3 n) (* 2 n) n (tak (* 3 n) (* 2 n) n))
    (printi #"Fib(3): %d\n" (fib 3))
    (printf #"Tak(3.0,2.0,1.0): %.1f\n" (tak 3.0 2.0 1.0))
    0))
