;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/
;;
;; Derived by Michael D. Adams from the MzScheme variant

(import (rnrs))

;; -------------------------------

(define (ack m n)
  (cond ((zero? m) (+ n 1))
        ((zero? n) (ack (- m 1) 1))
        (else (ack (- m 1) (ack m (- n 1))))))

;; --------------

(define (fib n)
  (cond ((< n 2) 1)
        (else (+ (fib (- n 2)) (fib (- n 1))))))

;; TODO: optimize on ikarus, it's allocing around 400MB but the GC is fast
;; TODO: is the main problem that floats are always boxed in Ikarus?
(define (fibflt n)
  (cond ((< n 2.0) 1.0)
        (else (fl+ (fibflt (fl- n 2.0)) (fibflt (fl- n 1.0))))))

;; --------------

(define (tak x y z)
  (cond ((not (< y x)) z)
        (else (tak (tak (- x 1) y z) (tak (- y 1) z x) (tak (- z 1) x y)))))

(define (takflt x y z)
  (cond ((not (< y x)) z)
        (else (takflt (takflt (fl- x 1.0) y z) (takflt (fl- y 1.0) z x) (takflt (fl- z 1.0) x y)))))

;; -------------------------------

;;; Stupid boiler-plate for formatting floating point values
(define (roundto digits n)
  (let* ([e (expt 10 digits)]
         [num (round (abs (* e (exact n))))]
         [str (number->string (mod num e))])
    (string-append
     (if (negative? n) "-" "")
     (number->string (div num e))
     "."
     (make-string (- digits (string-length str)) #\0)
     str)))

(define (main args)
  (let ((n (string->number (cadr args))))

    (display "Ack(3,") (display n) (display "): ") (display (ack 3 n)) (newline)

    (display "Fib(") (display (roundto 1 (+ 27.0 n))) (display "): ")
    (display (roundto 1 (fibflt (+ 27.0 n)))) (newline)

    (set! n (- n 1))

    (display "Tak(") (display (* n 3))
    (display ",") (display (* n 2))
    (display ",") (display n) (display "): ")
    (display (tak (* n 3) (* n 2) n)) (newline)

    (display "Fib(3): ") (display (fib 3)) (newline)

    (display "Tak(3.0,2.0,1.0): ") (display (roundto 1 (takflt 3.0 2.0 1.0)))
    (newline)))

;; -------------------------------

(main (command-line))
