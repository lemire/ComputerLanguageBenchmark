;;; The Computer Language Benchmarks Game
;;; http://shootout.alioth.debian.org/
;;;
;;; contributed by Anthony Borla

(require-extension format)

(define (ack m n)
  (cond ((fx= m 0) (fx+ n 1))
        ((fx= n 0) (ack (fx- m 1) 1))
        (else (ack (fx- m 1) (ack m (fx- n 1))))))

(define (fib n)
  (cond ((fx< n 2) 1)
	(else (fx+ (fib (fx- n 2)) (fib (fx- n 1))))))

(define (fibflt n)
  (cond ((fp< n 2.0) 1.0)
	(else (fp+ (fibflt (fp- n 2.0)) (fibflt (fp- n 1.0))))))

(define (tak x y z)
  (cond ((not (fx< y x)) z)
        (else (tak (tak (fx- x 1) y z) (tak (fx- y 1) z x) (tak (fx- z 1) x y)))))

(define (takflt x y z)
  (cond ((not (fp< y x)) z)
        (else (takflt (takflt (fp- x 1.0) y z) (takflt (fp- y 1.0) z x) (takflt (fp- z 1.0) x y)))))

(define (main args)
  (let* ((n (if (null? args)
              1
              (string->number (car args))))
         (nfp (exact->inexact n)))

    (format #t "Ack(3,~d): ~d~%" n (ack 3 n))

    (format #t "Fib(~1F): ~,1F~%" (fp+ 27.0 nfp) (fibflt (fp+ 27.0 nfp)))

    (set! n (sub1 n))
    (format #t "Tak(~d,~d,~d): ~d~%" (fx* n 3) (fx* n 2) n (tak (fx* n 3) (fx* n 2) n))

    (format #t "Fib(3): ~d~%" (fib 3))
    (format #t "Tak(3.0,2.0,1.0): ~,1F~%" (takflt 3.0 2.0 1.0))))

(main (command-line-arguments))

