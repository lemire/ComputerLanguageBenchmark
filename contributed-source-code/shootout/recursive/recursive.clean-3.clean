/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy (Clean novice) */
  
module recursive
import StdEnv, LanguageShootout

Start = 
   line  "Ack"  [3,n]          (ack 3 n)           toString         +++
   line  "Fib"  [a]            (fib a)             (toStringWith 1) +++
   line  "Tak"  [3*m,2*m,m]    (tak (3*m)(2*m) m)  toString         +++
   line  "Fib"  [3]            (fib 3)             toString         +++
   line  "Tak"  [3.0,2.0,1.0]  (tak 3.0 2.0 1.0)   (toStringWith 1)  

   where 
   n = argi
   m = n-1
   a = 27.0 + toReal n
   
   line pre a r f = pre +++ "(" +++ csv f a "" +++ "): " +++ f r +++ "\n"           
   csv f [a] s = s +++ f a
   csv f [a:b] s = s +++ f a +++ "," +++ csv f b s 


ack m n
   | m == 0    = n + 1
   | n == 0    = ack (m - 1) 1   
   | otherwise = ack (m - 1) (ack m (n - 1))

fib :: a -> a | + a & - a & one a & < a
fib n
   | n < two   = one
   | otherwise = fib(n-one) + fib(n-two) 
   where two = one+one
   
tak x y z
   | y < x     = tak (tak (x-one) y z)(tak (y-one) z x)(tak (z-one) x y)
   | otherwise = z
