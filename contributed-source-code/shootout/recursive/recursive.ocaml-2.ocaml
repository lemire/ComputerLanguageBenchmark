(* recursive.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Christophe TROESTLER
 *)

let rec ack x y =
  if x = 0 then y + 1
  else if y = 0 then ack (x-1) 1
  else ack (x-1) (ack x (y-1))

let rec fib n = if n < 2 then 1 else fib(n-2) + fib(n-1)

let rec fib_fp n =
 if n = 0. || n = 1. then 1. else fib_fp(n -. 2.) +. fib_fp(n -. 1.)

let rec tak x y z =
  if y < x then tak (tak (x-1) y z) (tak (y-1) z x) (tak (z-1) x y) else z

let rec tak_fp x y z =
  if y >= x then z else
    tak_fp (tak_fp (x -. 1.) y z) (tak_fp (y -. 1.) z x) (tak_fp (z -. 1.) x y)


let () =
  let n = int_of_string(Array.get Sys.argv 1) - 1 in
  Printf.printf "Ack(3,%d): %d\n" (n+1) (ack 3 (n+1));
  Printf.printf "Fib(%.1f): %.1f\n" (28. +. float n) (fib_fp (28. +. float n));
  Printf.printf "Tak(%d,%d,%d): %d\n" (3*n) (2*n) n (tak (3*n) (2*n) n);
  Printf.printf "Fib(3): %d\n" (fib 3);
  Printf.printf "Tak(3.0,2.0,1.0): %.1f\n" (tak_fp 3.0 2.0 1.0)
