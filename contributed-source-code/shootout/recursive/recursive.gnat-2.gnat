-----------------------------------------------------------------------
-- The Computer Language Benchmarks Game
-- http://shootout.alioth.debian.org
-- contributed by Jim Rogers and Gautier de Montmollin
-----------------------------------------------------------------------

with Ada.Text_Io; use Ada.Text_Io;
with Ada.Command_Line; use Ada.Command_Line;

procedure Recursive is
   type Real is digits 15;
   package Real_Io is new Ada.Text_Io.Float_Io(Real);
   use Real_Io;
   package Int_Io is new Ada.Text_Io.Integer_Io(Long_Integer);
   use Int_Io;

   N : Long_Integer;

   function Ack (M, N : Long_Integer) return Long_Integer is
   begin
      if M = 0 then
         return N + 1;
      end if;
      if N = 0 then
         return Ack(M - 1, 1);
      end if;
      return Ack(M - 1, Ack(M, N - 1));
   end Ack;
   function Fib(N : Long_Integer) return Long_Integer is
   begin
      if N < 2 then
         return 1;
      else
         return Fib(N - 2) + Fib(N - 1);
      end if;
   end Fib;
   function Tak(X, Y, Z : Long_Integer) return Long_Integer is
   begin
      if Y < X then
         return Tak(Tak(X -1, Y, Z), Tak(Y-1, Z, X), Tak(Z - 1, X, Y));
      else
         return Z;
      end if;
   end Tak;
   function Fib(N : Real) return Real is
   begin
      if N < 2.0 then
         return 1.0;
      else
         return Fib(N - 2.0) + Fib(N - 1.0);
      end if;
   end Fib;
   function Tak(X, Y, Z : Real) return Real is
   begin
      if Y < X then
         return Tak(Tak(X - 1.0, Y, X), Tak(Y - 1.0, Z, X), Tak(Z - 1.0, X, Y));
      else
         return Z;
      end if;
   end Tak;

begin
   N := Long_Integer'Value(Argument(1));

   Put("Ack(3,"); Put(Item => N, Width => 1); Put("): ");
   Put(Item => Ack(3, N), Width => 1); New_Line;

   Put("Fib("); Put(Item => Real(N)+27.0, Fore => 1, Aft => 1, Exp => 0);
   Put("): "); Put(Item => Fib(Real(N) + 27.0), Fore => 1, Aft => 1, Exp => 0);
   New_Line;

   N := N - 1;
   Put("Tak("); Put(Item => N*3, Width => 1); Put(",");
   Put(Item => N*2, Width => 1); Put(","); Put(Item => N, Width => 1);
   Put("): "); Put(Item => Tak(N*3, N*2, N), Width => 1); New_Line;

   Put("Fib(3): "); Put(Item => Fib(3), Width => 0); New_Line;
   Put("Tak(3.0,2.0,1.0): "); Put(Item => Tak(3.0,2.0,1.0), Aft => 1, Exp => 0, Fore => 1);
   New_Line;

end Recursive;
