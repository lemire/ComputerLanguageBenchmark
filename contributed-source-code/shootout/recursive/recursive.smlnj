(* 
   The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Anthony Borla
*)

structure Test : sig
  val main : (string * string list) -> OS.Process.status
end = struct

  fun ack (0, y) = y + 1 
    | ack (x, 0) = ack (x - 1, 1)
    | ack (x, y) = ack (x - 1, (ack (x, y - 1)))

  fun fib (n : int) : int =
    if n < 2 then
      1
    else
      fib (n - 2) + fib (n - 1)

  fun fibf (n : real) : real =
    if n < 2.0 then
      1.0
    else
      fibf (n - 2.0) + fibf (n - 1.0)

  fun tak (x : int, y : int, z : int) : int =
    if y < x then
      tak (tak (x - 1, y, z), tak (y - 1, z, x), tak (z - 1, x, y))
    else
      z

  fun takf (x : real, y : real, z : real) : real =
    if y < x then
      takf (takf (x - 1.0, y, z), takf (y - 1.0, z, x), takf (z - 1.0, x, y))
    else
      z

  fun main' n =
    let
      val ak = ack (3, n)

      val f27 = 27.0 + (Real.fromInt n)
      val fb = fibf(27.0 + (Real.fromInt n))

      val n1 = n - 1

      val t2 = n1 * 2
      val t3 = n1 * 3
      val tk = tak(n1 * 3, n1 * 2, n1)

      val fb3 = fib(3)

      val tk3 = takf(3.0, 2.0, 1.0)

      open Format
    in
      formatf "Ack(3,%d): %d\n\
              \Fib(%.1f): %.1f\n\
              \Tak(%d,%d,%d): %d\n\
              \Fib(3): %d\n\
              \Tak(3.0,2.0,1.0): %.1f\n"

      print [INT n, INT ak,
             REAL f27, REAL fb,
             INT t3, INT t2, INT n1, INT tk,
             INT fb3,
             REAL tk3];

      OS.Process.success
    end

  fun main (_, []) = main' 1
    | main (_, arg :: _) = main' (getOpt (Int.fromString arg, 1))

end

