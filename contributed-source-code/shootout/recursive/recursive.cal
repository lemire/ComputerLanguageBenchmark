/** 
 * The Computer Language Benchmarks Game 
 * Based on the CAL Open Quark version
 * Contributed by Magnus Byne.
 */
module Recursive;

import Cal.Core.Prelude using
    typeConstructor = Double, Int, String;
    function = eager, fromInt, seq, stringToInt;
    ;

import Cal.Core.Debug using
    function = show;
    ;

import Cal.Collections.List using
    function = head;
    ;

import Cal.Utilities.MessageFormat using
    function = formatWithPattern;
    ;

import Cal.Utilities.Locale using
    function = invariantLocale;
    ;

import Cal.IO.Console using
    function = printLine;
    ;

main :: [String] -> ();
public main !args =
    let
        n = eager $ stringToInt (head args);
        m = n - 1;
        f = n + 27;
    in
        printLine ("Ack(3," ++ show n ++ "): " ++ show (ack 3 n))
        `seq`
        printLine
            (formatWithPattern
                "Fib({0,number,#.0}): {1,number,#.0}"
                invariantLocale
                (f, fibDouble (fromInt f))
            )
        `seq`
        printLine
            (formatWithPattern
                "Tak({0},{1},{2}): {3}"
                invariantLocale
                (m * 3, m * 2, m, tak (m * 3) (m * 2) m)
            )
        `seq`
        printLine ("Fib(3): " ++ show (fib 3))
        `seq`
        printLine
            ("Tak(3.0,2.0,1.0): " ++ show (takDouble 3.0 2.0 1.0))
    ;

fib :: Int -> Int;
fib !n =
    if n < 2 then
        1
    else
        fib (n - 2) + fib (n - 1)
    ;

fibDouble :: Double -> Double;
fibDouble !n =
    if n < 2 then
        1
    else
        fibDouble (n - 2) + fibDouble (n - 1)
    ;

ack :: Int -> Int -> Int;
ack !x !y =
    if x == 0 then
        y + 1
    else if y == 0 then
        ack (x - 1) 1
    else
        ack (x - 1) (eager $ ack x (y - 1))
    ;

tak :: Int -> Int -> Int -> Int;
tak !x !y !z =
    if y >= x then
        z
    else
        tak
            (eager $ tak (x - 1) y z)
            (eager $ tak (y - 1) z x)
            (eager $ tak (z - 1) x y)
    ;

takDouble :: Double -> Double -> Double -> Double;
takDouble !x !y !z =
    if y >= x then
        z
    else
        takDouble
            (eager $ takDouble (x - 1) y z)
            (eager $ takDouble (y - 1) z x)
            (eager $ takDouble (z - 1) x y)
    ;

