! The Computer Language Shootout
!   http://shootout.alioth.debian.org/
!
!   contributed by Steve Decker
!
! compilation:
!   g95 -O3 -fomit-frame-pointer -ffast-math recursive.f90
!   gfortran -O2 -fomit-frame-pointer -ffast-math recursive.f90
!   ifort -O3 -ip -static recursive.f90

module recursives
  implicit none

  integer, parameter :: dp = selected_real_kind(10)

contains

  integer recursive function ack(x, y) result (a)
    integer, intent(in) :: x, y

    if (x == 0) then
       a = y + 1
    else if (y == 0) then
       a = ack(x-1, 1)
    else
       a = ack(x-1, ack(x, y-1))
    end if
  end function ack

  integer recursive function fibI(n) result (f)
    integer, intent(in) :: n

    if (n < 2) then
       f = 1
    else
       f = fibI(n-2) + fibI(n-1)
    end if
  end function fibI

  real(dp) recursive function fibR(n) result (f)
    real(dp), intent(in) :: n

    if (n < 2) then
       f = 1
    else
       f = fibR(n-2) + fibR(n-1)
    end if
  end function fibR

  integer recursive function takI(x, y, z) result (t)
    integer, intent(in) :: x, y, z
    
    if (y < x) then
       t = takI(takI(x-1, y, z), takI(y-1, z, x), takI(z-1, x, y))
    else
       t = z
    end if
  end function takI

  real(dp) recursive function takR(x, y, z) result (t)
    real(dp), intent(in) :: x, y, z

    if (y < x) then
       t = takR(takR(x-1, y, z), takR(y-1, z, x), takR(z-1, x, y))
    else
       t = z
    end if
  end function takR
end module recursives

program recurs
  use recursives
  implicit none

  real(dp)               :: fr
  integer,  dimension(3) :: ti
  integer                :: n
  character(len=2)       :: argv

  call get_command_argument(1, argv)
  read (argv, "(i2)") n
  
  fr = n + 27
  ti = (/ 3, 2, 1 /) * (n-1)

  write(*, "(2(a,i0))") "Ack(3,", n, "): ", ack(3, n)
  write(*, "(2(a,f0.1))") "Fib(", fr, "): ", fibR(fr)
  write(*, "(4(a,i0))") "Tak(", ti(1), ",", ti(2), ",", ti(3), "): ", takI(ti(1), ti(2), ti(3))
  write(*, "(a,i0)") "Fib(3): ", fibI(3)
  write(*, "(a,f0.1)") "Tak(3.0,2.0,1.0): ", takR(3d0, 2d0, 1d0)
end program recurs
