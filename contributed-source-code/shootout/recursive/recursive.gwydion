module:    recursive
author:    Anthony Borla
synopsis:  recursive benchmark
           The Great Computer Language Shootout
           http://shootout.alioth.debian.org/
           Based on several existing Shootout submissions
copyright: public domain
use-libraries: common-dylan, io
use-modules: common-dylan, format-out

// --------------------------------

define method ack(x :: <integer>, y :: <integer>) => (<integer>);
  if (x == 0)
    y + 1;
  elseif (y == 0)
    ack(x - 1, 1);
  else
    ack(x - 1, ack(x, y - 1));
  end if;
end method ack;

// --------------

define method fib(n :: <integer>) => (<integer>); 
  if (n < 2)
    1;
  else
    fib(n - 2) + fib(n - 1);
  end if;
end method fib;

define method fib(n :: <double-float>) => (<double-float>); 
  if (n < 2.0d0)
    1.0d0;
  else
    fib(n - 2.0d0) + fib(n - 1.0d0);
  end if;
end method fib;

// --------------

define method tak(x :: <integer>, y :: <integer>, z :: <integer>) => (<integer>);
  if (y < x)
    tak(tak(x - 1, y, z), tak(y - 1, z, x), tak(z - 1, x, y));
  else
    z;
  end if;
end method tak;

define method tak(x :: <double-float>, y :: <double-float>, z :: <double-float>) => (<double-float>);
  if (y < x)
    tak(tak(x - 1.0d0, y, z), tak(y - 1.0d0, z, x), tak(z - 1.0d0, x, y));
  else
    z;
  end if;
end method tak;

// --------------

define function main() => ();
  let n = application-arguments()[0].string-to-integer;

  format-out("Ack(3,%d): %d\n", n, ack(3, n));
  format-out("Fib(%.1f): %.1f\n", 27.0d0 + n, fib(27.0d0 + n));

  n := n - 1;
  format-out("Tak(%d,%d,%d): %d\n", n * 3, n * 2, n, tak(n * 3, n * 2, n));

  format-out("Fib(3): %d\n", fib(3));
  format-out("Tak(3.0,2.0,1.0): %.1f\n", tak(3.0d0, 2.0d0, 1.0d0));
end function main;

// --------------------------------

main();

