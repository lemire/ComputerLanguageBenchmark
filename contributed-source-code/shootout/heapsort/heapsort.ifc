! -*- mode: f90 -*-
!
! $Id$ ; $Name$
!
! heapsort function implementation
! Simon Geard, 3/12/04
!
! Building info.
! ==============
!
! Linux  - using the Intel Fortran90 compiler:
!
!          ifort matrix.f90 -O3 -static-libcxa -o matrix
!
program heapSort
  implicit none
  integer, parameter :: IM = 139968
  integer, parameter :: IA = 3877
  integer, parameter :: IC = 29573
  integer, parameter :: msize = 30
  real*8, dimension(:), allocatable :: ary
  integer :: i, k, num
  character(len=8) argv
  intrinsic matmul

  call getarg(1,argv)
  read(argv,*) num
  if (num == 0) num = 1


  ! create an array of N random doubles
  allocate(ary(num))
  ary = (/(getRandom(1.0d0),i=1,num)/)

  ! heap sort
  call hsort(num, ary)

  write(*,'(f12.10)') ary(num)

  deallocate(ary)

contains
  real*8 function getRandom(mval)
    real*8, intent(in) :: mval
    integer, save :: last = 42
    last = mod(last * IA + IC , IM)
    getRandom = mval * last / IM 
  end function getRandom

  subroutine hsort(n, ra)
    integer, intent(in) :: n
    real*8, dimension(:), intent(inout) :: ra
    integer :: i, j, ir, l
    real*8 rra
    intrinsic ishft

    l = ishft(n,-1)
    ir = n
    do
       if (l > 1) then
          l = l-1
          rra = ra(l)
       else
          rra = ra(ir)
          ra(ir) = ra(1)
          ir = ir-1
          if (ir == 1) then
             ra(1) = rra
             return
          end if
       end if
       i = l
       j = ishft(l,1)
       do
          if (j > ir) exit
          if (j < ir .and. ra(j) < ra(j+1)) then
             j = j+1
          end if
          if (rra < ra(j)) then
             ra(i) = ra(j)
             i = j
             j = j+i
          else
             j = ir + 1
          end if
       end do
       ra(i) = rra
 end do

end subroutine hsort

end program heapSort
