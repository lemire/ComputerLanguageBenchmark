#!/usr/bin/newlisp

# heapsort - benchmark
#
# note, that newLISP has fast built-in sort and random algorithms
# not used in this - same way - benchmark
#

(set 'IM 139968)
(set 'IA 3877)
(set 'IC 29573)

(set 'LAST 42)

(define (gen_random maximum)
	(set 'LAST (mod (add (mul LAST IA) IC) IM))
	(div (mul maximum LAST) IM))

(define (heapsort n ra)
	(set 'rra 0 'i 0 'j 0)
	(set 'l (+ (>> n 1) 1))
	(set 'ir n)

	(while (not done)
		(if (> l 1) 
			(begin
				(dec 'l)
				(set 'rra (nth l ra)))
			(begin
				(set 'rra (nth ir ra))
				(nth-set ir ra (nth 1 ra))
				(dec 'ir)
				(if (= ir 1)
					(begin
						(nth-set 1 ra rra)
						(set 'done true)
						; return
						ra))))
		(set 'i l)
		(set 'j (<< l 1))
		(if (not done) (begin 
			(while (<= j ir)
				(if (and (< j ir) (< (nth j ra) (nth (+ j 1) ra)))
					(inc ' j))
				(if (< rra (nth j ra))
					(begin
						(nth-set i ra (nth j ra))
						(set 'i j)
						(inc 'j i))
					(set 'j (+ ir 1))))
			(nth-set i ra rra))
		) ra))

(define (main)
	(set 'N (integer (last (main-args))))

	(set 'ary (array (+ N 1)))

	(for (i 1 N) (nth-set i ary (gen_random 1.0)))

	(set 'ary (heapsort N ary))

	(println (format "%.10f" (nth N ary)))
)

(main)
(exit)

;; eof

			
		
			
			
