-- $Id$
-- http://www.bagley.org/~doug/shootout/
-- from Julian Assange, improved by Karl-Filip Faxen

module Main(main) where
import System(getArgs, exitWith, ExitCode(..))
import Numeric(showFFloat)

main = do
         arg <- getArgs
	 case arg of
              [num] -> putStrLn (showFFloat (Just 10) answer "")
	               where
		             answer = last . heapsort .
                                      take (read num) . random $ 1.0
	      _     -> exitWith (ExitFailure 1)

-- construct an infinite list of random numbers
random :: Double -> [Double]
random max = map norm . rand $ 42
           where norm x = (fromIntegral x) * (max / (fromIntegral im))
                 rand x = (x' : (rand x'))
	            where x' = (x * ia + ic) `mod` im
	         im     = 139968
                 ia     = 3877
                 ic     = 29573 :: Int

-- fold up a list like a tree
treefold f z []      = z
treefold f z [x]     = x
treefold f z (a:b:l) = w `seq` treefold f z (w : pairfold l)
                 where pairfold (x:y:rest) = v `seq` v : pairfold rest
                           where v = f x y
	               pairfold l          = l
                       w = f a b

-- heapfold using linked lists
data Heap a = Nil | Node !a !(Heap a) !(Heap a)
heapsort :: Ord a => [a] -> [a]
heapsort = flatten_heap . merge_heaps . map heapify

    where heapify x   = Node x Nil Nil

	  merge_heaps :: Ord a => [Heap a] -> Heap a
          merge_heaps = treefold merge_heap Nil

          flatten_heap Nil            = []
          flatten_heap (Node x h1 h2) = x:flatten_heap (merge_heap h1 h2)

          merge_heap Nil                     heap = heap
          merge_heap heap@(Node _ _ _)        Nil = heap
          merge_heap node_a@(Node l l1 l2) node_b@(Node r r1 r2)
                     | l < r     = Node l (merge_heap l1 l2) node_b
                     | otherwise = Node r node_a (merge_heap r1 r2)
