<html>
<body>
<h4>About the heapsort</h4>
<pre>
 It is an in-place sort.  That is, it sorts a single array, and does
 not need to create a separate array to hold partial solutions.

 It can be proven that the heapsort is an N log<sub>2</sub> N process,
 not only on the average, but also in the worst case.


There are many other references available that can explain the heapsort
better than I can, but I will try to put some of them together for you
and if you still have questions I'll see if I can answer them.

The basic idea of the heapsort is to take the data to be sorted and
arrange it into a "semi-sorted" structure called a "heap", and from
the heap, you can then easily remove each element in sorted order.

- A binary tree consists of nodes, each node can have a left and right
  child node.  Example:

      1
     / \
    2   3

- A heap can be visualized as a binary tree structure, but it can also
  be represented as an array, such that when the nodes are numbered in
  row order, the children of a node (i) are node (2i) and node (2i+1),
  and that conversely, the parent of a node (i) is node (i DIV 2). So
  while heapsort algorithms may be illustrated using tree structures,
  they can be easily implemented using an array.

  (It should now be apparent why, in those languages that count arrays
  from index 0, we start our data at array index 1. It is to make the
  calculation of the parent/child relationship easier.)

- A "heap" is defined as a binary tree with the property that the
  value of any node must be greater than the value of either child of
  the node.

Now we will take the above principles and apply them to a small example.

Let's say we have an unsorted binary tree, which looks like this:

             8
           /   \
          5     4
         / \   / \
        9  3  7   6

As an array it looks like this:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  8  5  4  9  3  7  6 |
  ------------------------------

The first phase of the sort is to rearrange the array into a heap so
that the heap property applies (each parent is greater than either of
its children).  So what we will do, is find those places where a child
is greater than its parent (a violation of the heap property), and
"sift" that value up the heap.

Looking at the array, we see that the first value 8, is okay in
relation to its two children (5 and 4) because it has a greater
value. As we examine the array going from each index to the next
greater index, we come to index 4, which has a value of 9.

When we encounter a value that is out of "heap-order" like this, we
must sift it up the heap to its proper position.  This is accomplished
by swapping it with its parent, and then continuing to swap it upwards
until we find a greater value or it reaches index 1.

So we see that we must swap values 9 and 5, and then 8 and 9, giving:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  9  8  4  5  3  7  6 |
  ------------------------------

Now the value of 5 at index 4 is less than its parent (the value of 8
at index 2), so we are okay, and we proceed to the next number at
index 5. We find that is value 3, and satisfies the heap property.

At index 6, we find the value 7, and its parent is index 3 with a
value of 4. So we must sift the 7 upwards by swapping the contents of
the array at indexes 3 and 6:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  9  8  7  5  3  4  6 |
  ------------------------------

Finally, we examine the value at index 7, which is 6, and its parent
is index 3, with a value of 7, so we have completed putting our array
in heap order.

But the data is not completely sorted yet, we must now do the second
phase of the heapsort which is to extract the data in sorted order.

The second phase works like this: remove the root value, as that is
the largest value, and "promote" the largest valued subtree, then
repeat. This looks quite simple when illustrated using a binary tree,
but for this example, we will do it in-place in the array we already
have. As we "sort" the numbers out of the heap, we'll put the highest
valued numbers at the end of the array, and the lowest valued numbers
at the beginning.

To start off, we take the highest value 9, and swap it with the last
value in the array:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  6  8  7  5  3  4  9 |
  ------------------------------

9 is now in its proper position (the last item in the sorted array)
but the number now at the top of the heap, 6, is not in its proper
place. It needs to be "sifted down" to where it belongs. 

The sifting down process works by comparing the value with the larger
of its children. If the element is smaller than the larger child then
it is swapped with that child. This continues until the element is
moved to a leaf or until it is larger than both of its children.

So after sifting the value 6 down, we have:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  8  6  7  5  3  4  9 |
  ------------------------------

Now we have sorted exactly one item so position 7 in the array is a
list of sorted items and positions 1 through 6 are the items remaining
in the heap yet to be placed into the sorted list. As each successive
item in the heap is placed into the sorted output list, the sorted
list will expand from the largest (rightmost) index toward 1 as the
heap decreases in size toward 1.

We swap values 4 and 8, then sift the 4 down:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  7  6  4  5  3  8  9 |
  ------------------------------

We swap values 3 and 7, then sift the 3 down:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  6  5  4  3  7  8  9 |
  ------------------------------

We swap values 3 and 6, then sift the 3 down:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  5  3  4  6  7  8  9 |
  ------------------------------

We swap values 4 and 5, then sift the 4 down:

  ------------------------------
  | Index  1  2  3  4  5  6  7 |
  ------------------------------
  | Value  3  4  5  6  7  8  9 |
  ------------------------------

And now the array is sorted.


That's the basic idea of how the heapsort works using an in-place
array, and that's basically what is going on in the heapsort programs
in my shootout. I hope that explanation helps a little.

</pre>
</body>
</html>
