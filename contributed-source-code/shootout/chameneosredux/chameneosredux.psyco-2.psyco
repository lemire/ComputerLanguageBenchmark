# The Computer Language Benchmarks Game
# http://shootout.alioth.debian.org/
# Contributed by Daniel Nanz 2008-04-10
# Adapted to Psyco by bearophile, 2008-07-20

import sys, thread, time

# colors and matching
creature_colors = ['blue', 'red', 'yellow']

def complement(c1, c2):
    if c1 == c2:
        return c1
    elif c1 == 'blue':
        if c2 == 'red':
            return 'yellow'
        return 'red'
    elif c1 == 'red':
        if c2 == 'blue':
            return 'yellow'
        return 'blue'
    elif c2 == 'blue':
        return 'red'
    return 'blue'


def check_complement():
    for c1 in creature_colors:
        for c2 in creature_colors:
            print '%s + %s -> %s' % (c1, c2, complement(c1, c2))
    print ''


# reporting
def spellout(n):
    numbers = ['zero', 'one', 'two', 'three', 'four',
               'five', 'six', 'seven', 'eight', 'nine']
    return ' ' + ' '.join(numbers[int(c)] for c in str(n))


def report(input_zoo, met, self_met):
    print ' ' + ' '.join(input_zoo)
    for m, sm in zip(met, self_met):
        print str(m) + spellout(sm)
    print spellout(sum(met)) + '\n'


# the zoo
def creature(my_id, venue, my_lock_acquire, in_lock_acquire, out_lock_release):
    while True:
        my_lock_acquire()  # only proceed if not already at meeting place
        in_lock_acquire()  # only proceed when holding in_lock
        venue[0] = my_id   # register at meeting place
        out_lock_release() # signal "registration ok"


def let_them_meet(meetings_left, input_zoo):
    # prepare
    c_no = len(input_zoo)
    venue = [-1]
    met = [0] * c_no
    self_met = [0] * c_no
    colors = input_zoo[:]

    in_lock = thread.allocate_lock()
    in_lock.acquire()
    out_lock = thread.allocate_lock()
    out_lock.acquire()
    locks = [thread.allocate_lock() for c in input_zoo]

    # let creatures wild
    for ci in xrange(c_no):
        args = (ci, venue, locks[ci].acquire, in_lock.acquire, out_lock.release)
        new = thread.start_new_thread(creature, args)
    time.sleep(1.0) # to reduce work-load imbalance

    in_lock.release()  # signal "meeting_place open for registration"
    out_lock.acquire() # only proceed with a "registration ok" signal
    id1 = venue[0]
    while meetings_left:
        in_lock.release()
        out_lock.acquire()
        id2 = venue[0]
        if id1 != id2:
            new_color = complement(colors[id1], colors[id2])
            colors[id1] = new_color
            colors[id2] = new_color
            met[id1] += 1
            met[id2] += 1
        else:
            self_met[id1] += 1
            met[id1] += 1
        meetings_left -= 1
        if meetings_left > 0:
            locks[id1].release() # signal "you were kicked from meeting place"
            id1 = id2
        else:
            report(input_zoo, met, self_met)


def chameneosiate(n):
    check_complement()
    let_them_meet(n, ['blue', 'red', 'yellow'])
    let_them_meet(n, ['blue', 'red', 'yellow', 'red', 'yellow',
                      'blue', 'red', 'yellow', 'red', 'blue'])


import psyco; psyco.full()
chameneosiate(1000 if len(sys.argv) < 2 else int(sys.argv[1]))
