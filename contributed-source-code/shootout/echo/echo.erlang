%%%  The Great Computer Language Shootout 
%%%  http://shootout.alioth.debian.org/
%%% 
%%%  contributed by Sebastian Strollo 
%%%  modified by Bengt Kleberg
%%%  modified by Isaac Gouy

-module(echo).
-export([main/0, main/1]).

-define(DATA, <<"Hello there sailor\n">>).

main() -> main(["1"]).
main([Arg]) ->
   N = list_to_integer(Arg),
   {ok, ServerSock} = gen_tcp:listen(0, [binary]),
   {ok, Port} = inet:port(ServerSock),
   erlang:spawn( fun() -> client( N, Port ) end ),
   server(ServerSock),
   gen_tcp:close(ServerSock),
   init:stop().

client(N, ServerPort) ->
   {ok, Sock} = gen_tcp:connect("localhost", ServerPort, [binary]),
   client_loop(N, Sock),
   gen_tcp:close(Sock).

client_loop(0, _Sock) -> ok;
client_loop(N, Sock) ->
   ok = gen_tcp:send(Sock, ?DATA),
   receive
      {tcp, Sock, ?DATA} -> client_loop(N-1, Sock);
      {tcp_closed, Sock} -> ok
   end.

server(LSock) ->
   {ok, Sock} = gen_tcp:accept(LSock),
   server_loop(Sock, 0),
   gen_tcp:close(Sock).

server_loop(Sock, Bytes) ->
   receive
      {tcp, Sock, Packet} ->
         ok = gen_tcp:send(Sock, Packet),
         server_loop(Sock, Bytes + erlang:size(Packet));
      {tcp_closed, Sock} -> io:fwrite("server processed ~w bytes~n", [Bytes])
   end.
