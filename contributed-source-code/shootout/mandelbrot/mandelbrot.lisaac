/* The Computer Language Shootout Benchmarks
   http://shootout.alioth.debian.org/
   contributed by Xavier Oswald & Anthony Pajot
*/

Section Header

  + name := MANDELBROT;
  
Section Inherit
  
  - parent_object : OBJECT := OBJECT;
  
Section Public
   
  - main <-
  ( + w, h, bit_num:INTEGER;
    + iter:INTEGER;
    + byte_acc:INTEGER_8;
    + four:REAL_64;
    + delta0,delta1:REAL_64;
    + mod_w,wm1:INTEGER;
    + cmd:STRING;
    + civ:REAL_64;        
    
    iter := 50;
    four := 4.0;

    cmd := COMMAND_LINE.item 1;
            
    h := w := cmd.to_integer;    

    "P4\n".print;
    cmd.print;
    ' '.print;
    cmd.print;
    '\n'.print;

    mod_w := 8 - (w & 7);
    wm1   := w - 1;

    0.to (h - 1) do { y:INTEGER;
      
      civ := (y * 2).to_real_64 / h - 1.0;
      
      0.to wm1 by 2 do { x:INTEGER;
        + crv0,crv1:REAL_64;        
        + zrv0,zrv1:REAL_64;
        + ziv0,ziv1:REAL_64;
        + trv0,trv1:REAL_64;
        + tiv0,tiv1:REAL_64;
        + i:INTEGER;
        
        crv0 := (x * 2).to_real_64 / w - 1.5;
        crv1 := ((x + 1) * 2).to_real_64 / w - 1.5;
        {
          ziv0 := (zrv0 * ziv0) + (zrv0 * ziv0) + civ;
          ziv1 := (zrv1 * ziv1) + (zrv1 * ziv1) + civ;
          
          zrv0 := trv0 - tiv0 + crv0;
          zrv1 := trv1 - tiv1 + crv1;
          
          trv0 := zrv0 * zrv0;
          trv1 := zrv1 * zrv1;
          
          tiv0 := ziv0 * ziv0;
          tiv1 := ziv1 * ziv1;
          
          delta0 := four - trv0 - tiv0;
          delta1 := four - trv1 - tiv1;
          
          i  := i + 1;	  
        }.do_while {
          (i < iter) && {
            (delta0 >= 0) || {delta1 >= 0}
          }
        };
        byte_acc := byte_acc << 2;                  
        
        (delta0 >= 0).if {
          byte_acc := byte_acc | 02h;        
        };
        (delta1 >= 0).if {
          byte_acc := byte_acc | 01h;
        };	

        bit_num := bit_num + 2;
        (bit_num = 8).if {
          byte_acc.to_character.print; 
          byte_acc := bit_num := 0;
        };        
      };
      (bit_num != 0).if {
        byte_acc := byte_acc << mod_w;
        byte_acc.to_character.print;         
        byte_acc := bit_num := 0;
      };
    };		    
  );
