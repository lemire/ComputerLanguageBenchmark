#!/usr/bin/python -OO
# The Computer Language Shootout Benchmarks
# http://shootout.alioth.debian.org/
#
# contributed by Kevin Carson

from math import sqrt
import sys, psyco

psyco.full()


def main() :
    w = h = int(sys.argv[1])

    fractal = mandelbrot(w, h, 50, 4.0)

    wtail = w % 8
    calc_byte = fractal.calc_byte
    cout = sys.stdout.write

    cout("P4\n%d %d\n" % (w, h))

    if wtail != 0 :
        wtail_offset = (w // 8) * 8
        wtail_shift = 8 - wtail
        
        for y in xrange(h):
            fy = 2j * y / h - 1j

            for x in xrange(0, wtail_offset, 8):
                cout(chr(calc_byte(8, x, fy)))
                
            cout(chr(calc_byte(wtail, wtail_offset, fy) << wtail_shift))

    else :
        for y in xrange(h):
            fy = 2j * y / h - 1j

            for x in xrange(0, w, 8):
                cout(chr(calc_byte(8, x, fy)))


class mandelbrot :
    def __init__(self, w, h, max_iterations, abs_limit) :
        self.w = w
        self.h = h
        self.max_iterations = max_iterations
        self.abs_limit = abs_limit

    def calc_byte(self, bits, x, fy) :
        bit_accumulator = 0
        w = self.w
        abs_limit_sqrt = sqrt(self.abs_limit)
        max_iterations = self.max_iterations

        for k in xrange(x, x + bits) :
            z = 0j
            c = 2.0 * k / w - 1.5  + fy

            bit_accumulator <<= 1

            for i in xrange(max_iterations) :
                z = z * z + c

                # Python can natively handle complex numbers.  As such this
                # would be more reasonably written as "abs(z) >= abs_limit" but
                # here it is implemented "same way".
                if abs(z) >= abs_limit_sqrt :
                    break
            else :
                bit_accumulator |= 1
        return bit_accumulator


main()
