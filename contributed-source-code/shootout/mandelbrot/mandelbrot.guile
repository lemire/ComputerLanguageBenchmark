#!/usr/bin/guile \
-e main -s
!#

;;; The Great Computer Language Shootout
;;; http://shootout.alioth.debian.org/
;;; 
;;; implemented by Greg Buchholz

(define (main args)
  (let ((n (string->number (cadr args))))
    (display "P4") (newline) (display n) (display " ") (display n) 
(newline) 
    (printPBM 0 0 n (points 0 0 n))))

(define (points x y n)
  (if (= y n)
    '()
    (if (= x n)
        (points 0 (+ y 1) n)
        (cons (mandel (make-rectangular (- (* 2 (/ x n)) 1.5) 
                                        (- (* 2 (/ y n)) 1.0)) 0.0+0.0i 50)
              (delay (points (+ x 1) y n))))))

(define (mandel c z iter)
    (if (= iter 0)
        1
        (let ((n (+ (* z z) c)))
             (if (> (magnitude n) 2.0)
                  0
                  (mandel c n (- iter 1))))))

(define (printPBM acc i n stream)
  (cond ((null? stream) (display (acc->char acc i)))
        ((and (= (remainder i 8) 0) (not (= i 0)))
                 (begin (display (integer->char acc)) 
                        (printPBM (car stream) (+ 1 i) n (force (cdr stream)))))
        ((= i n) (begin (display (acc->char acc n))
                        (printPBM 0 0 n stream)))
        (else (printPBM (+ (* 2 acc) (car stream)) (+ 1 i) n (force (cdr stream))))))

(define (pow2 n) (if (> n 0) (* 2 (pow2 (- n 1))) 1))

(define (acc->char acc x)
    (integer->char (* acc (pow2 (remainder x 8)))))