;; The Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Adapted for Gambit-c by Paul Berg
;; Originally contributed by Anthony Borla

(declare (standard-bindings) (block) (not safe) (not interrupts-enabled))

(define +limit-sqr+ 4.0)
(define +iterations+ 50)

(define (mandelbrot iterations x y n)
  (let ((cr (- (/ (* 2.0 x) n) 1.5))
        (ci (- (/ (* 2.0 y) n) 1.0)))
    (let loop ((i 0) (zr 0.0) (zi 0.0))
      (let ((zrq (* zr zr)) (ziq (* zi zi)))
        (cond
         ((> i iterations) 1)
         ((> (+ zrq ziq) +limit-sqr+) 0)
         (else (loop (+ 1 i) (+ (- zrq ziq) cr) (+ (* 2.0 zr zi) ci)))) ))))

(define (main args)
  (let ((n (string->number args))
        (bitnum 0)
        (byteacc 0))

    (display (string-append "P4\n" (number->string n) " " (number->string n) "\n"))

    (let loop-y ((y 0))
      (if (<= y (- n 1))
          (begin
            (let loop-x ((x 0))
              (if (<= x (- n 1))
                  (begin
                    (set! bitnum (+ 1 bitnum))
                    (set! byteacc (+ (* 2 byteacc) (mandelbrot +iterations+ x y n)))

                    (cond
                     ((= bitnum 8)
                      (write-char (integer->char byteacc))
                      (set! bitnum 0)
                      (set! byteacc 0))

                     ((= x (- n 1))
                      (write-char (integer->char (* byteacc (expt 2 (- 8 (modulo n 8))))))
                      (set! bitnum 0)
                      (set! byteacc 0)))

                    (loop-x (+ 1 x)))))

            (loop-y (+ 1 y)))))))



