;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/

;; Derived by Michael D. Adams from the Chicken variant by Anthony Borla


(import (rnrs))

;; -------------------------------
  
(define *limit-sqr* 4.0)

(define *iterations* 50)

;; -------------------------------

(define (mandelbrot x frac2/n ci)
  (let ((cr (fl- (fl* (inexact x) frac2/n) 1.5)))
    (let loop ((i 0) (zr 0.0) (zi 0.0))
      (if (> i *iterations*)
          1
          (let ((zrq (fl* zr zr)) 
                (ziq (fl* zi zi)))
            (cond
             ((fl>? (fl+ zrq ziq) *limit-sqr*) 0)
             (else (loop (fx+ 1 i)
                         (fl+ (fl- zrq ziq) cr)
                         (fl+ (fl* 2.0 zr zi) ci)))))))))

;; -------------------------------

(define (main args)
  (let ((n (string->number (cadr args)))
        (frac2/n (/ 2.0 (string->number (cadr args))))
        (out (standard-output-port)))
    (display "P4") (newline)
    (display n) (display " ") (display n) (newline)
    (let loop-y ((y 0))
      (when (< y n)
            (let ([ci (fl- (fl* (inexact y) frac2/n) 1.0)])
              (let loop-x ((x 0) (bitnum 0) (byteacc 0))
                (if (< x n)
                    (let ([bitnum (fx+ 1 bitnum)]
                          [byteacc (fx+ (fxarithmetic-shift-left byteacc 1) 
                                        (mandelbrot x frac2/n ci))])
                      (cond
                       [(= bitnum 8)
                        (put-u8 out byteacc)
                        (loop-x (fx+ 1 x) 0 0)]
                       [else (loop-x (fx+ 1 x) bitnum byteacc)]))
                    (begin
                      (when (positive? bitnum)
                            (put-u8 out (fxarithmetic-shift-left byteacc (fx- 8 (fxand n #x7)))))
                      (loop-y (fx+ 1 y))))))))
    (flush-output-port out)))

;; -------------------------------

(main (command-line))
