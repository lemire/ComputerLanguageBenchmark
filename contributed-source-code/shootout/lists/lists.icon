# -*- mode: icon -*-
# $Id$
# http://www.bagley.org/~doug/shootout/
# based on code from Cheyenne Wills

#  first create a list (L1) of integers from 1 through SIZE (SIZE is
#  currently defined as 10000).

#  copy L1 to L2 (can use any builtin list copy function, if
#  available)

#  remove each individual item from left side (head) of L2 and append
#  to right side (tail) of L3 (preserving order). (L2 should be
#  emptied by one item at a time as that item is appended to L3).

#  remove each individual item from right side (tail) of L3 and append
#  to right side (tail) of L2 (reversing list). (L3 should be emptied
#  by one item at a time as that item is appended to L2).

#  reverse L1 (preferably in place) (can use any builtin function for
#  this, if available).

#  check that first item of L1 is now == SIZE.

#  and compare L1 and L2 for equality and return length of L1 (which
#  should be equal to SIZE).

procedure main(argv)
    n := argv[1] | 1
    every i := 1 to n do count := test_lists()
    write(count)
end

procedure test_lists(args)
	SIZE := 10000

	L1 := list()
	every put(L1,1 to SIZE)

	L2 := copy(L1)

	L3 := list()
	while put(L3,get(L2))

	while push(L2,pop(L3))

	reverseL(L1)

	if L1[1] ~= SIZE then write("Failed test")
	
	every i := 1 to SIZE do 
		if L1[i] ~= L2[i] then write("L1 ~= L2")
	
	return(*L1)
end

# Reverse a list in place
procedure reverseL(l)
	ender := *l + 1
	middle := integer(*l / 2)
	every i := 1 to middle do 
		l[i] :=: l[ender - i]
end
