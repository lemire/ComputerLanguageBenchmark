-- -*- mode: eiffel -*-
-- $Id$
-- http://www.bagley.org/~doug/shootout/ 
-- from Friedrich Dominicus

class LISTS

insert
	ARGUMENTS
   
creation {ANY}
    make

feature {ANY}
    exc: EXCEPTIONS;
    args: ARGUMENTS;
    l1, l2, l3: DOUBLY_LINKED_LIST[INTEGER];
    size : INTEGER is 10000;
    run_n : INTEGER;

    preamble is
        do
            create exc;
            create args
            if args.argument_count /= 1 then
                io.put_string("exception_test <integer>%N");
                exc.die(1);
            end;
            if args.argument(1).is_integer then
                run_n := argument(1).to_integer;
            else
                io.put_string("Argument wasn't an integer, giving up%N");
                exc.die(1);
            end;
        end

    

    make is
        local
          i : INTEGER;
	  length : INTEGER;
        do
            preamble;
            from i := 1
            until i > run_n
            loop
                length := run_it
                i := i + 1;
            end;
            
            -- io.put_string ("l1 length = ");
            io.put_integer (length);
            io.put_new_line;
        end;

    run_it : INTEGER is
        local
            length : INTEGER;
        do
            create l1.make;
            fill_l1;
            -- copy L1 to L2 (can use any builtin list copy function, if 
            -- available) 
            l2 := clone(l1);
            move_from_front_to_end;
            
            l3 := l1.clone (l1);
            move_from_end_to_end;
            -- reversing using the "official interface of the 
            -- SmallEiffel datastructures"
            --reverse_in_place_naive (l1);
            -- hand crafted version see doubly_linked_list for details
            l1.revert_in_place;
            -- check that first item of L1 is now == SIZE.%
            -- in Eiffel we could write
            -- check l1.fist = size end;
            -- if that does not hold and exception is raised. Well 
            -- just for the record ;-)
            if l1.first = size then
                -- io.put_string("seems to work%N");
            else
                io.put_string("should not happen%N");
            end;
            -- compare L1 and L2 for equality and return length of L1 
            -- which should be equal to SIZE
            length := compare_lists (l1, l2);
            Result := length;
        end;

    fill_l1 is
            -- first create a list (L1) of integers from 1 through SIZE
            -- (SIZE is currently defined as 10000).
        local
            i: INTEGER;
        do
            from i := 1
            until i > size
            loop
                l1.add_last(i);
                i := i + 1;
            end;
        end;

    move_from_front_to_end is
            -- remove each individual item from left side (head) of L2 and 
            -- append to right side (tail) of L3 (preserving order). (L2 should 
            -- be emptied by one item at a time as that item is appended 
            -- to L3).
            -- REMARK: built-in functionality is used which is not 
            -- optimized for speed, e.g the add_last method creates a 
            -- new node each time, this could be optimized by 
            -- handcrafted code (in fact the shootout encourages the 
            -- "implement yourself approach", which makes it biased 
            -- towards hand-tailored implementations.
        do
            from !!l3.make
            until l2.is_empty
            loop
                l3.add_last(l2.first);
                l2.remove_first;
            end;
            check
                l3_adjusted: l3.first = 1 and l3.last = size;
            end; -- check
            debug
                io.put_string("l3 is now %N");
                print (l3);
                io.newline;
            end;
        end
            
    move_from_end_to_end is
            -- remove each individual item from right side (tail) of L3 
            -- and append to right side (tail) of L2 (reversing list). 
            -- (L3  should be emptied by one item at a time as that item 
            --  is appended to L2).
            -- REMARKS: see move_from_font_to_end
        do
            from !!l2.make
            until l3.is_empty
            loop
                l2.add_last(l3.last);
                l3.remove_last;
            end;
            check
                l2_built_properly: l2.first = size and l2.last = 1;
            end;
            debug
                io.put_string ("l2 is now: %N");
                print (l2);
                io.put_new_line;
            end;
        end;


    
    
    reverse_in_place_naive (dlist: TWO_WAY_LINKED_LIST [INTEGER]) is
            -- first try should make quite a difference in run-time
            -- reverse L1 (preferably in place) (can use any builtin 
            -- function for this, if available.
        local
            i : INTEGER;
            done : BOOLEAN;
            -- fl_clone : TWO_WAY_LINKED_LIST[INTEGER];
        do
            -- fl_clone := clone(first_link);
            from i := 1
            until
                i > size
            loop
                dlist.add(dlist.last, i);
                -- inefficient. the problem is that remove_lasts moves
                -- the cursoer and there for one has to run through 
                -- the list over and over again. Well one can that 
                -- just find out by reading the sources ...;-)
                
                dlist.remove_last;
                i := i + 1;
            end;
            if dlist.first = size then
                io.put_string("first element = size%N");
            else
                io.put_string("first element != size %N");
            end;
            debug
                io.put_string("dlist is now %N");
                print (dlist);
                io.newline;
            end;
        end;
    
    compare_lists (al1, al2 : DOUBLY_LINKED_LIST[INTEGER]): INTEGER is
        do
            if al1.is_equal(al2) then
                -- io.put_string("lists are equal%N");
            else
                io.put_string ("lists are not equal %N");
            end;
            Result := al1.count;
        end;
           
       

    
end -- class LISTS
