;;; -*- mode: scheme -*-
;;; $Id$
;;; http://www.bagley.org/~doug/shootout/
;;; from Sven Hartrumpf

(module lists
	(option (set! *genericity* #f))
	(main main))

(define SIZE 10000)

(define (test-lists)
  (let* ((l1 (integer-list 1 SIZE))
	 (l2 (list-copy l1)))
    ;; move-left-to-right from l2 to l3
    (let ((l3 '()))
      (let iter ((l3-run l3))
	(cond ((pair? l2)
	       (cond ((pair? l3-run)	; not the first element moved
		      (let ((l3-run-new (list (car l2))))
			(set! l2 (cdr l2))
			(set-cdr! l3-run l3-run-new)
			(iter l3-run-new)))
		     (else		; the first element moved
		      (set! l3 (list (car l2)))
		      (set! l2 (cdr l2))
		      (iter l3))))))
      ;; move-right-to-left from l3 to l2
      (let ((l2-run #f))		; the last pair of l2 during construction
	(let move-last ((l3-run l3)
			(l3-last-pair #f))
	  (cond ((pair? l3-run)		; last element of l3 not reached
		 (let ((l3-last-element (car l3-run))) ; store current element
		   (set! l2-run (move-last (cdr l3-run) l3-run))
		   (let ((l2-run-new (list l3-last-element)))
		     (cond (l2-run	; not the first element moved
			    (set-cdr! l2-run l2-run-new)
			    (cond ((pair? l3-last-pair)
				   (set-cdr! l3-last-pair '()))
				  (else
				   (set! l3 '()))))
			   (else	; the first element moved
			    (set! l2 l2-run-new)))
		     l2-run-new)))
		(else
		 #f))))
      (set! l1 (reverse! l1))
      (cond ((every-2? = l1 l2)
	     (length l1))
	    (else
	     #f)))))

(define (main args)
  (let ((n (or (and (= (length args) 2) (string->number (cadr args))) 1)))
    (let (result)
      (do ((i 0 (+ i 1)))
	  ((= i n))
	(set! result (test-lists)))
      (display result)
      (newline))))

(define every-2? (lambda (test l1 l2)
  (or (null? l1)
      (and (test (car l1) (car l2))
           (every-2? test (cdr l1) (cdr l2))))))

(define integer-list (lambda (i j)
  (if (> i j)
      '()
      (cons i (integer-list (+ i 1) j)))))

(define list-copy (lambda (l)
  (append l '())))
