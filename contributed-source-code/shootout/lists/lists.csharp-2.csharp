/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy 
*/

using System;
using System.Collections;

class Lists
{

   static void Main(string[] args)
   {         
      const int nSize = 10000;
      int L1Count = 0;
      int n = 0;
      if (args.Length > 0) n = Int32.Parse(args[0]);

      while (n-- > 0)
      {
         // initialize L1
         ArrayList L1 = new ArrayList(nSize);
         for (int j = 1; j <= nSize; j++) L1.Add(j);

         // copy L1 to L2
         ArrayList L2 = (ArrayList)L1.Clone();

         // remove from left of L2 add to right of L3
         Object item;
         ArrayList L3 = new ArrayList(nSize);
         while (L2.Count > 0) {
            item = L2[0];
            L2.RemoveAt(0);
            L3.Add(item);
         }

         // remove from right of L3 add to right of L2
         int index;
         while ( (index = L3.Count) > 0) {
            index = index - 1;
            item = L3[index];
            L3.RemoveAt(index);
            L2.Add(item);
         }

         // reverse L1
         L1.Reverse();

         // check that first item is now SIZE
         if ((int)L1[0] != nSize) Console.WriteLine("First item of L1 != SIZE");

         // check that L1 == L2
         if (!Lists.areEqual(L1,L2)) Console.WriteLine("L1 != L2");

         L1Count = L1.Count;
      }
      Console.WriteLine(L1Count);
   }

   static bool areEqual(ArrayList list1, ArrayList list2){
      if (list1.Count == list2.Count){
         for (int i=0; i<list1.Count; i++)
            if ((int)list1[i] != (int)list2[i]) return false;
         return true;
      }
      else
         return false;
   }

}
